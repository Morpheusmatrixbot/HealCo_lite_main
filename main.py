# healco lite (v1.2) ‚Äî –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è, –º–æ—Ç–∏–≤–∞—à–∫–∏, —Ä–µ–π—Ç–∏–Ω–≥
# –¢—Ä–µ–±—É–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã –≤ requirements.txt:
# python-telegram-bot==21.4
# openai==1.40.2
# pydantic==2.7.4
# pydantic-core==2.18.4
# aiohttp==3.9.5
# python-dotenv==1.0.1

import os
import re
import json
import asyncio
import logging
import random
import requests
import httpx
import difflib
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from requests_oauthlib import OAuth1

from trainer import get_weekly_training_kcal

from pathlib import Path
from dotenv import load_dotenv
from openai import OpenAI
from wger_api import fetch_exercises

# ========= –õ–û–ì–ò =========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()],
)
logger = logging.getLogger("healco-lite")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Open Food Facts –º–æ–¥—É–ª—å
try:
    from openfood import off_by_barcode, off_search_by_name, set_user_agent
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º User-Agent –¥–ª—è Open Food Facts
    set_user_agent("HealCoLite/1.2", "rafael.sayadi@gmail.com")
    HAS_OPENFOOD = True
except ImportError as e:
    logger.warning(f"Open Food Facts module not available: {e}")
    HAS_OPENFOOD = False

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º Application.builder() (PTB v21)
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    PreCheckoutQueryHandler,
)

VERSION = "healco lite v1.2"
PROJECT_NAME = "Healco Lite v1.2"
MODEL_NAME = "gpt-4o-mini"

# ========= ENV =========
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ Replit Secrets
def get_secret(key: str, default: str = "") -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –∏–∑ Replit Secrets —Å fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –ü—Ä—è–º–æ–π fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    return os.getenv(key, default)

OPENAI_API_KEY = get_secret("OPENAI_API_KEY", "")
BOT_TOKEN = get_secret("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_PAYMENT_PROVIDER_TOKEN = get_secret("TELEGRAM_PAYMENT_PROVIDER_TOKEN", "")
DEVELOPER_USER_ID = int(get_secret("DEVELOPER_USER_ID", "0").split(",")[0]) if get_secret("DEVELOPER_USER_ID", "0").split(",")[0].isdigit() else 0

# Admin users list - stored in database
def get_admin_users() -> List[int]:
    """Get list of admin user IDs"""
    admins = db_get("admin_users", [])
    if isinstance(admins, list):
        return [int(uid) for uid in admins if str(uid).isdigit()]
    return []

def add_admin_user(user_id: int) -> bool:
    """Add user to admin list"""
    admins = get_admin_users()
    if user_id not in admins:
        admins.append(user_id)
        db_set("admin_users", admins)
        return True
    return False

def remove_admin_user(user_id: int) -> bool:
    """Remove user from admin list"""
    admins = get_admin_users()
    if user_id in admins:
        admins.remove(user_id)
        db_set("admin_users", admins)
        return True
    return False

# ========= –ü–õ–ê–¢–Å–ñ–ò / –¶–ï–ù–´ =========
PRICE_BASIC = 100       # Stars
PRICE_PREMIUM = 250     # Stars
PRICE_MAXIMUM = 500     # Stars
PRICE_MOTIVATION = 1    # Stars
FREE_DIARY_LIMIT = 2    # –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –≤ free

# ========= DB =========
try:
    from replit import db as replit_db
    HAS_REPLIT = True
except Exception:
    HAS_REPLIT = False

# === –ù–ê–°–¢–†–û–ô–ö–ò/–ö–õ–Æ–ß–ò ===
USE_JSONL = os.getenv("USE_JSONL","0") == "1"   # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –≥—Ä—É–∑–∏–º –¥–∞–º–ø—ã
DISABLE_LOCAL_DB = True  # ‚Üê –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ë–î
GOOGLE_CSE_KEY = get_secret("GOOGLE_CSE_KEY", "")
GOOGLE_CSE_CX  = get_secret("GOOGLE_CSE_CX", "")
VISION_KEY     = get_secret("VISION_KEY", "")        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
USDA_API_KEY   = get_secret("USDA_FDC_API_KEY", "cOQTpuHzZ2aOOpixNXoi8f5n94nEu5RvRoGf3o88")

class LocalDB:
    def __init__(self, path="db.json"):
        self.path = path
        if not os.path.exists(self.path):
            with open(self.path, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=2)
        self._load()

    def _load(self):
        try:
            with open(self.path, "r", encoding="utf-8") as f:
                self.store = json.load(f)
        except Exception:
            self.store = {}

    def _save(self):
        with open(self.path, "w", encoding="utf-8") as f:
            json.dump(self.store, f, ensure_ascii=False, indent=2)

    def __getitem__(self, k):
        return self.store.get(k)

    def __setitem__(self, k, v):
        self.store[k] = v
        self._save()

    def __contains__(self, k):
        return k in self.store

    def keys(self):
        return list(self.store.keys())

local_db = LocalDB(os.environ.get("HLITE_DB_PATH", "db.json"))

def db_get(k, default=None):
    if HAS_REPLIT:
        try:
            return replit_db.get(k, default)
        except Exception:
            # –ï—Å–ª–∏ Replit DB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é
            return local_db.store.get(k, default)
    # –ï—Å–ª–∏ Replit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é
    return local_db.store.get(k, default)

def db_set(k, v):
    if HAS_REPLIT:
        try:
            replit_db[k] = v
            return
        except Exception:
            # –ï—Å–ª–∏ Replit DB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é
            pass
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
    local_db[k] = v

def db_keys_prefix(prefix: str) -> List[str]:
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ Replit DB, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        src = replit_db.keys() if HAS_REPLIT else local_db.keys()
        return [k for k in src if str(k).startswith(prefix)]
    except Exception:
        # –ï—Å–ª–∏ Replit DB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        return [k for k in local_db.keys() if str(k).startswith(prefix)]

# ========= –ö–ù–û–ü–ö–ò =========
MAIN_MENU = [
    [KeyboardButton("ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥"), KeyboardButton("üèãÔ∏è –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä")],
    [KeyboardButton("üçè –ü–ü‚Äë—Ä–µ—Ü–µ–ø—Ç—ã"), KeyboardButton("üìí –ú–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏")],
    [KeyboardButton("üèÜ –ú–æ–∏ –±–∞–ª–ª—ã"), KeyboardButton("‚≠ê –ú–∞–≥–∞–∑–∏–Ω")],
    [KeyboardButton("üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
]
NUTRI_MENU = [
    [KeyboardButton("üçΩÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é")],
    [KeyboardButton("üìä –ö–ë–ñ–£"), KeyboardButton("üìè –ò–ú–¢ (BMI)")],
    [KeyboardButton("üçè –û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫"), KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")],
    [KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì"), KeyboardButton("‚≠ê –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—à–∫—É –æ—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
]
TRAINER_MENU = [
    [KeyboardButton("üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω")],
    [KeyboardButton("‚ûï –í–Ω–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), KeyboardButton("üìà –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã")],
    [KeyboardButton("ü´Å –ú–ü–ö (VO2max)"), KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì")],
    [KeyboardButton("‚≠ê –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—à–∫—É –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
]
LOCATION_KB = [[KeyboardButton("–î–æ–º"), KeyboardButton("–ó–∞–ª"), KeyboardButton("–£–ª–∏—Ü–∞")]]
ACTIVITY_KB = [[KeyboardButton("–ù–∏–∑–∫–∞—è"), KeyboardButton("–£–º–µ—Ä–µ–Ω–Ω–∞—è"), KeyboardButton("–í—ã—Å–æ–∫–∞—è")]]
GOAL_KB = [[KeyboardButton("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É"), KeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")]]
GENDER_KB = [[KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"), KeyboardButton("–ú—É–∂—Å–∫–æ–π")]]

def yes_no_kb(key: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("–î–∞", callback_data=f"{key}:yes"),
          InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{key}:no")]]
    )

# ---------- —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏–µ) ----------
CATEGORY_RULES = {
  # —Å–ª–∞–¥–∫–æ–µ / —Å–Ω–µ–∫–∏
  "chocolate":      {"kcal_100g": (450, 650), "fat_100g": (25, 50), "carbs_100g": (30, 70)},
  "protein_bar":    {"kcal_100g": (300, 500), "protein_100g": (20, 50)},
  "candy":          {"kcal_100g": (300, 600), "fat_100g": (0, 25),  "carbs_100g": (60, 98)},
  "cookies":        {"kcal_100g": (380, 550), "fat_100g": (10, 35), "carbs_100g": (45, 75)},
  "chips":          {"kcal_100g": (450, 600), "fat_100g": (25, 45), "carbs_100g": (35, 60)},
  "granola":        {"kcal_100g": (380, 520), "fat_100g": (8, 25),  "carbs_100g": (50, 75)},

  # –æ—Ä–µ—Ö–∏/—Å–µ–º–µ—á–∫–∏/–º–∞—Å–ª–∞
  "nuts":           {"kcal_100g": (520, 720), "fat_100g": (40, 75), "protein_100g": (10, 30)},
  "seeds":          {"kcal_100g": (450, 700), "fat_100g": (30, 65), "protein_100g": (15, 35)},
  "nut_butter":     {"kcal_100g": (550, 700), "fat_100g": (40, 70), "protein_100g": (15, 30)},
  "oil":            {"kcal_100g": (800, 900), "fat_100g": (99, 100)},

  # –º–æ–ª–æ—á–∫–∞ (—Ç–≤—ë—Ä–¥—ã–µ/–ª–æ–∂–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 100 –≥; –Ω–∞–ø–∏—Ç–∫–∏ ‚Äî –º–æ–∂–Ω–æ –∏ –Ω–∞ 100 –º–ª)
  "yogurt":         {"kcal_100g": (40, 120),  "protein_100g": (2, 12),  "fat_100g": (0, 8)},
  "kefir":          {"kcal_100g": (35, 90),   "protein_100g": (2, 4),   "fat_100g": (0, 4)},
  "milk":           {"kcal_100ml": (35, 90),  "fat_100ml": (0, 6)},
  "cheese_hard":    {"kcal_100g": (280, 450), "protein_100g": (18, 35), "fat_100g": (18, 38)},
  "cottage_cheese": {"kcal_100g": (70, 220),  "protein_100g": (12, 22), "fat_100g": (0, 18)},

  # –º—è—Å–æ/–∫–æ–ª–±–∞—Å—ã –∏ —Ö–ª–µ–±
  "sausage":        {"kcal_100g": (180, 420), "protein_100g": (10, 22), "fat_100g": (10, 38)},
  "bread":          {"kcal_100g": (200, 320), "protein_100g": (5, 12),  "carbs_100g": (35, 60)},

  # –∑–∞–º–æ—Ä–æ–∑–∫–∞/–¥–µ—Å–µ—Ä—Ç—ã
  "ice_cream":      {"kcal_100g": (150, 350), "fat_100g": (5, 25),  "carbs_100g": (15, 45)},

  # –Ω–∞–ø–∏—Ç–∫–∏
  "soda":           {"kcal_100ml": (0, 60),   "carbs_100ml": (0, 15)},
  "energy_drink":   {"kcal_100ml": (0, 60),   "carbs_100ml": (0, 15)},
  "juice":          {"kcal_100ml": (35, 70),  "carbs_100ml": (8, 18)},

  # –∫—Ä—É–ø—ã/–≥–æ—Ç–æ–≤—ã–µ –≥–∞—Ä–Ω–∏—Ä—ã
  "cereal_flakes":  {"kcal_100g": (320, 420), "protein_100g": (6, 14),  "carbs_100g": (60, 80)},
  "pasta_cooked":   {"kcal_100g": (100, 180), "protein_100g": (3, 7),   "carbs_100g": (18, 32)},
  "rice_cooked":    {"kcal_100g": (90, 150),  "protein_100g": (1.5, 3.5),"carbs_100g": (18, 33)},
  "buckwheat_cooked":{"kcal_100g": (90, 150), "protein_100g": (3, 6),   "carbs_100g": (15, 30)},
  "oatmeal_cooked": {"kcal_100g": (60, 120),  "protein_100g": (2, 5),   "carbs_100g": (10, 20)},

  # —Å–æ—É—Å—ã/–ø–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª–∏
  "mayo":           {"kcal_100g": (500, 750), "fat_100g": (50, 85)},
  "ketchup":        {"kcal_100g": (60, 140),  "carbs_100g": (10, 35)},
  "soy_sauce":      {"kcal_100g": (40, 90),   "protein_100g": (5, 12)},
  "jam_honey":      {"kcal_100g": (250, 340), "carbs_100g": (60, 90)},
}

def _plausible(res: dict, cat: str | None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not cat or cat not in CATEGORY_RULES:
        return True
    
    rules = CATEGORY_RULES[cat]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    for key, (min_val, max_val) in rules.items():
        value = res.get(key)
        if value is not None and not (min_val <= value <= max_val):
            return False
    
    return True

def get_typical_nutrition(product_name: str) -> Optional[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    name_lower = product_name.lower()
    
    # –ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥
    if any(word in name_lower for word in ['–º–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥', 'milk chocolate']):
        return {
            'name': '–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥',
            'kcal_100g': 534,
            'protein_100g': 8.0,
            'fat_100g': 30.0,
            'carbs_100g': 57.0,
            'source': 'typical_values'
        }
    
    # –¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥
    if any(word in name_lower for word in ['—Ç–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥', 'dark chocolate', '–≥–æ—Ä—å–∫–∏–π —à–æ–∫–æ–ª–∞–¥']):
        return {
            'name': '–¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥',
            'kcal_100g': 546,
            'protein_100g': 7.8,
            'fat_100g': 31.3,
            'carbs_100g': 48.2,
            'source': 'typical_values'
        }
    
    # –ô–æ–≥—É—Ä—Ç
    if '–π–æ–≥—É—Ä—Ç' in name_lower or 'yogurt' in name_lower:
        return {
            'name': '–ô–æ–≥—É—Ä—Ç',
            'kcal_100g': 63,
            'protein_100g': 5.0,
            'fat_100g': 1.5,
            'carbs_100g': 7.0,
            'source': 'typical_values'
        }
    
    return None

def _guess_category(q: str) -> str | None:
  s = q.lower()
  if any(w in s for w in ("—à–æ–∫–æ–ª–∞–¥", "chocolate")):                    return "chocolate"
  if any(w in s for w in ("–±–∞—Ç–æ–Ω—á–∏–∫", "–±–∞—Ç–æ–Ω—á", "protein bar", "bar")): return "protein_bar"
  if any(w in s for w in ("–∫–æ–Ω—Ñ–µ—Ç", "candy", "–∏—Ä–∏—Å", "–º–∞—Ä–º–µ–ª–∞–¥")):       return "candy"
  if any(w in s for w in ("–ø–µ—á–µ–Ω—å", "cookie", "–ø–µ—á–∏–≤–æ", "–≥–∞–ª–µ—Ç")):      return "cookies"
  if any(w in s for w in ("—á–∏–ø—Å", "chips", "crisp")):                   return "chips"
  if any(w in s for w in ("–≥—Ä–∞–Ω–æ–ª", "granola", "–º—é—Å–ª–∏")):               return "granola"

  if any(w in s for w in ("–æ—Ä–µ—Ö", "nuts", "–º–∏–Ω–¥–∞–ª—å", "—Ñ—É–Ω–¥—É–∫", "–≥—Ä–µ—Ü–∫")): return "nuts"
  if any(w in s for w in ("—Å–µ–º–µ—á", "–ª—å–Ω—è–Ω", "–∫—É–Ω–∂—É—Ç", "—Ç—ã–∫–≤", "seeds")):  return "seeds"
  if any(w in s for w in ("–ø–∞—Å—Ç–∞—Ä–∞—Ö–∏—Å", "–∞—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞", "peanut butter", "almond butter")): return "nut_butter"
  if any(w in s for w in ("–º–∞—Å–ª–æ", "oil", "olive oil", "–ø–æ–¥—Å–æ–ª–Ω–µ—á")):     return "oil"

  if any(w in s for w in ("–π–æ–≥—É—Ä—Ç", "yogurt", "–π–æ–≥—É—Ä")):                 return "yogurt"
  if any(w in s for w in ("–∫–µ—Ñ–∏—Ä", "kefir")):                            return "kefir"
  if any(w in s for w in ("–º–æ–ª–æ–∫–æ", "milk", "lactose-free")):            return "milk"
  if any(w in s for w in ("—Ç–≤–æ—Ä–æ–≥", "cottage cheese", "quark")):         return "cottage_cheese"
  if any(w in s for w in ("—Å—ã—Ä", "cheese")) and "cottage" not in s:      return "cheese_hard"

  if any(w in s for w in ("–∫–æ–ª–±–∞—Å", "—Å–æ—Å–∏—Å–∫", "—Å–∞—Ä–¥–µ–ª", "sausage")):     return "sausage"
  if any(w in s for w in ("—Ö–ª–µ–±", "bread", "–±—É–ª–∫")):                     return "bread"

  if any(w in s for w in ("–º–æ—Ä–æ–∂", "ice cream", "gelato")):              return "ice_cream"

  if any(w in s for w in ("–≥–∞–∑–∏—Ä–æ–≤", "—Å–æ–¥–∞", "cola", "fanta", "sprite")):  return "soda"
  if any(w in s for w in ("—ç–Ω–µ—Ä–≥–µ—Ç", "energy drink", "red bull", "monster")): return "energy_drink"
  if any(w in s for w in ("—Å–æ–∫", "juice", "–Ω–µ–∫—Ç–∞—Ä")):                    return "juice"

  if any(w in s for w in ("—Ö–ª–æ–ø—å—è", "flakes", "corn flakes", "cereal")): return "cereal_flakes"
  if any(w in s for w in ("–ø–∞—Å—Ç–∞", "–º–∞–∫–∞—Ä–æ–Ω", "spaghetti", "penne")):    return "pasta_cooked"
  if any(w in s for w in ("—Ä–∏—Å", "rice")) and "–≤–∞—Ä–µ–Ω" in s:              return "rice_cooked"
  if any(w in s for w in ("–≥—Ä–µ—á–∫", "buckwheat")) and "–≤–∞—Ä–µ–Ω" in s:       return "buckwheat_cooked"
  if any(w in s for w in ("–æ–≤—Å—è–Ω", "oatmeal", "–∫–∞—à–∞")) and "–≤–∞—Ä–µ–Ω" in s: return "oatmeal_cooked"

  if any(w in s for w in ("–º–∞–π–æ–Ω", "mayo", "–º–∞–π–æ–Ω–µ–∑")):                  return "mayo"
  if any(w in s for w in ("–∫–µ—Ç—á—É–ø", "ketchup")):                         return "ketchup"
  if any(w in s for w in ("—Å–æ–µ–≤", "soy sauce")):                         return "soy_sauce"
  if any(w in s for w in ("–≤–∞—Ä–µ–Ω—å", "–¥–∂–µ–º", "–º—ë–¥", "–º–µ–¥", "honey", "jam")): return "jam_honey"

  return None

# ========= –£–¢–ò–õ–ò–¢–´ =========
def sanitize_ai(text: str) -> str:
    if not text:
        return text

    # –£–±–∏—Ä–∞–µ–º markdown —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ—à–µ—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    cleaned = re.sub(r"[*_`]+", "", text)

    # –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏
    cleaned = re.sub(r"^#{1,6}\s*", "", cleaned, flags=re.MULTILINE)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏
    emoji_count = len(re.findall(r"[üòÄ-üôèüåü-üß©üî•üí™üçèü•¶üèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏èüßò‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏èü´°ü§ù‚úÖ‚ùóÔ∏è‚ö†Ô∏èü§î‚ù§Ô∏èüôÇüëçüëèüöÄüçΩÔ∏èüìäü´Ä]", cleaned))
    text_length = len(cleaned)
    max_emojis = max(1, text_length // 1000)  # –ù–µ –±–æ–ª–µ–µ 1 —Å–º–∞–π–ª–∞ –Ω–∞ 1000 —Å–∏–º–≤–æ–ª–æ–≤

    if emoji_count >= max_emojis:
        return cleaned

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∫ —Å—Ç—Ä–æ–∫–∞–º —Å –∏—Ç–æ–≥–∞–º–∏
    def add_emoji(line: str) -> str:
        nonlocal emoji_count, max_emojis
        if not line.strip() or emoji_count >= max_emojis:
            return line
        if re.search(r"[üòÄ-üôèüåü-üß©üî•üí™üçèü•¶üèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏èüßò‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏èü´°ü§ù‚úÖ‚ùóÔ∏è‚ö†Ô∏èü§î‚ù§Ô∏èüôÇüëçüëèüöÄüçΩÔ∏èüìäü´Ä]", line):
            return line
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –¢–û–õ–¨–ö–û –∫ —Å—Ç—Ä–æ–∫–∞–º —Å –∏—Ç–æ–≥–∞–º–∏
        if any(word in line.lower() for word in ["–∏—Ç–æ–≥–æ", "–∏—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å", "–∏—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é"]):
            emoji_count += 1
            return line + (" üçΩÔ∏è" if "–¥–µ–Ω—å" in line.lower() else " üí™" if "–Ω–µ–¥–µ–ª—é" in line.lower() else " üìä")
        return line

    lines = [add_emoji(l) for l in cleaned.split("\n")]
    return "\n".join(lines)

def role_keyboard(role: Optional[str]) -> ReplyKeyboardMarkup:
    if role == "nutri":
        return ReplyKeyboardMarkup(NUTRI_MENU, resize_keyboard=True)
    if role == "trainer":
        return ReplyKeyboardMarkup(TRAINER_MENU, resize_keyboard=True)
    return ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)

def now_ts() -> str:
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def today_key() -> str:
    return datetime.now().strftime("%Y-%m-%d")

def state_key(uid: int) -> str:
    return f"user:{uid}"

def default_state() -> Dict[str, Any]:
    return {
        "profile": {
            "gender": None,
            "age": None,
            "height_cm": None,
            "weight_kg": None,
            "activity": None,
            "goal": None,
            "allergies": "",
            "conditions": "",
            "injuries": "",
            "preferences": {"menu_notes": "", "workout_notes": ""},
        },
        "diaries": {"food": [], "train": [], "metrics": []},
        "daily_energy": {},
        "awards": {},
        "points": 0,
        "access_level": "free",  # free/basic/premium/maximum
        "current_role": None,
        "awaiting": None,
        "tmp": {},
    }

def load_state(uid: int) -> Dict[str, Any]:
    s = db_get(state_key(uid))
    if not s:
        s = default_state()
        db_set(state_key(uid), s)
    s.setdefault("profile", {}).setdefault("preferences", {})
    s.setdefault("diaries", {"food": [], "train": [], "metrics": []})
    s.setdefault("daily_energy", {})
    s.setdefault("awards", {})
    s.setdefault("points", 0)
    s.setdefault("access_level", "free")
    s.setdefault("tmp", {})
    return s

def save_state(uid: int, s: Dict[str, Any]):
    db_set(state_key(uid), s)

def is_developer(user_id: int) -> bool:
    return user_id == DEVELOPER_USER_ID

def is_admin_user(user_id: int) -> bool:
    return user_id in get_admin_users()

def has_full_access(user_id: int) -> bool:
    return is_developer(user_id) or is_admin_user(user_id)

def get_user_access(state: Dict[str, Any], user_id: int) -> str:
    if has_full_access(user_id):
        return "maximum"
    return state.get("access_level", "free")

def check_feature_access(state: Dict[str, Any], user_id: int, feature: str) -> bool:
    level = get_user_access(state, user_id)
    if level == "maximum":
        return True
    if feature == "diaries":
        return level in ["basic", "premium", "maximum"]
    if feature == "recipes":
        return level in ["premium", "maximum"]
    if feature == "calories_ai":
        return level in ["premium", "maximum"]
    if feature == "analytics":
        return level in ["maximum"]
    return False

def add_points(st: Dict[str, Any], amount: int) -> int:
    st["points"] = int(st.get("points", 0)) + int(amount)
    return st["points"]

def ensure_day(s: Dict[str, Any]) -> Dict[str, int]:
    dk = today_key()
    s["daily_energy"].setdefault(dk, {"in": 0, "out": 0})
    return s["daily_energy"][dk]

def add_kcal_in(st: Dict[str, Any], kcal: int):
    day = ensure_day(st)
    day["in"] += int(max(0, kcal))

def add_kcal_out(st: Dict[str, Any], kcal: int):
    day = ensure_day(st)
    day["out"] += int(max(0, kcal))

def day_totals(st: Dict[str, Any]) -> Tuple[int, int]:
    d = st["daily_energy"].get(today_key(), {"in": 0, "out": 0})
    return d.get("in", 0), d.get("out", 0)

def award_once(st: Dict[str, Any], metric: str) -> bool:
    d = today_key()
    st["awards"].setdefault(d, {})
    if st["awards"][d].get(metric):
        return False
    st["awards"][d][metric] = True
    return True

def profile_complete(p: Dict[str, Any]) -> bool:
    return all(
        [
            p.get("gender") in ("–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π"),
            isinstance(p.get("age"), int) and 10 <= p["age"] <= 100,
            isinstance(p.get("height_cm"), int) and 100 <= p["height_cm"] <= 250,
            isinstance(p.get("weight_kg"), (int, float)) and 30 <= float(p["weight_kg"]) <= 300,
            p.get("activity") in ("–ù–∏–∑–∫–∞—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "–í—ã—Å–æ–∫–∞—è"),
            p.get("goal") in ("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"),
        ]
    )

# ========= –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´ =========
def calc_bmi(w_kg: float, h_cm: int):
    h = h_cm / 100.0
    bmi = w_kg / (h * h)
    if bmi < 18.5:
        cat = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
    elif bmi < 25:
        cat = "–ù–æ—Ä–º–∞"
    elif bmi < 30:
        cat = "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
    else:
        cat = "–û–∂–∏—Ä–µ–Ω–∏–µ"
    return round(bmi, 1), cat

def mifflin_st_jeor(g: str, age: int, h: int, w: float) -> float:
    return 10 * w + 6.25 * h - 5 * age + (5 if g == "–ú—É–∂—Å–∫–æ–π" else -161)

def activity_multiplier_profile(level: str) -> float:
    mapping = {"–ù–∏–∑–∫–∞—è": 1.2, "–£–º–µ—Ä–µ–Ω–Ω–∞—è": 1.55, "–í—ã—Å–æ–∫–∞—è": 1.725}
    return mapping.get(level, 1.2)

def recommend_deficit_percent(bmi: float) -> int:
    if bmi >= 35:
        return 25
    if bmi >= 30:
        return 22
    if bmi >= 27:
        return 20
    if bmi >= 25:
        return 17
    return 15

def calc_kbju_weight_loss(profile: Dict[str, Any]) -> Dict[str, Any]:
    g, age, h, w = profile["gender"], profile["age"], profile["height_cm"], float(profile["weight_kg"])
    goal = profile.get("goal", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")

    bmr = mifflin_st_jeor(g, age, h, w)
    tdee = bmr * activity_multiplier_profile(profile["activity"])

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –ø–ª–∞–Ω—É
    training_plan = profile.get("workout_plan")
    weekly_train_kcal = profile.get("workout_weekly_kcal")
    if not weekly_train_kcal and training_plan:
        weekly_train_kcal = get_weekly_training_kcal(training_plan)
        profile["workout_weekly_kcal"] = weekly_train_kcal
    daily_train_kcal = (weekly_train_kcal or 0) / 7.0
    tdee += daily_train_kcal
    bmi, bmi_cat = calc_bmi(w, h)

    # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    if goal == "–ü–æ—Ö—É–¥–µ—Ç—å":
        deficit_pct = recommend_deficit_percent(bmi)
        deficit_kcal = int(round(tdee * deficit_pct / 100.0))
        target = max(int(round(tdee - deficit_kcal)), int(round(bmr)))
        protein_multiplier = 1.8  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à—Ü –ø—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø—É –ø–æ—Ö—É–¥–µ–Ω–∏—è
        weekly_loss = deficit_kcal * 7 / 7700  # –∫–≥ –≤ –Ω–µ–¥–µ–ª—é (7700 –∫–∫–∞–ª = 1 –∫–≥ –∂–∏—Ä–∞)
        recommendations = [
            f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–º–ø –ø–æ—Ö—É–¥–µ–Ω–∏—è: {weekly_loss:.1f} –∫–≥ –≤ –Ω–µ–¥–µ–ª—é",
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "–í–∫–ª—é—á–∞–π—Ç–µ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
        ]
    elif goal == "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
        surplus_kcal = int(round(tdee * 0.10))  # 10% –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
        target = int(round(tdee + surplus_kcal))
        protein_multiplier = 2.0  # –í—ã—Å–æ–∫–∏–π –±–µ–ª–æ–∫ –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü
        deficit_pct = -10  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç
        deficit_kcal = -surplus_kcal

        weekly_gain = surplus_kcal * 7 / 7700  # –∫–≥ –≤ –Ω–µ–¥–µ–ª—é
        recommendations = [
            f"–¶–µ–ª–µ–≤–æ–π –Ω–∞–±–æ—Ä –≤–µ—Å–∞: {weekly_gain:.1f} –∫–≥ –≤ –Ω–µ–¥–µ–ª—é",
            "–£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –±–µ–ª–æ–∫ –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞",
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"
        ]
    else:  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å
        target = int(round(tdee))
        protein_multiplier = 1.6
        deficit_pct = 0
        deficit_kcal = 0

        recommendations = [
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å —á–µ—Ä–µ–∑ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
            "–í–∫–ª—é—á–∞–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã",
            "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤–µ—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        ]

    protein_g = int(round(protein_multiplier * w))
    fat_kcal = 0.25 * target  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –∂–∏—Ä—ã
    fat_g = int(round(fat_kcal / 9.0))
    carbs_kcal = max(0, target - (protein_g * 4 + fat_kcal))
    carbs_g = int(round(carbs_kcal / 4.0))

    # –ú–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö USDA
    micronutrient_needs = get_micronutrient_recommendations(g, age, goal)

    return {
        "bmr": int(round(bmr)),
        "tdee": int(round(tdee)),
        "deficit_pct": deficit_pct,
        "deficit_kcal": deficit_kcal,
        "target_kcal": target,
        "protein_g": protein_g,
        "fat_g": fat_g,
        "carbs_g": carbs_g,
        "bmi": bmi,
        "bmi_category": bmi_cat,
        "goal": goal,
        "recommendations": recommendations,
        "micronutrients": micronutrient_needs,
        "note": "–†–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö USDA FDC –∏ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö. –ò—Ç–æ–≥–æ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—É—Å–∫–∞–π—Ç–µ –Ω–∏–∂–µ BMR.",
        "training_kcal_weekly": int(weekly_train_kcal or 0),
        "training_plan_link": profile.get("workout_plan_link"),
    }

def get_micronutrient_recommendations(gender: str, age: int, goal: str) -> Dict[str, str]:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö USDA"""
    recs = {}

    if gender == "–ú—É–∂—Å–∫–æ–π":
        recs["iron"] = "8 –º–≥/–¥–µ–Ω—å"
        recs["calcium"] = "1000 –º–≥/–¥–µ–Ω—å" if age < 70 else "1200 –º–≥/–¥–µ–Ω—å"
        recs["vitamin_d"] = "15 –º–∫–≥/–¥–µ–Ω—å" if age < 70 else "20 –º–∫–≥/–¥–µ–Ω—å"
    else:  # –ñ–µ–Ω—Å–∫–∏–π
        recs["iron"] = "18 –º–≥/–¥–µ–Ω—å" if age < 51 else "8 –º–≥/–¥–µ–Ω—å"
        recs["calcium"] = "1000 –º–≥/–¥–µ–Ω—å" if age < 51 else "1200 –º–≥/–¥–µ–Ω—å"
        recs["vitamin_d"] = "15 –º–∫–≥/–¥–µ–Ω—å" if age < 70 else "20 –º–∫–≥/–¥–µ–Ω—å"

    # –û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö
    recs["vitamin_c"] = "90 –º–≥/–¥–µ–Ω—å" if gender == "–ú—É–∂—Å–∫–æ–π" else "75 –º–≥/–¥–µ–Ω—å"
    recs["magnesium"] = "400-420 –º–≥/–¥–µ–Ω—å" if gender == "–ú—É–∂—Å–∫–æ–π" else "310-320 –º–≥/–¥–µ–Ω—å"
    recs["omega3"] = "1.6 –≥/–¥–µ–Ω—å" if gender == "–ú—É–∂—Å–∫–æ–π" else "1.1 –≥/–¥–µ–Ω—å"

    if goal == "–ü–æ—Ö—É–¥–µ—Ç—å":
        recs["note"] = "–ü—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –∂–µ–ª–µ–∑–æ, –∫–∞–ª—å—Ü–∏–π –∏ –≤–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B"
    elif goal == "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
        recs["note"] = "–î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã —É–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—è, —Ü–∏–Ω–∫–∞ –∏ –∫—Ä–µ–∞—Ç–∏–Ω–∞"

    return recs

def vo2_category(g: str, vo2: float) -> str:
    if g == "–ú—É–∂—Å–∫–æ–π":
        return "–ù–∏–∑–∫–∏–π" if vo2 < 35 else "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ" if vo2 < 43 else "–°—Ä–µ–¥–Ω–∏–π" if vo2 < 51 else "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ" if vo2 < 58 else "–í—ã—Å–æ–∫–∏–π"
    return "–ù–∏–∑–∫–∏–π" if vo2 < 28 else "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ" if vo2 < 35 else "–°—Ä–µ–¥–Ω–∏–π" if vo2 < 42 else "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ" if vo2 < 49 else "–í—ã—Å–æ–∫–∏–π"

def pulse_zones(age: int, hr_rest: int = 60) -> Dict[str, Tuple[int, int]]:
    hr_max = 208 - 0.7 * age
    hrr = hr_max - hr_rest

    def rng(a, b):
        lo = int(round(hr_rest + a * hrr))
        hi = int(round(hr_rest + b * hrr))
        return (min(lo, hi), max(lo, hi))

    return {
        "recovery": rng(0.50, 0.60),
        "aerobic": rng(0.60, 0.70),
        "tempo": rng(0.70, 0.80),
        "vo2": rng(0.80, 0.90),
        "anaer": rng(0.90, 1.00),
    }

def zones_text(z: Dict[str, Tuple[int, int]]) -> str:
    return (
        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {z['recovery'][0]}‚Äì{z['recovery'][1]}, "
        f"–ê—ç—Ä–æ–±–Ω–∞—è {z['aerobic'][0]}‚Äì{z['aerobic'][1]}, "
        f"–¢–µ–º–ø–æ–≤–∞—è {z['tempo'][0]}‚Äì{z['tempo'][1]}, "
        f"VO2max {z['vo2'][0]}‚Äì{z['vo2'][1]}, "
        f"–ê–Ω–∞—ç—Ä–æ–±–Ω–∞—è {z['anaer'][0]}‚Äì{z['anaer'][1]} —É–¥/–º–∏–Ω"
    )

# ========= –ò–ò-–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–ü–†–û–°–û–í =========
_SYSTEM_PROMPT = """You are a strict nutrition query normalizer. Output valid JSON ONLY.
Schema: {"clean_text_original": "string", "portion_grams": null, "portion_ml": null,
"query_type":"brand|natural|unknown","brand_text":null,"base_en":null,"method_en":null,
"usda_queries":[],"brand_queries":[]}
Rules:
- Extract grams/ml anywhere in text: (\\d+(?:[.,]\\d+)?)\\s*(–≥|–≥—Ä|g|grams?|–∫–≥|kg|–º–ª|ml|–ª|l|–ª–∏—Ç—Ä(?:–∞|–æ–≤)?) ; sum if multiple; remove tokens from text.
- RU‚ÜíEN bases for natural: chicken breast, chicken, turkey, beef, pork, salmon, tuna, bulgur, buckwheat, rice, oat, barley, quinoa, milk, kefir, yogurt, whey.
- Methods: grilled,fried,boiled,roasted,stewed,smoked.
- If brand cues (latin brand words, UPC/EAN 8-14 digits, tokens like protein/pancake/bar/bombbar/danone etc.): query_type=brand.
- For natural: base_en must exist; make usda_queries in priority: "base_en [method] cooked", "base_en cooked", "base_en".
- No nutrition values in output. JSON only."""

_FEWSHOTS = [
    ("–ñ–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 120–≥", {
        "portion_grams": 120, "query_type":"natural",
        "base_en":"chicken breast","method_en":"fried",
        "usda_queries":["chicken breast fried cooked","chicken breast cooked","chicken breast"],
        "brand_queries":[]
    }),
    ("–±—É–ª–≥—É—Ä –≤–∞—Ä—ë–Ω—ã–π 112–≥", {
        "portion_grams": 112, "query_type":"natural",
        "base_en":"bulgur","method_en":"boiled",
        "usda_queries":["bulgur boiled cooked","bulgur cooked","bulgur"],
        "brand_queries":[]
    }),
    ("Bombbar protein pancake 40–≥", {
        "portion_grams": 40, "query_type":"brand",
        "brand_text":"bombbar protein pancake",
        "usda_queries":[], "brand_queries":["bombbar protein pancake","protein pancake bombbar"]
    }),
    ("–Ω–∞ –≥—Ä–∏–ª–µ 200–≥", {
        "portion_grams": 200, "query_type":"unknown",
        "usda_queries":[], "brand_queries":[]
    }),
]

def _heuristic_normalize(text: str) -> dict:
    """–ó–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å, –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ—Å—Ç–∞—è –µ–≤—Ä–∏—Å—Ç–∏–∫–∞."""
    s = text.strip()
    # –≥—Ä–∞–º–º—ã
    m = re.search(r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|g|grams?)\b', s, re.I)
    grams = float(m.group(1).replace(',', '.')) if m else None
    if m:
        s = (s[:m.start()] + s[m.end():]).strip()

    brand_hints = {"bombbar","danone","activia","nestle","milka","protein","pancake","bar","snickers","mars","–π–æ–≥—É—Ä—Ç","—Ç–≤–æ—Ä–æ–∂–æ–∫","–±–∞—Ç–æ–Ω—á–∏–∫"}
    if re.search(r"\b\d{8,14}\b", s) or any(h in s.lower() for h in brand_hints):
        return {
            "clean_text_original": text, "portion_grams": grams, "query_type":"brand",
            "brand_text": s, "base_en": None, "method_en": None,
            "skinless": None, "usda_queries": [], "brand_queries":[s]
        }

    cook_map = {
        r"\b–Ω–∞\s+–≥—Ä–∏–ª[–µ|—è]\b|\b–≥—Ä–∏–ª–ª?\b": "grilled",
        r"\b–∂–∞—Ä–µ–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b": "fried",
        r"\b–≤–∞—Ä–µ–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b|\b–æ—Ç–≤–∞—Ä–Ω": "boiled",
        r"\b–∑–∞–ø–µ—á–µ–Ω–Ω": "roasted",
        r"\b—Ç—É—à–µ–Ω": "stewed",
        r"\b–∫–æ–ø—á–µ–Ω": "smoked",
    }
    method = next((en for rx,en in cook_map.items() if re.search(rx, " "+s.lower()+" ")), None)

    base_map = {
        r"\b–∫—É—Ä–∏–Ω(–∞—è|—ã–π)\s+–≥—Ä—É–¥–∫": "chicken breast",
        r"\b–∫—É—Ä–∏—Ü": "chicken",
        r"\b–∏–Ω–¥–µ–π–∫": "turkey",
        r"\b–≥–æ–≤—è–¥–∏–Ω": "beef",
        r"\b—Å–≤–∏–Ω(–∏–Ω|–∏–Ω–∞)": "pork",
        r"\b–ª–æ—Å–æ—Å—å|\b—Å–µ–º–≥": "salmon",
        r"\b—Ç—É–Ω–µ—Ü": "tuna",
        r"\b–±—É–ª–≥—É—Ä\b|\bbulgur\b": "bulgur",
        r"\b–≥—Ä–µ—á–∫": "buckwheat",
        r"\b—Ä–∏—Å\b": "rice",
        r"\b–æ–≤—Å—è–Ω": "oat",
        r"\b–ø–µ—Ä–ª–æ–≤–∫": "barley",
        r"\b–∫–∏–Ω–æ–∞|\bquinoa\b": "quinoa",
        r"\b—è–±–ª–æ–∫": "apple",
        r"\b–∫–∞—Ä—Ç–æ—Ñ|–∫–∞—Ä—Ç–æ—à": "potato",
        r"\b—è–π—Ü": "egg",
    }
    base = next((en for rx,en in base_map.items() if re.search(rx, s.lower())), None)
    if base:
        queries = []
        if method:
            queries.append(f"{base} {method} cooked")
        queries.extend([f"{base} cooked", base])
        return {
            "clean_text_original": text, "portion_grams": grams, "query_type":"natural",
            "brand_text": None, "base_en": base, "method_en": method,
            "skinless": None, "usda_queries": queries, "brand_queries":[]
        }

    return {
        "clean_text_original": text, "portion_grams": grams, "query_type":"unknown",
        "brand_text": None, "base_en": None, "method_en": None, "skinless": None,
        "usda_queries": [], "brand_queries": []
    }

async def call_llm_normalizer(user_text: str) -> dict:
    """–ï—Å–ª–∏ –µ—Å—Ç—å LLM –∫–ª–∏–µ–Ω—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –µ–≤—Ä–∏—Å—Ç–∏–∫—É."""
    if not client:
        return _heuristic_normalize(user_text)

    messages = [{"role":"system","content":_SYSTEM_PROMPT}]
    # few-shot examples
    for u, js in _FEWSHOTS:
        messages.append({"role":"user","content":u})
        messages.append({"role":"assistant","content":json.dumps(js, ensure_ascii=False)})
    messages.append({"role":"user","content":user_text})

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_llm —Å JSON —Ä–µ–∂–∏–º–æ–º
        content = await chat_llm(messages, model=None, temperature=0, json_mode=True)
        parsed = _safe_json_parse(content)
        
        if parsed:
            return parsed
        else:
            logger.warning(f"LLM normalizer returned invalid JSON: {content[:200]}")
            return _heuristic_normalize(user_text)
            
    except Exception as e:
        logger.warning(f"LLM normalizer failed: {e}")
        return _heuristic_normalize(user_text)

def route_query_with_ai(info: dict, original_text: str) -> dict:
    """–†–æ—É—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
    # –∑–∞—â–∏—Ç–∞ –æ—Ç ¬´cooked¬ª –±–µ–∑ –±–∞–∑—ã
    if info.get("query_type") == "natural" and not info.get("base_en"):
        info["query_type"] = "unknown"
        info["usda_queries"] = []

    # –∏—Ç–æ–≥–æ–≤—ã–π —Ä–æ—É—Ç
    if info.get("query_type") == "brand" and (info.get("brand_queries") or info.get("brand_text")):
        queries = info.get("brand_queries") or [info.get("brand_text")]
        return {"path":"brand", "queries": queries, "grams":info.get("portion_grams"), "base_en": None}

    if info.get("query_type") == "natural" and info.get("usda_queries"):
        return {"path":"usda", "queries": info["usda_queries"], "grams":info.get("portion_grams"), "base_en": info.get("base_en")}

    return {"path":"fallback", "queries":[original_text], "grams":info.get("portion_grams"), "base_en": None}

# ========= GOOGLE CUSTOM SEARCH API =========
# GOOGLE_CSE_KEY = get_secret("GOOGLE_CSE_KEY", "") # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤—ã—à–µ
# GOOGLE_CSE_CX = get_secret("GOOGLE_CSE_CX", "")   # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤—ã—à–µ
# VISION_KEY = get_secret("VISION_KEY", "")         # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤—ã—à–µ

# === –õ—ë–≥–∫–∏–π –∫—ç—à (SQLite) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ ===
import sqlite3
import base64
import time

CACHE_SCHEMA = "r4"  # ‚Üë –ø–æ–º–µ–Ω—è–µ—à—å ‚Äî —Å—Ç–∞—Ä—ã–π –∫—ç—à –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ç—å—Å—è

os.makedirs("./data", exist_ok=True)
_con = sqlite3.connect("./data/cache.db")
_con.execute("""CREATE TABLE IF NOT EXISTS nutri_cache(
  key TEXT PRIMARY KEY,
  payload TEXT NOT NULL,
  last_used INTEGER NOT NULL,
  size_bytes INTEGER NOT NULL
)""")
_con.commit()

def _cache_get(k: str):
    r = _con.execute("SELECT payload FROM nutri_cache WHERE key=?", (k,)).fetchone()
    if not r:
        return None
    _con.execute("UPDATE nutri_cache SET last_used=? WHERE key=?", (int(time.time()), k))
    _con.commit()
    return json.loads(r[0])

def _cache_put(k: str, obj: dict, limit_mb: int = 50):
    data = json.dumps(obj, ensure_ascii=False)
    _con.execute("INSERT OR REPLACE INTO nutri_cache(key,payload,last_used,size_bytes) VALUES (?,?,?,?)",
                 (k, data, int(time.time()), len(data)))
    _con.commit()
    total = _con.execute("SELECT COALESCE(SUM(size_bytes),0) FROM nutri_cache").fetchone()[0] or 0
    while total > limit_mb*1024*1024:
        _con.execute("DELETE FROM nutri_cache WHERE key IN (SELECT key FROM nutri_cache ORDER BY last_used ASC LIMIT 50)")
        _con.commit()
        total = _con.execute("SELECT COALESCE(SUM(size_bytes),0) FROM nutri_cache").fetchone()[0] or 0

# ========================= –£–õ–£–ß–®–ï–ù–ù–´–ô GOOGLE CSE –ü–û–ò–°–ö =========================
def _extract_portions(text: str) -> Tuple[str, Optional[float], Optional[float]]:
    """
    –ò—â–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –º–∞—Å—Å—ã/–æ–±—ä—ë–º–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏:
    - –≥/–≥—Ä/g/gram/grams, –∫–≥/kg
    - –º–ª/ml, –ª/l/–ª–∏—Ç—Ä
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, grams|None, ml|None).
    """
    s = text
    grams = None
    ml = None

    def _to_float(m):
        return float(m.replace(',', '.'))

    # —Å–æ–±–µ—Ä—ë–º –≤—Å–µ –º–∞—Ç—á–∏, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º –∏–∑ —Å—Ç—Ä–æ–∫–∏
    matches = []
    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(–∫–≥|kg)\b', s, flags=re.I):
        grams = (grams or 0) + _to_float(m.group(1)) * 1000
        matches.append((m.start(), m.end()))
    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|g|grams?)\b', s, flags=re.I):
        grams = (grams or 0) + _to_float(m.group(1))
        matches.append((m.start(), m.end()))

    # l / ml
    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(?:–ª|l|–ª–∏—Ç—Ä(?:–∞|–æ–≤)?)\b', s, flags=re.I):
        ml = (ml or 0) + _to_float(m.group(1)) * 1000
        matches.append((m.start(), m.end()))
    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(?:–º–ª|ml|milliliter[s]?)\b', s, flags=re.I):
        ml = (ml or 0) + _to_float(m.group(1))
        matches.append((m.start(), m.end()))

    # –≤—ã—Ä–µ–∑–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
    if matches:
        parts = []
        last = 0
        for a, b in sorted(matches):
            parts.append(s[last:a])
            last = b
        parts.append(s[last:])
        s = " ".join("".join(parts).split())

    return s.strip(), grams, ml

async def _google_cse_search_branded(q: str, num: int = 8) -> List[str]:
    """Optimized Google CSE search for branded products with targeted parameters"""
    if not GOOGLE_CSE_KEY or not GOOGLE_CSE_CX:
        logger.warning("Google CSE credentials not configured")
        return []
    
    try:
        # Extract brand tokens for exact matching
        brand_tokens = [t for t in re.split(r"[\s,]+", q) if len(t) > 2]
        exact = " ".join(brand_tokens[:4])  # –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –≤ exactTerms
        or_terms = "–∫–∞–ª–æ—Ä–∏–∏|–ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å|–ö–ë–ñ–£|nutrition facts|–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å \"–Ω–∞ 100 –≥\""
        domains = "site:ozon.ru OR site:wildberries.ru OR site:vkusvill.ru OR site:perekrestok.ru OR site:lenta.com OR site:5ka.ru OR site:metro-cc.ru OR site:auchan.ru"
        negative = "-inurl:questions -inurl:reviews -inurl:otzyv -inurl:forum"

        params = {
            "key": GOOGLE_CSE_KEY,
            "cx": GOOGLE_CSE_CX,
            "q": f"{domains} {negative}",
            "num": min(10, num),
            "exactTerms": exact,
            "orTerms": or_terms,
            "safe": "off",
            "lr": "lang_ru|lang_en",
            "hl": "ru"
        }
        
        logger.info(f"Google CSE branded search: '{exact}' with nutrition terms")
        
        async with httpx.AsyncClient(timeout=20.0) as cli:
            r = await cli.get("https://www.googleapis.com/customsearch/v1", params=params)
            r.raise_for_status()
            items = (r.json().get("items") or [])
        
        urls = [item["link"] for item in items if "link" in item]
        
        # Filter out unwanted subpages
        deny = ("/questions", "/reviews", "otzyv", "/forum")
        filtered_urls = [u for u in urls if not any(d in u for d in deny)]
        
        logger.info(f"Found {len(filtered_urls)} filtered URLs via optimized Google CSE")
        return filtered_urls
        
    except Exception as e:
        logger.warning(f"Google CSE branded search failed: {e}")
        return []

def _google_cse_search(q: str, num: int = 6, site_filter: str = None) -> List[str]:
    """Legacy Google Custom Search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL (fallback)"""
    if not GOOGLE_CSE_KEY or not GOOGLE_CSE_CX:
        logger.warning("Google CSE credentials not configured")
        return []
    
    try:
        search_query = q + " –∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã"
        if site_filter:
            search_query = f"{q} {site_filter}"
            
        logger.info(f"Google CSE legacy search: '{search_query}'")
        
        response = requests.get("https://www.googleapis.com/customsearch/v1",
                              params={"q": search_query,
                                     "key": GOOGLE_CSE_KEY,
                                     "cx": GOOGLE_CSE_CX,
                                     "num": num},
                              timeout=20)
        
        if response.status_code == 200:
            items = response.json().get("items", [])
            urls = [item["link"] for item in items if "link" in item]
            logger.info(f"Found {len(urls)} URLs via legacy Google CSE")
            return urls
        else:
            logger.warning(f"Google CSE returned status {response.status_code}")
            return []
            
    except Exception as e:
        logger.warning(f"Google CSE search failed: {e}")
        return []

def _abs_url(base: str, u: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ"""
    import urllib.parse as _urlparse
    return u if u.startswith("http") else _urlparse.urljoin(base, u)

def _pick_nutrition_images(html: str, base_url: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å nutrition labels —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–º–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    try:
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º <img ... src="..."> –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        imgs = re.findall(r'<img[^>]+(?:src|data-src|data-original)=["\']([^"\']+)["\']', html, flags=re.I)
        alts = re.findall(r'<img[^>]+alt=["\']([^"\']+)["\']', html, flags=re.I)
        
        # –°–æ–∑–¥–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL
        urls = [_abs_url(base_url, u) for u in imgs]
        
        def score(u: str, alt: str = "") -> int:
            """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è nutrition facts"""
            s = u.lower() + " " + alt.lower()
            keys = ("nutrition", "–ø–∏—â–µ–≤–∞", "–∫–±–∂—É", "–ø–∏—Ç–∞—Ç", "—ç–Ω–µ—Ä–≥–µ—Ç–∏", "facts", 
                   "100–≥", "100 –≥", "100ml", "100 –º–ª", "label", "—Ü–µ–Ω–Ω–æ—Å—Ç—å", "—Å–æ—Å—Ç–∞–≤")
            return sum(k in s for k in keys)
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º alt —Å URL (–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–æ–≤)
        scored = [(urls[i], score(urls[i], alts[i] if i < len(alts) else "")) 
                 for i in range(len(urls))]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        scored.sort(key=lambda x: x[1], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 12 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        return [u for u, _ in scored][:12]
        
    except Exception as e:
        logger.warning(f"Error picking nutrition images: {e}")
        return []

def _cand_score(candidate: dict, category: str = None) -> float:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –ë–ñ–£ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ê—Ç–≤–∞—Ç–µ—Ä–∞"""
    try:
        score = 0
        
        # –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if candidate.get('kcal_100g') is not None:
            score += 10
        if candidate.get('protein_100g') is not None:
            score += 8
        if candidate.get('fat_100g') is not None:
            score += 8
        if candidate.get('carbs_100g') is not None:
            score += 8
            
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –ë–ñ–£
        macro_count = sum(1 for key in ['protein_100g', 'fat_100g', 'carbs_100g'] 
                         if candidate.get(key) is not None)
        score += macro_count * 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º—É–ª–æ–π –ê—Ç–≤–∞—Ç–µ—Ä–∞
        kcal = candidate.get('kcal_100g')
        protein = candidate.get('protein_100g', 0) or 0
        fat = candidate.get('fat_100g', 0) or 0
        carbs = candidate.get('carbs_100g', 0) or 0
        
        if kcal and (protein or fat or carbs):
            atwater_kcal = protein * 4 + fat * 9 + carbs * 4
            if atwater_kcal > 0:
                deviation = abs(kcal - atwater_kcal) / atwater_kcal
                if deviation <= 0.2:  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 20%
                    score += 15
                elif deviation <= 0.4:  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 40%
                    score += 5
                else:  # –ë–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                    score -= 10
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category and _plausible(candidate, category):
            score += 10
            
        # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if kcal and (kcal < 5 or kcal > 1000):
            score -= 20
        if protein and protein > 100:
            score -= 15
        if fat and fat > 100:
            score -= 15
        if carbs and carbs > 100:
            score -= 10
            
        return max(0, score)
        
    except Exception as e:
        logger.warning(f"Error scoring candidate: {e}")
        return 0

def _google_cse_images(q: str, num: int = 4) -> List[str]:
    """Google Custom Search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å nutrition labels"""
    if not GOOGLE_CSE_KEY or not GOOGLE_CSE_CX:
        return []
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
        response = requests.get("https://www.googleapis.com/customsearch/v1",
                              params={"q": q,
                                     "key": GOOGLE_CSE_KEY,
                                     "cx": GOOGLE_CSE_CX,
                                     "searchType": "image",
                                     "num": num},
                              timeout=20)
        if response.status_code == 200:
            return [item["link"] for item in response.json().get("items", []) if "link" in item]
        else:
            logger.warning(f"Google CSE images returned status {response.status_code}")
            return []
    except Exception as e:
        logger.warning(f"Google CSE images search failed: {e}")
        return []

def _num_from_str(x: Any) -> Optional[float]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if x is None:
        return None
    m = re.search(r'(-?\d+(?:[.,]\d+)?)', str(x))
    return float(m.group(1).replace(',', '.')) if m else None

def _convert_kj_to_kcal(energy_str: str, energy_val: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç kJ –≤ kcal –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if not energy_str:
        return energy_val

    energy_str_lower = str(energy_str).lower()

    # –ò—â–µ–º —è–≤–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ kJ
    if re.search(r'\bkj\b|\bkilojoul', energy_str_lower):
        return energy_val / 4.184  # kJ ‚Üí kcal

    # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è > 500 –∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ "kcal", –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ kJ
    if energy_val > 500 and not re.search(r'\bkcal\b|\bcalorie', energy_str_lower):
        return energy_val / 4.184

    return energy_val

def _atwater_energy(protein_g: float, fat_g: float, carbs_g: float) -> float:
    """–†–∞—Å—á—ë—Ç —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ê—Ç–≤–∞—Ç–µ—Ä–∞"""
    if protein_g is None:
        protein_g = 0
    if fat_g is None:
        fat_g = 0
    if carbs_g is None:
        carbs_g = 0
    return protein_g * 4 + fat_g * 9 + carbs_g * 4

def _validate_and_fix_energy(kcal: Optional[float], protein: Optional[float],
                           fat: Optional[float], carbs: Optional[float]) -> float:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ê—Ç–≤–∞—Ç–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if kcal is None or kcal <= 0:
        if protein or fat or carbs:
            return _atwater_energy(protein or 0, fat or 0, carbs or 0)
        return 0

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ë–ñ–£, –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if protein is not None or fat is not None or carbs is not None:
        atwater_kcal = _atwater_energy(protein or 0, fat or 0, carbs or 0)
        if atwater_kcal > 0:
            deviation = abs(kcal - atwater_kcal) / atwater_kcal
            # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ > 40%, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á—ë—Ç –ê—Ç–≤–∞—Ç–µ—Ä–∞
            if deviation > 0.4:
                logger.info(f"Energy mismatch: declared {kcal} vs Atwater {atwater_kcal:.1f}, using Atwater")
                return atwater_kcal

    return kcal

def _unify(n: dict, user_g: Optional[float], user_ml: Optional[float]) -> dict:
    """–£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 100–≥/100–º–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–æ—Ä—Ü–∏—é"""
    kcal_s = n.get("kcal_serv")
    p_s = n.get("protein_serv")
    f_s = n.get("fat_serv")
    c_s = n.get("carb_serv")
    sg = n.get("serving_g")
    sml = n.get("serving_ml")

    kcal_100g = p_100g = f_100g = c_100g = None
    kcal_100ml = p_100ml = f_100ml = c_100ml = None

    if sg and sg > 0:
        k = 100 / sg
        kcal_100g = kcal_s * k if kcal_s is not None else None
        p_100g = p_s * k if p_s is not None else None
        f_100g = f_s * k if f_s is not None else None
        c_100g = c_s * k if c_s is not None else None

    if sml and sml > 0:
        k = 100 / sml
        kcal_100ml = kcal_s * k if kcal_s is not None else None
        p_100ml = p_s * k if p_s is not None else None
        f_100ml = f_s * k if f_s is not None else None
        c_100ml = c_s * k if c_s is not None else None

    # –Ω–∞ –ø–æ—Ä—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kcal_port = p_port = f_port = c_port = None
    if user_g and kcal_100g is not None:
        k = user_g / 100
        kcal_port = kcal_100g * k
        p_port = p_100g * k if p_100g is not None else None
        f_port = f_100g * k if f_100g is not None else None
        c_port = c_100g * k if c_100g is not None else None
    elif user_ml and kcal_100ml is not None:
        k = user_ml / 100
        kcal_port = kcal_100ml * k
        p_port = p_100ml * k if p_100ml is not None else None
        f_port = f_100ml * k if f_100ml is not None else None
        c_port = c_100ml * k if c_100ml is not None else None

    return {"name": n.get("name"), "brand": n.get("brand"), "source": n.get("source"), "url": n.get("url"),
            "kcal_100g": kcal_100g, "protein_100g": p_100g, "fat_100g": f_100g, "carbs_100g": c_100g,
            "kcal_100ml": kcal_100ml, "protein_100ml": p_100ml, "fat_100ml": f_100ml, "carbs_100ml": c_100ml,
            "portion_g": user_g, "portion_ml": user_ml,
            "kcal_portion": kcal_port, "protein_portion": p_port, "fat_portion": f_port, "carbs_portion": c_port}

def _unify_and_scale(nut: Dict[str, Any], user_g: Optional[float], user_ml: Optional[float]) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è ¬´–Ω–∞ –ø–æ—Ä—Ü–∏—é¬ª ‚Üí –Ω–∞ 100 –≥/100 –º–ª –∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –ø–æ—Ä—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Å—á–∏—Ç–∞–µ—Ç –ö–ë–ñ–£ –Ω–∞ –Ω–µ—ë.
    """
    kcal_s = nut.get("kcal_serv")
    p_s = nut.get("protein_serv")
    f_s = nut.get("fat_serv")
    c_s = nut.get("carb_serv")
    serv_g = nut.get("serving_g")
    serv_ml = nut.get("serving_ml")
    source = nut.get("source")
    name = nut.get("name")
    brand = nut.get("brand")
    url = nut.get("url")

    kcal_100g = p_100g = f_100g = c_100g = None
    kcal_100ml = p_100ml = f_100ml = c_100ml = None

    if serv_g and serv_g > 0:
        factor = 100.0 / serv_g
        kcal_100g = kcal_s * factor if kcal_s is not None else None
        p_100g    = p_s    * factor if p_s    is not None else None
        f_100g    = f_s    * factor if f_s    is not None else None
        c_100g    = c_s    * factor if c_s    is not None else None

    if serv_ml and serv_ml > 0:
        factor = 100.0 / serv_ml
        kcal_100ml = kcal_s * factor if kcal_s is not None else None
        p_100ml    = p_s    * factor if p_s    is not None else None
        f_100ml    = f_s    * factor if f_s    is not None else None
        c_100ml    = c_s    * factor if c_s    is not None else None

    # –ö–ë–ñ–£ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–æ—Ä—Ü–∏—é
    kcal_portion = p_portion = f_portion = c_portion = None
    if user_g and kcal_100g is not None:
        k = user_g / 100.0
        kcal_portion = kcal_100g * k
        p_portion    = p_100g    * k if p_100g is not None else None
        f_portion    = f_100g    * k if f_100g is not None else None
        c_portion    = c_100g    * k if c_100g is not None else None
    elif user_ml and kcal_100ml is not None:
        k = user_ml / 100.0
        kcal_portion = kcal_100ml * k
        p_portion    = p_100ml    * k if p_100ml is not None else None
        f_portion    = f_100ml    * k if f_100ml is not None else None
        c_portion    = c_100ml    * k if c_100ml is not None else None

    return {
        "name": name, "brand": brand, "source": source, "url": url,
        "kcal_100g": kcal_100g, "protein_100g": p_100g, "fat_100g": f_100g, "carbs_100g": c_100g,
        "kcal_100ml": kcal_100ml, "protein_100ml": p_100ml, "fat_100ml": f_100ml, "carbs_100ml": c_100ml,
        "portion_g": user_g, "portion_ml": user_ml,
        "kcal_portion": kcal_portion, "protein_portion": p_portion,
        "fat_portion": f_portion, "carbs_portion": c_portion
    }

async def search_branded_product_via_google(
    query_text: str,
    *,
    forced_urls: Optional[list[str]] = None
) -> Optional[dict]:
    """–ë—Ä–µ–Ω–¥–æ–≤—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google CSE —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not GOOGLE_CSE_KEY or not GOOGLE_CSE_CX:
        logger.warning("Google CSE credentials not configured")
        return None
        
    # –∫—ç—à —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ck = f"brand:{CACHE_SCHEMA}:{query_text.lower()}"
    cached = _cache_get(ck)
    if cached:
        logger.info(f"Found cached result for: {query_text}")
        return cached

    clean, g, ml = _extract_portions(query_text)
    logger.info(f"Branded search: clean='{clean}', grams={g}, ml={ml}")
    
    # ========= 0) FATSECRET ‚Äî –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –®–ê–ì =========
    if FATSECRET_KEY and FATSECRET_SECRET:
        logger.info("Trying FatSecret API...")
        try:
            # 0a) –µ—Å–ª–∏ —ç—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é
            barcode = _extract_barcode(query_text)
            if barcode:
                logger.info(f"Searching FatSecret by barcode: {barcode}")
                ck_fs_bar = f"fs:bar:{CACHE_SCHEMA}:{barcode}:{g}:{ml}"
                c = _cache_get(ck_fs_bar)
                if c:
                    logger.info(f"FatSecret cache hit by barcode {barcode}")
                    return c
                
                fid = await _fs_find_by_barcode(barcode)
                if fid:
                    logger.info(f"Found FatSecret food ID by barcode: {fid}")
                    food = await _fs_get_food(fid)
                    res = _fs_norm(food, g, ml) if food else None
                    if res and (res.get('kcal_100g') is not None):
                        logger.info(f"FatSecret barcode result: {res.get('name', 'Unknown')}")
                        _cache_put(ck_fs_bar, res)
                        return res
                
            # 0b) –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–±—Ä–µ–Ω–¥—É
            logger.info(f"Searching FatSecret by name: {clean}")
            ck_fs_q = f"fs:q:{CACHE_SCHEMA}:{clean}:{g}:{ml}"
            c = _cache_get(ck_fs_q)
            if c:
                logger.info(f"FatSecret cache hit by query {clean}")
                return c
                
            food = await _fs_search_best(clean)
            if food:
                logger.info(f"Found FatSecret food: {food.get('food_name', 'Unknown')}")
                res = _fs_norm(food, g, ml)
                if res and (res.get('kcal_100g') is not None):
                    logger.info(f"FatSecret search result: {res.get('name', 'Unknown')}")
                    _cache_put(ck_fs_q, res)
                    return res
                    
        except Exception as e:
            logger.warning(f"FatSecret search failed: {e}")
    else:
        logger.info("FatSecret credentials not configured")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    cat = _guess_category(query_text)
    
    candidates: list[dict] = []

    # 0) –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫–∏ ¬´–≤ –æ–±—Ö–æ–¥¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Vision WEB_DETECTION) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –ø–µ—Ä–≤—ã–º–∏
    urls: list[str] = []
    if forced_urls:
        urls.extend(forced_urls)

    # 1) Optimized CSE search for branded products
    if not urls:
        urls = await _google_cse_search_branded(clean, num=10)
    
    # Fallback to legacy search if optimized search fails
    if not urls:
        search_queries = [
            f"{clean} –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ö–ë–ñ–£",
            f"{clean} —Å–æ—Å—Ç–∞–≤ nutrition facts",
            f"{clean} –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"
        ]
        
        for search_query in search_queries:
            urls = _google_cse_search(search_query, num=6)
            if urls:
                break
    
    # –ª—ë–≥–∫–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –æ—Ç—Å–µ–≤ –º—É—Å–æ—Ä–∞ (–≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–∑—ã–≤—ã)
    deny = ("/questions", "/reviews", "otzyv", "/forum")
    seen = set()
    urls = [u for u in urls if not any(d in u for d in deny)]
    for url in urls:
        if url in seen:
            continue
        seen.add(url)
        try:
            def _fetch_html():
                return requests.get(url, timeout=20, headers={"User-Agent": "Mozilla/5.0"}).text
            
            html = await asyncio.to_thread(_fetch_html)
            logger.info(f"Parsing HTML from: {url}")
            
        except Exception as e:
            logger.warning(f"Failed to fetch {url}: {e}")
            continue

        # 1a) JSON-LD ‚Üí regex ‚Üí GPT
        d = _jsonld(html)
        if not d:
            d = _regex_nutrition(html)
            logger.info(f"Regex nutrition result: {d}")
        
        if not d and OPENAI_API_KEY:   # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º GPT
            logger.info("Trying GPT extraction...")
            d = await _gpt_extract_nutrition(html)
            if d:
                logger.info(f"GPT extraction successful: {d}")
            else:
                logger.info("GPT extraction failed or returned empty")
        if not d:
            # 1b) OCR –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (nutrition label)
            for img_url in _pick_nutrition_images(html, base_url=url)[:12]:
                txt = await _vision_ocr_text(img_url) if VISION_KEY else ""
                if not txt:
                    continue
                d = _parse_ocr(txt)
                if d:
                    d["url"] = img_url
                    break
        if not d:
            logger.info(f"No nutrition data found on: {url}")
            continue

        d["url"] = d.get("url", url)
        res = normalize_result(_unify_and_scale(d, g, ml))
        res = _fix_portion_leak(res)
        candidates.append(res)

    # CSE images ‚Üí Vision OCR (—Å base64) ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
    if VISION_KEY:
        logger.info(f"Healco: trying Vision OCR on image search for: {clean}")
        img_query = f"{clean} nutrition facts –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"
        img_urls = _google_cse_images(img_query, num=12)
        
        for img in img_urls:
            txt = await _vision_ocr_text(img)
            if not txt:
                continue
                
            d = _parse_ocr(txt)
            if not d:
                continue
                
            d["url"] = img
            res = normalize_result(_unify_and_scale(d, g, ml))
            res = _fix_portion_leak(res)
            candidates.append(res)

    logger.info(f"Found {len(candidates)} candidates before filtering")
    
    # –î–ª—è –±—Ä–µ–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
    valid_candidates = [c for c in candidates if _plausible_branded(c)]
    logger.info(f"After branded plausibility filter: {len(valid_candidates)} candidates")
    
    if not valid_candidates:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
        logger.info("No candidates passed plausibility filter, trying without filter")
        valid_candidates = candidates

    if not valid_candidates:
        logger.info(f"No branded product found for: {query_text}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –ø–æ–∏—Å–∫ –∫–∞–∫ fallback
        if re.search(r'\b\d{8,14}\b', query_text):
            logger.info("Trying fallback search for barcode-like query")
            fallback_result = await search_google_for_product(query_text)
            if fallback_result:
                _cache_put(ck, fallback_result)
                return fallback_result
        return None

    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–ø–æ _cand_score)
    valid_candidates.sort(key=lambda r: _cand_score(r, cat), reverse=True)
    best = valid_candidates[0]
    _cache_put(ck, best)
    return best

async def _old_search_branded_product_via_google(
    query_text: str,
    google_cse_key: str,
    google_cse_cx: str,
    vision_key: Optional[str] = None,
    site_filter: Optional[str] = None,
    cse_results: int = 6,
    image_results: int = 4
) -> Optional[Dict[str, Any]]:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥–æ–≤—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google CSE + Vision OCR.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ö–ë–ñ–£ –Ω–∞ 100 –≥/100 –º–ª –∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–æ—Ä—Ü–∏—é.
    """
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ü–∏—é (–≥/–º–ª) –∏ —á–∏—Å—Ç–∏–º —Å—Ç—Ä–æ–∫—É
    clean_text, grams, ml = _extract_portions(query_text)
    search_q = clean_text.strip()

    logger.info(f"Branded search: '{query_text}' ‚Üí clean='{search_q}', grams={grams}, ml={ml}")

    # 1) –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ CSE
    urls = _google_cse_search(search_q, google_cse_key, google_cse_cx, num=cse_results, site_filter=site_filter)

    for url in urls:
        try:
            def _fetch_page():
                response = requests.get(url, timeout=20, headers={"User-Agent": "Mozilla/5.0"})
                response.raise_for_status()
                return response.text

            html = await asyncio.to_thread(_fetch_page)
        except Exception as e:
            logger.debug(f"Failed to fetch {url}: {e}")
            continue

        data = _jsonld(html) or _regex_nutrition(html)
        if not data:
            continue

        data["url"] = url
        unified = _unify(data, grams, ml)

        # —É—Å–ø–µ—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∫–∫–∞–ª –∏ —á—Ç–æ-—Ç–æ –∏–∑ –ë/–ñ/–£ –Ω–∞ 100–≥/100–º–ª
        have_base = any(unified.get(k) is not None for k in ("kcal_100g", "kcal_100ml"))
        have_macros = any(unified.get(k) is not None for k in ("protein_100g", "fat_100g", "carbs_100g",
                                                               "protein_100ml", "fat_100ml", "carbs_100ml"))
        if have_base and have_macros:
            logger.info(f"Found branded product via CSE: {unified.get('name', 'Unknown')}")
            return unified

    # 2) –∫–∞—Ä—Ç–∏–Ω–∫–∏ + OCR (–µ—Å–ª–∏ Vision API –¥–æ—Å—Ç—É–ø–µ–Ω)
    if vision_key:
        logger.info("Trying Vision OCR for images...")
        img_urls = _google_cse_images(search_q, google_cse_key, google_cse_cx, num=image_results)

        for img in img_urls:
            text = await _vision_ocr_text(img, vision_key)
            if not text:
                continue

            data = _extract_from_ocr_text(text)
            if not data:
                continue

            data["url"] = img
            unified = _unify(data, grams, ml)

            have_base = any(unified.get(k) is not None for k in ("kcal_100g", "kcal_100ml"))
            have_macros = any(unified.get(k) is not None for k in ("protein_100g", "fat_100g", "carbs_100g",
                                                                   "protein_100ml", "fat_100ml", "carbs_100ml"))
            if have_base and have_macros:
                logger.info(f"Found branded product via Vision OCR: {img}")
                return unified

    logger.info(f"No branded product found for: {query_text}")
    return None

async def search_google_for_product(query: str) -> Optional[Dict[str, Any]]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ Google CSE —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ Vision OCR"""
    if not GOOGLE_CSE_KEY or not GOOGLE_CSE_CX:
        logger.warning("Google API credentials not configured")
        return None

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥–æ–≤—ã–π –ø–æ–∏—Å–∫
        if is_branded_product(query):
            logger.info(f"Detected branded product: {query}")
            result = search_branded_product_via_google(query)
            if result:
                logger.info(f"Found branded product: {result.get('name', 'Unknown')}")
                return result

        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        original_grams = 100
        grams_pattern = r'(\d{1,4})\s*(?:–≥|–≥—Ä|–≥—Ä\.|g|gr|gram|grams|–≥—Ä–∞–º–º|–≥—Ä–∞–º–º–æ–≤)\b'
        grams_match = re.search(grams_pattern, query, re.IGNORECASE)
        if grams_match:
            original_grams = int(grams_match.group(1))

        clean_query = re.sub(grams_pattern, '', query, flags=re.IGNORECASE)
        clean_query = ' '.join(clean_query.split()).strip()

        logger.info(f"Google fallback search: original='{query}' | grams={original_grams} | clean='{clean_query}'")

        if len(clean_query) < 2:
            return None

        # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        search_variations = [
            f"{clean_query} –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ö–ë–ñ–£",
            f"{clean_query} nutrition facts calories protein",
            f"{clean_query} —Å–æ—Å—Ç–∞–≤ –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å",
        ]

        url = "https://www.googleapis.com/customsearch/v1"

        for search_attempt, search_query in enumerate(search_variations, 1):
            logger.info(f"Search attempt {search_attempt}: {search_query}")

            params = {
                'key': GOOGLE_CSE_KEY,
                'cx': GOOGLE_CSE_CX,
                'q': search_query,
                'num': 6
            }

            def _make_request():
                response = requests.get(url, params=params, timeout=15)
                return response.json() if response.status_code == 200 else None

            data = await asyncio.to_thread(_make_request)

            if not data or not data.get('items'):
                continue

            for item in data['items']:
                title = item.get('title', '')
                snippet = item.get('snippet', '')
                text_content = f"{title} {snippet}"

                relevance_score = calculate_relevance_score(text_content, clean_query)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–∏–∑–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é (< 0.9)
                if relevance_score < 0.9:
                    continue

                nutrition_data = extract_nutrition_from_text(text_content.lower(), clean_query)
                if nutrition_data and nutrition_data.get('kcal_100g', 0) > 0:
                    logger.info(f"Found fallback result: {nutrition_data['name']}")
                    return nutrition_data

        logger.info(f"No results found for: {query}")
        return None

    except Exception as e:
        logger.error(f"Google search error: {e}")
        return None

def calculate_relevance_score(text: str, query: str) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
    text_lower = text.lower()
    query_words = query.lower().split()

    if not query_words:
        return 0.0

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
    matches = 0
    for word in query_words:
        if len(word) >= 3 and word in text_lower:
            matches += 1

    # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    relevance = matches / len(query_words)

    # –ë–æ–Ω—É—Å—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    nutrition_keywords = ['–∫–∞–ª–æ—Ä–∏', '–∫–∫–∞–ª', '–±–µ–ª–∫', '–∂–∏—Ä', '—É–≥–ª–µ–≤–æ–¥', 'protein', 'fat', 'carb', 'kcal', 'nutrition']
    nutrition_bonus = sum(0.1 for keyword in nutrition_keywords if keyword in text_lower)

    return min(1.0, relevance + nutrition_bonus)

def extract_nutrition_from_ai_response(ai_text: str, product_name: str) -> Optional[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
        kcal_patterns = [
            r'(\d{1,4})\s*(?:–∫–∫–∞–ª|–∫–∞–ª–æ—Ä–∏|kcal|cal)',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})',
            r'—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è\s+—Ü–µ–Ω–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})'
        ]

        protein_patterns = [
            r'–±–µ–ª–∫[–∏–∞–æ][:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'–ø—Ä–æ—Ç–µ–∏–Ω[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?\s*–±–µ–ª–∫'
        ]

        fat_patterns = [
            r'–∂–∏—Ä[—ã–∞–æ][:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?\s*–∂–∏—Ä'
        ]

        carbs_patterns = [
            r'—É–≥–ª–µ–≤–æ–¥[—ã–∞–æ][:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?\s*—É–≥–ª–µ–≤–æ–¥'
        ]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
        kcal = 0
        for pattern in kcal_patterns:
            match = re.search(pattern, ai_text, re.IGNORECASE)
            if match:
                try:
                    potential_kcal = int(match.group(1))
                    if 10 <= potential_kcal <= 900:
                        kcal = potential_kcal
                        break
                except ValueError:
                    continue

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        def extract_number(match_group):
            if match_group:
                try:
                    return float(str(match_group).replace(',', '.'))
                except (ValueError, AttributeError):
                    return 0
            return 0

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–ª–∫–∏
        protein = 0
        for pattern in protein_patterns:
            matches = re.findall(pattern, ai_text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0] if match else ""
                potential_protein = extract_number(str(match))
                if 0 <= potential_protein <= 100:
                    protein = potential_protein
                    break
            if protein > 0:
                break

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∏—Ä—ã
        fat = 0
        for pattern in fat_patterns:
            matches = re.findall(pattern, ai_text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0] if match else ""
                potential_fat = extract_number(str(match))
                if 0 <= potential_fat <= 100:
                    fat = potential_fat
                    break
            if fat > 0:
                break

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≥–ª–µ–≤–æ–¥—ã
        carbs = 0
        for pattern in carbs_patterns:
            matches = re.findall(pattern, ai_text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0] if match else ""
                potential_carbs = extract_number(str(match))
                if 0 <= potential_carbs <= 100:
                    carbs = potential_carbs
                    break
            if carbs > 0:
                break

        # –ï—Å–ª–∏ –ò–ò –Ω–µ –¥–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Ö –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
        if kcal == 0 and protein == 0 and fat == 0 and carbs == 0:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —á–∏—Å–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            numbers = re.findall(r'\b(\d{1,3}(?:[.,]\d{1,2})?)\b', ai_text)
            if len(numbers) >= 4:
                try:
                    kcal = int(float(numbers[0].replace(',', '.')))
                    protein = float(numbers[1].replace(',', '.'))
                    fat = float(numbers[2].replace(',', '.'))
                    carbs = float(numbers[3].replace(',', '.'))
                except (ValueError, IndexError):
                    pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ö–æ—Ç—è –±—ã –∫–∞–ª–æ—Ä–∏–∏
        if kcal > 0:
            return {
                'kcal_100g': int(kcal),
                'protein_100g': round(protein, 1),
                'fat_100g': round(fat, 1),
                'carbs_100g': round(carbs, 1)
            }

        return None

    except Exception as e:
        logger.warning(f"Error extracting nutrition from AI response: {e}")
        return None

def _to_float_or_none(x):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"""
    if x is None:
        return None
    try:
        val = float(str(x).replace(',', '.'))
        return val if val > 0 else None
    except (ValueError, TypeError):
        return None

def extract_nutrition_from_text(text: str, product_name: str) -> Optional[Dict[str, Any]]:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
        kcal_patterns = [
            r'(\d{1,4})\s*–∫–∫–∞–ª(?:/100\s*–≥|–Ω–∞\s*100\s*–≥|per\s*100g)?',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})\s*–∫–∫–∞–ª',
            r'—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è\s+—Ü–µ–Ω–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})\s*–∫–∫–∞–ª',
            r'(\d{1,4})\s*–∫–∫–∞–ª\s*(?:–Ω–∞|per)\s*100',
            r'calories[:\s]*(\d{1,4})',
            r'(\d{1,4})\s*kcal',
            r'energy[:\s]*(\d{1,4})\s*kcal',
            r'–ø–∏—â–µ–≤–∞—è\s+—Ü–µ–Ω–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})\s*–∫–∫–∞–ª',
            r'(\d{1,4})\s*cal(?:ories)?'
        ]

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ë–ñ–£ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        protein_patterns = [
            r'–±–µ–ª–∫[–∏–∞–æ][:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'protein[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*g?',
            r'–±[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'–±–µ–ª–æ–∫[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'–ø—Ä–æ—Ç–µ–∏–Ω[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'proteins?[:\s-]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥\s*–±–µ–ª–∫',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*g?\s*protein'
        ]

        fat_patterns = [
            r'–∂–∏—Ä[—ã–∞–æ][:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'fat[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*g?',
            r'–∂[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'–ª–∏–ø–∏–¥—ã[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'–∂–∏—Ä—ã[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'fats?[:\s-]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥\s*–∂–∏—Ä',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*g?\s*fat'
        ]

        carbs_patterns = [
            r'—É–≥–ª–µ–≤–æ–¥[—ã–∞–æ][:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'carbohydrate[s]?[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*g?',
            r'carb[s]?[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*g?',
            r'—É[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'—Å–∞—Ö–∞—Ä–∞?[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'—É–≥–ª–µ–≤–æ–¥—ã[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'carbs?[:\s-]*(\d{1,3}(?:[.,]\d{1,2})?)',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥\s*—É–≥–ª–µ–≤–æ–¥',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*g?\s*carb'
        ]

        # –ò—â–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
        kcal = None
        for pattern in kcal_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                try:
                    potential_kcal = int(match.group(1))
                    if 10 <= potential_kcal <= 900:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                        kcal = potential_kcal
                        break
                except ValueError:
                    continue

        if kcal is None:
            return None

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        def extract_number(match_group):
            if match_group:
                try:
                    val = float(match_group.replace(',', '.'))
                    return val if 0 <= val <= 100 else None
                except (ValueError, AttributeError):
                    return None
            return None

        # –ò—â–µ–º –±–µ–ª–∫–∏
        protein = None
        for pattern in protein_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                potential_protein = extract_number(str(match))
                if potential_protein is not None:
                    protein = potential_protein
                    break
            if protein is not None:
                break

        # –ò—â–µ–º –∂–∏—Ä—ã
        fat = None
        for pattern in fat_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                potential_fat = extract_number(str(match))
                if potential_fat is not None:
                    fat = potential_fat
                    break
            if fat is not None:
                break

        # –ò—â–µ–º —É–≥–ª–µ–≤–æ–¥—ã
        carbs = None
        for pattern in carbs_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                potential_carbs = extract_number(str(match))
                if potential_carbs is not None:
                    carbs = potential_carbs
                    break
            if carbs is not None:
                break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å)
        if protein is not None and fat is not None and carbs is not None:
            calculated_kcal = protein * 4 + fat * 9 + carbs * 4
            if calculated_kcal > 0:
                deviation = abs(kcal - calculated_kcal) / kcal
                if deviation > 0.4:
                    # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–∏
                    protein = fat = carbs = None

        return {
            'name': product_name.strip().title(),
            'brand': '',
            'kcal_100g': int(kcal),
            'protein_100g': protein,
            'fat_100g': fat,
            'carbs_100g': carbs,
            'url': 'smart_search'
        }

    except Exception as e:
        logger.warning(f"Error extracting nutrition from text: {e}")
        return None

def calculate_nutrition_from_internet_search(product_data: Dict[str, Any], grams: int) -> Dict[str, Any]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞"""
    factor = grams / 100.0

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    calculated_kcal = round(product_data['kcal_100g'] * factor)
    calculated_protein = round(product_data['protein_100g'] * factor, 1)
    calculated_fat = round(product_data['fat_100g'] * factor, 1)
    calculated_carbs = round(product_data['carbs_100g'] * factor, 1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "Google Search"
    source_description = f"–£–º–Ω—ã–π –ø–æ–∏—Å–∫: {product_data['name']}"
    if grams != 100:
        source_description += f" ({grams}–≥)"

    return {
        'kcal': calculated_kcal,
        'protein_g': calculated_protein,
        'fat_g': calculated_fat,
        'carbs_g': calculated_carbs,
        'notes': source_description
    }

# ========= EXTERNAL JSONL DATABASE =========
EXTERNAL_JSONL_URL = get_secret("EXTERNAL_JSONL_URL", "")

# Google Drive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GDRIVE_ID = get_secret("GDRIVE_ID", "1nasoharfXMPV41QX6WWmxtiwk-L_TcCQ")  # –º–æ–∂–Ω–æ –∏ —á–µ—Ä–µ–∑ ENV

def _file_id_from_url(url_or_id: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id –∏–∑ Google Drive URL"""
    import re
    if re.fullmatch(r"[A-Za-z0-9_-]{25,}", url_or_id):
        return url_or_id
    m = re.search(r"/d/([A-Za-z0-9_-]{25,})/", url_or_id) or re.search(r"[?&]id=([A-Za-z0-9_-]{25,})", url_or_id)
    return m.group(1) if m else url_or_id

def _direct_url(file_id: str) -> str:
    return f"https://drive.google.com/uc?export=download&id={file_id}"

async def download_jsonl_from_gdrive(file_id: str, dest_path: str):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSONL —Ñ–∞–π–ª–∞ —Å Google Drive"""
    os.makedirs(os.path.dirname(dest_path), exist_ok=True)

    # 1) gdown (–ª—É—á—à–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
    try:
        import gdown
        gdown.download(id=file_id, output=dest_path, quiet=False)
        logger.info("Successfully downloaded with gdown")
        return
    except Exception as e:
        logger.warning(f"gdown failed: {e}, trying direct download")

    # 2) fallback: uc?export=download
    import aiohttp
    try:
        async with aiohttp.ClientSession() as s:
            async with s.get(_direct_url(file_id)) as r:
                r.raise_for_status()
                data = await r.read()

        # –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç HTML
        head = data[:200].lower()
        if b"<html" in head:
            raise RuntimeError("Google Drive –≤–µ—Ä–Ω—É–ª HTML (–Ω–µ —Ñ–∞–π–ª). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: '–î–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ gdown.")

        with open(dest_path, "wb") as f:
            f.write(data)

        logger.info("Successfully downloaded with direct method")
    except Exception as e:
        logger.error(f"Failed to download from Google Drive: {e}")
        raise

async def load_external_jsonl_database(url_or_id: str = None) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ JSONL —Ñ–∞–π–ª–∞"""
    if not url_or_id:
        url_or_id = GDRIVE_ID

    if not url_or_id:
        return []

    try:
        temp_path = "./data/products.jsonl.temp"

        if "drive.google.com" in url_or_id or len(url_or_id) < 50:  # –ï—Å–ª–∏ —ç—Ç–æ ID –∏–ª–∏ URL Google Drive
            file_id = _file_id_from_url(url_or_id)
            await download_jsonl_from_gdrive(file_id, temp_path)
        else:
            # –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö URL
            def _download():
                headers = {
                    'User-Agent': 'Healco-Bot/1.0 (https://replit.com)',
                    'Accept': 'application/json, text/plain'
                }
                response = requests.get(url_or_id, headers=headers, timeout=30)
                if response.status_code == 200:
                    with open(temp_path, 'w', encoding='utf-8') as f:
                        f.write(response.text)
                else:
                    logger.warning(f"Failed to download JSONL: {response.status_code}")
                    return False
                return True

            success = await asyncio.to_thread(_download)
            if not success:
                return []

        # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSONL
        products = []
        if os.path.exists(temp_path):
            with open(temp_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if not line:
                        continue
                    try:
                        data = json.loads(line)
                        if isinstance(data, dict) and data.get('name'):
                            products.append(data)
                    except json.JSONDecodeError as e:
                        logger.warning(f"Invalid JSON on line {line_num}: {e}")
                        continue

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_path)

        logger.info(f"Loaded {len(products)} products from external JSONL database")
        return products

    except Exception as e:
        logger.error(f"Error loading external JSONL database: {e}")
        return []

async def search_external_jsonl_product(query: str, products: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
    """–ò—â–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π JSONL –±–∞–∑–µ"""
    if not products:
        return None

    try:
        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å
        clean_query = re.sub(r'\d+\s*(?:–≥|–≥—Ä|–≥—Ä\.|g|gr|gram|grams|–≥—Ä–∞–º–º|–≥—Ä–∞–º–º–æ–≤)', '', query, flags=re.IGNORECASE)
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
        clean_query = re.sub(r'[^\w\s\-–∞-—è—ë]', ' ', clean_query, flags=re.UNICODE)
        clean_query = ' '.join(clean_query.split()).lower()

        if len(clean_query) < 2:
            return None

        query_words = [word for word in clean_query.split() if len(word) >= 2]
        if not query_words:
            return None

        best_product = None
        best_score = 0

        for product in products:
            product_name = (product.get('name') or '').lower()
            brand = (product.get('brand') or '').lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            kcal = float(product.get('kcal_100g', 0))
            proteins = float(product.get('protein_100g', 0))
            fat = float(product.get('fat_100g', 0))
            carbs = float(product.get('carbs_100g', 0))

            if kcal <= 0 and proteins <= 0 and fat <= 0 and carbs <= 0:
                continue

            # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            score = 0

            # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            for word in query_words:
                if word in product_name:
                    score += 10
                    if product_name.startswith(word) or product_name.endswith(word):
                        score += 5
                if word in brand:
                    score += 6

            # –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤
            for word in query_words:
                if len(word) >= 4:
                    for product_word in product_name.split():
                        if len(product_word) >= 4:
                            if word in product_word or product_word in word:
                                score += 4

            # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if kcal > 0:
                score += 5
            if proteins > 0:
                score += 3
            if fat >= 0:
                score += 2
            if carbs >= 0:
                score += 2

            # –ë–æ–Ω—É—Å –∑–∞ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if len(product_name.split()) <= 5:
                score += 3

            logger.debug(f"External JSONL: {product_name[:50]}..., Score: {score}")

            if score > best_score and score >= 8:
                best_score = score
                best_product = product

        if best_product:
            logger.info(f"Found in external JSONL: {best_product['name']} (score: {best_score})")
            return {
                'name': best_product['name'],
                'brand': best_product.get('brand', ''),
                'kcal_100g': int(float(best_product.get('kcal_100g', 0))),
                'protein_100g': float(best_product.get('protein_100g', 0)),
                'fat_100g': float(best_product.get('fat_100g', 0)),
                'carbs_100g': float(best_product.get('carbs_100g', 0)),
                'url': 'external_database'
            }

        return None

    except Exception as e:
        logger.error(f"Error searching external JSONL: {e}")
        return None

def calculate_nutrition_from_external_jsonl(product_data: Dict[str, Any], grams: int) -> Dict[str, Any]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑—ã"""
    factor = grams / 100.0

    return {
        'kcal': int(product_data['kcal_100g'] * factor),
        'protein_g': int(product_data['protein_100g'] * factor),
        'fat_g': int(product_data['fat_100g'] * factor),
        'carbs_g': int(product_data['carbs_100g'] * factor),
        'notes': f"–í–Ω–µ—à–Ω—è—è –±–∞–∑–∞: {product_data['name']}" + (f" ({product_data['brand']})" if product_data['brand'] else "")
    }

# ========= USDA FDC API =========
USDA_FDC_API_KEY = USDA_API_KEY

# ===================== FATSECRET CONFIG =====================
FATSECRET_KEY    = get_secret("FATSECRET_KEY", "")
FATSECRET_SECRET = get_secret("FATSECRET_SECRET", "")
FS_BASE = "https://platform.fatsecret.com/rest/server.api"

def _fatsecret_auth():
    if not FATSECRET_KEY or not FATSECRET_SECRET:
        return None
    return OAuth1(FATSECRET_KEY, FATSECRET_SECRET)

async def _fs_request(method: str, params: dict | None = None) -> dict | None:
    """Universal FatSecret REST call (OAuth1 signed)."""
    auth = _fatsecret_auth()
    if not auth:
        logger.warning("FatSecret credentials are not set")
        return None
    p = {"method": method, "format": "json"}
    if params:
        p.update(params)
    def _do():
        return requests.get(FS_BASE, params=p, auth=auth, timeout=20)
    try:
        r = await asyncio.to_thread(_do)
        if r.status_code != 200:
            logger.warning(f"FatSecret HTTP {r.status_code}: {r.text[:200]}")
            return None
        return r.json()
    except Exception as e:
        logger.warning(f"FatSecret request failed: {e}")
        return None

def _fs_to_float(x):
    try:
        return float(str(x).replace(",", ".")) if x is not None else None
    except Exception:
        return None

def _fs_pick_serving(servings) -> dict | None:
    """Pick best serving preferring metric g/ml."""
    if not servings:
        return None
    if isinstance(servings, dict):
        servings = [servings]
    def _score(s):
        unit = (s.get("metric_serving_unit") or s.get("serving_unit") or "").lower()
        score = 0
        if unit in ("g","ml"): score += 3
        if _fs_to_float(s.get("metric_serving_amount")): score += 1
        return score
    return max(servings, key=_score)

def _fs_norm(food: dict, grams: float | None, ml: float | None) -> dict | None:
    """
    Normalize FatSecret ‚Üí unified dict (per 100 g/ml + per user portion).
    """
    if not food:
        return None
    name  = (food.get("food_name") or "‚Äî").strip()
    brand = (food.get("brand_name") or food.get("brand_name_ru") or "").strip() or None
    s = _fs_pick_serving((food.get("servings") or {}).get("serving"))
    if not s:
        return None
    kcal_p = _fs_to_float(s.get("calories"))
    p_p    = _fs_to_float(s.get("protein"))
    f_p    = _fs_to_float(s.get("fat"))
    c_p    = _fs_to_float(s.get("carbohydrate"))
    amount = _fs_to_float(s.get("metric_serving_amount")) or _fs_to_float(s.get("serving_amount"))
    unit   = (s.get("metric_serving_unit") or s.get("serving_unit") or "").lower()
    portion_mass = None
    if amount:
        if unit in ("g","ml"):
            portion_mass = amount
        elif unit == "oz":
            portion_mass = amount * 28.3495
        elif unit == "lb":
            portion_mass = amount * 453.592
    kcal100 = p100 = f100 = c100 = None
    if portion_mass and portion_mass > 0:
        k = 100.0 / portion_mass
        kcal100 = kcal_p * k if kcal_p is not None else None
        p100    = p_p   * k if p_p   is not None else None
        f100    = f_p   * k if f_p   is not None else None
        c100    = c_p   * k if c_p   is not None else None
    out = {
        "name": name, "brand": brand, "source": "üß© FatSecret",
        "kcal_100g": kcal100, "protein_100g": p100, "fat_100g": f100, "carbs_100g": c100,
        "kcal_100ml": None, "protein_100ml": None, "fat_100ml": None, "carbs_100ml": None,
        "portion_g": grams, "portion_ml": ml,
        "kcal_portion": None, "protein_portion": None, "fat_portion": None, "carbs_portion": None
    }
    scale = grams if grams is not None else ml
    if scale and kcal100 is not None:
        k = float(scale)/100.0
        if kcal100 is not None: out["kcal_portion"]   = kcal100 * k
        if p100   is not None:  out["protein_portion"]= p100 * k
        if f100   is not None:  out["fat_portion"]    = f100 * k
        if c100   is not None:  out["carbs_portion"]  = c100 * k
    return out

async def _fs_get_food(food_id: str) -> dict | None:
    data = await _fs_request("food.get.v2", {"food_id": food_id})
    return (data or {}).get("food")

async def _fs_search_best(query: str) -> dict | None:
    """Search by name ‚Üí best food with metric serving."""
    data = await _fs_request("foods.search", {"search_expression": query, "max_results": 10})
    foods = ((data or {}).get("foods") or {}).get("food") or []
    if isinstance(foods, dict):
        foods = [foods]
    if not foods:
        return None
    def _score(fd):
        s = ((fd.get("servings") or {}).get("serving")) or []
        if isinstance(s, dict): s = [s]
        metr = 0
        for it in s:
            u = (it.get("metric_serving_unit") or it.get("serving_unit") or "").lower()
            if u in ("g","ml"): metr += 1
        return (2 if fd.get("brand_name") else 0) + metr
    best = max(foods, key=_score)
    return await _fs_get_food(str(best.get("food_id")))

async def _fs_find_by_barcode(barcode: str) -> Optional[str]:
    """Find food ID by barcode (if available in FatSecret plan)"""
    data = await _fs_request("food.find_id_for_barcode", {"barcode": barcode})
    try:
        fid = (data or {}).get("food_id")
        return str(fid) if fid else None
    except Exception:
        return None

def _extract_barcode(text: str) -> Optional[str]:
    """Extract barcode from text"""
    match = re.search(r'\b\d{8,14}\b', text)
    return match.group() if match else None

# --- RU ‚Üí EN –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è USDA ------------------------------------------
_COOK_MAP = [
    (r"\b–Ω–∞\s+–≥—Ä–∏–ª[–µ|—è]\b|\b–≥—Ä–∏–ª–ª?\b|\b–≥—Ä–∏–ª[—å—è]\b|\b–±–∞—Ä–±–µ–∫—é\b", "grilled"),
    (r"\b–∂–∞—Ä–µ–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b|\b–æ–±–∂–∞—Ä–µ–Ω(–∞|–æ|—ã)\b|\b–Ω–∞\s+—Å–∫–æ–≤–æ—Ä–æ–¥[–µ|–∫–µ]\b", "fried"),
    (r"\b–≤–∞—Ä–µ–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b|\b–æ—Ç–≤–∞—Ä–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b", "boiled"),
    (r"\b–∑–∞–ø–µ—á–µ–Ω–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b|\b–≤\s+–¥—É—Ö–æ–≤–∫[–µ|—É]\b|\b–∑–∞–ø–µ–∫–∞–Ω[–∫–∞|–∫—É]\b", "roasted"),
    (r"\b—Ç—É—à–µ–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b", "stewed"),
    (r"\b–∫–æ–ø—á–µ–Ω(–∞—è|—ã–π|–æ–µ|—ã–µ)\b|\b–∫–æ–ø—á[–µ—ë]–Ω–æ—Å—Ç[—å–∏]\b", "smoked"),
]

# –±–∞–∑–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ —Å–∞–º—ã–º —á–∞—Å—Ç—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏)
_BASE_MAP = [
    (r"\b–∫—É—Ä–∏–Ω(–∞—è|—ã–π|–æ–µ)\s+–≥—Ä—É–¥–∫[–∞-—è]*\b|\b–≥—Ä—É–¥–∫–∞\s+–∫—É—Ä[–∏—Ü—ã|–∏–Ω–∞—è]\b|\b—Ñ–∏–ª–µ\s+–∫—É—Ä–∏—Ü[—ã|—ã]\b", "chicken breast"),
    (r"\b–∫—É—Ä–∏—Ü[–∞—ã]\b|\b—Ü—ã–ø–ª[–µ—ë]–Ω–æ–∫\b", "chicken"),
    (r"\b–∏–Ω–¥–µ–π–∫[–∞–µ]\b|\b–∏–Ω–¥—é—à–∫[–∞–µ]\b", "turkey"),
    (r"\b–≥–æ–≤—è–¥–∏–Ω[–∞—ã]\b", "beef"),
    (r"\b—Å–≤–∏–Ω(–∏–Ω[–∞—ã]|–∏–Ω–∞)\b", "pork"),
    (r"\b–ª–æ—Å–æ—Å—å\b|\b—Å–µ–º–≥[–∞—ã]\b", "salmon"),
    (r"\b—Ç—É–Ω–µ—Ü\b", "tuna"),
    (r"\b—è–π—Ü(–æ|–∞)\b", "egg"),
    (r"\b—è–±–ª–æ–∫[–æ–∞]\b|\bapple\b", "apple"),
    (r"\b–∫–∞—Ä—Ç–æ—Ñ[–µ—ë]–ª—å\b|\b–∫–∞—Ä—Ç–æ—à–∫–∞\b", "potato"),
    (r"\b—Ä–∏—Å\b", "rice"),
    (r"\b–≥—Ä–µ—á–∫[–∞—ã]\b", "buckwheat"),
]

def _ru_has_skinless_hint(s: str) -> bool | None:
    s = s.lower()
    if re.search(r"\b–±–µ–∑\s+–∫–æ–∂[–∏—ã]\b|\bskinless\b|\b—Ñ–∏–ª–µ\b", s):  # ¬´—Ñ–∏–ª–µ¬ª –æ–±—ã—á–Ω–æ –±–µ–∑ –∫–æ–∂–∏/–∫–æ—Å—Ç–µ–π
        return True
    if re.search(r"\b—Å\s+–∫–æ–∂[–µ–∏]\b|\bskin\b", s):
        return False
    return None

def ru_to_usda_query(ru_text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É—Å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è USDA —Å —É—á–µ—Ç–æ–º –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    s = ru_text.lower().strip()

    # 1) –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    cooking_method = ""
    for pattern, english in _COOK_MAP:
        if re.search(pattern, s):
            cooking_method = english
            s = re.sub(pattern, "", s)  # —É–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
            break

    # 2) –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç
    base_product = ""
    for pattern, english in _BASE_MAP:
        if re.search(pattern, s):
            base_product = english
            s = re.sub(pattern, "", s)  # —É–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
            break

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º skinless
    skinless_hint = _ru_has_skinless_hint(ru_text)
    skinless_part = ""
    if skinless_hint is True:
        skinless_part = "without skin"
    elif skinless_hint is False:
        skinless_part = "with skin"

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    parts = [p for p in [base_product, skinless_part, cooking_method, "cooked"] if p]
    if not parts:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–∞—Ä—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
        return s.strip()

    return " ".join(parts)

async def ai_translate_to_english(ru_text: str) -> str:
    """–ò–ò-–ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è USDA"""
    if not client:
        return ru_text

    try:
        prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ USDA FDC.
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π –∫—É–ª–∏–Ω–∞—Ä–∏–∏.

–ü—Ä–∏–º–µ—Ä—ã:
- "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –Ω–∞ –≥—Ä–∏–ª–µ" ‚Üí "chicken breast grilled cooked"
- "–∂–∞—Ä–µ–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞" ‚Üí "potato fried"
- "–≤–∞—Ä–µ–Ω–∞—è –≥—Ä–µ—á–∫–∞" ‚Üí "buckwheat cooked"
- "—Ç–≤–æ—Ä–æ–≥ 5%" ‚Üí "cottage cheese"

–ü–µ—Ä–µ–≤–µ–¥–∏: "{ru_text}"

–û—Ç–≤–µ—Ç –¥–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        response = await chat_llm([
            {"role": "system", "content": "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –Ω–∞—É—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö USDA FDC."},
            {"role": "user", "content": prompt}
        ], temperature=0)

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
        translation = response.strip().lower()
        translation = re.sub(r'[^\w\s]', ' ', translation)
        translation = ' '.join(translation.split())

        logger.info(f"AI translation: '{ru_text}' ‚Üí '{translation}'")
        return translation

    except Exception as e:
        logger.warning(f"AI translation failed: {e}")
        return ru_text

_NUT_IDS = {  # FDC nutrient IDs (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    "kcal": 1008, "protein": 1003, "fat": 1004, "carb": 1005
}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ IDs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
_ALT_NUT_IDS = {
    "kcal": [1008, 2047],  # Energy kcal, Energy kJ converted
    "protein": [1003],      # Protein
    "fat": [1004],          # Total lipid (fat)  
    "carb": [1005, 1050]    # Carbohydrate, Total carbohydrate
}

def _pick_nutr(food, nid):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ –∏–∑ USDA FDC food –æ–±—ä–µ–∫—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö ID –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_ids = [nid]
    for nut_type, ids in _ALT_NUT_IDS.items():
        if nid in ids:
            search_ids.extend(ids)
    
    # foods/search -> each food has foodNutrients list
    for n in food.get("foodNutrients", []):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        nutrient_id = n.get("nutrientId") or n.get("nutrientNumber")
        if nutrient_id in search_ids or str(nutrient_id) in [str(x) for x in search_ids]:
            value = n.get("value") or n.get("amount")
            if value is not None and value != "":
                try:
                    result = float(value)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º kJ –≤ kcal –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if nutrient_id == 2047 and nid == 1008:  # kJ -> kcal
                        result = result / 4.184
                    return result
                except (ValueError, TypeError):
                    continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç nutrient
        nutrient = n.get("nutrient", {})
        if nutrient:
            nutrient_id = nutrient.get("id") or nutrient.get("number")
            if nutrient_id in search_ids or str(nutrient_id) in [str(x) for x in search_ids]:
                value = n.get("value") or n.get("amount")
                if value is not None and value != "":
                    try:
                        result = float(value)
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º kJ –≤ kcal –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if nutrient_id == 2047 and nid == 1008:  # kJ -> kcal
                            result = result / 4.184
                        return result
                    except (ValueError, TypeError):
                        continue
    
    # branded sometimes in labelNutrients
    ln = food.get("labelNutrients") or {}
    m = {"kcal":"calories","protein":"protein","fat":"fat","carb":"carbohydrates"}
    for k,v in m.items():
        if nid == _NUT_IDS[k] and v in ln and "value" in ln[v]:
            try:
                return float(ln[v]["value"])
            except (ValueError, TypeError):
                continue
    
    return None

def _desc_ok_for_base(desc: str, base_en: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"""
    if not base_en or not desc:
        return True
    dl = desc.lower()
    return all(tok in dl for tok in base_en.lower().split())

async def search_usda_fdc_product(query: str, base_en: str = None) -> Optional[Dict[str, Any]]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ USDA FDC API —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"""
    if not USDA_FDC_API_KEY:
        logger.warning("USDA FDC API key not configured")
        return None

    try:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ–ª—å–∫–æ —Å –º–µ—Ç–æ–¥–æ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        if query.strip().lower() in {"cooked","boiled","fried","grilled","roasted","stewed"}:
            logger.info(f"Skipping method-only query: '{query}'")
            return None

        logger.info(f"Searching USDA FDC for: '{query}'" + (f" (base: {base_en})" if base_en else ""))

        url = "https://api.nal.usda.gov/fdc/v1/foods/search"
        params = {
            'api_key': USDA_FDC_API_KEY,
            'query': query,
            'dataType': ['Foundation', 'SR Legacy', 'FNDDS'],
            'pageSize': 25
        }

        def _make_request():
            response = requests.get(url, params=params, timeout=20)
            return response.json() if response.status_code == 200 else None

        data = await asyncio.to_thread(_make_request)

        if not data or not data.get('foods'):
            return None

        foods = data['foods']

        # –§–∏–ª—å—Ç—Ä –ø–æ base_en (—á—Ç–æ–±—ã bulgur != asparagus)
        if base_en:
            filtered_foods = [f for f in foods if _desc_ok_for_base(f.get("description",""), base_en)]
            if filtered_foods:
                foods = filtered_foods

        def score_food(f):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
            protein_val = _pick_nutr(f, _NUT_IDS["protein"])
            fat_val = _pick_nutr(f, _NUT_IDS["fat"])
            carb_val = _pick_nutr(f, _NUT_IDS["carb"])
            kcal_val = _pick_nutr(f, _NUT_IDS["kcal"])

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
            has_macros = sum(x is not None and x > 0 for x in [protein_val, fat_val, carb_val])
            has_kcal = 1 if (kcal_val is not None and kcal_val > 0) else 0

            name = (f.get("description") or "").lower()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"Scoring food: {name[:50]}, kcal: {kcal_val}, protein: {protein_val}, fat: {fat_val}, carbs: {carb_val}")

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if not has_kcal or has_macros == 0:
                return 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
            base_match_bonus = 0
            if base_en:
                base_words = base_en.lower().split()
                for base_word in base_words:
                    if base_word in name:
                        base_match_bonus += 20

            # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            cooking_bonus = 0
            query_words = query.lower().split()
            for word in query_words:
                if word in ["cooked", "grilled", "fried", "roasted", "boiled", "stewed"] and word in name:
                    cooking_bonus += 15

            # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            word_bonus = 0
            for word in query_words:
                if len(word) >= 3 and word in name:
                    word_bonus += 3

            # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            penalty = 0
            bad_words = ["salami", "sausage", "ham", "bacon", "jerky", "dried"]
            for bad_word in bad_words:
                if bad_word in name and base_en and bad_word not in base_en:
                    penalty += 50

            # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            length_penalty = max(0, len(name) - 100) // 20

            score = has_kcal * 100 + has_macros * 10 + base_match_bonus + cooking_bonus + word_bonus - penalty - length_penalty
            logger.debug(f"Final score for {name[:30]}: {score}")
            
            return score

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        foods.sort(key=score_food, reverse=True)

        if foods:
            food = foods[0]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
            kcal = _pick_nutr(food, _NUT_IDS["kcal"])
            protein = _pick_nutr(food, _NUT_IDS["protein"])
            fat = _pick_nutr(food, _NUT_IDS["fat"])
            carbs = _pick_nutr(food, _NUT_IDS["carb"])
            
            logger.info(f"USDA extraction results: kcal={kcal}, protein={protein}, fat={fat}, carbs={carbs}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if kcal and kcal > 0 and (protein or fat or carbs):
                result = {
                    'name': food.get('description', query),
                    'brand': food.get('brandOwner', ''),
                    'kcal_100g': int(kcal) if kcal else 0,
                    'protein_100g': float(protein) if protein else 0,
                    'fat_100g': float(fat) if fat else 0,
                    'carbs_100g': float(carbs) if carbs else 0,
                    'url': f"https://fdc.nal.usda.gov/fdc-app.html#/food-details/{food.get('fdcId', '')}/nutrients",
                    'source': 'usda'
                }

                logger.info(f"Found USDA result: {food.get('description', 'Unknown')} with score {score_food(food)}")
                return result
            else:
                logger.warning(f"USDA result has insufficient nutrition data: {food.get('description', 'Unknown')}")
                # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ–ø–æ–ª–Ω—ã–π
                for alt_food in foods[1:3]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    alt_kcal = _pick_nutr(alt_food, _NUT_IDS["kcal"])
                    alt_protein = _pick_nutr(alt_food, _NUT_IDS["protein"])
                    alt_fat = _pick_nutr(alt_food, _NUT_IDS["fat"])
                    alt_carbs = _pick_nutr(alt_food, _NUT_IDS["carb"])
                    
                    if alt_kcal and alt_kcal > 0 and (alt_protein or alt_fat or alt_carbs):
                        result = {
                            'name': alt_food.get('description', query),
                            'brand': alt_food.get('brandOwner', ''),
                            'kcal_100g': int(alt_kcal) if alt_kcal else 0,
                            'protein_100g': float(alt_protein) if alt_protein else 0,
                            'fat_100g': float(alt_fat) if alt_fat else 0,
                            'carbs_100g': float(alt_carbs) if alt_carbs else 0,
                            'url': f"https://fdc.nal.usda.gov/fdc-app.html#/food-details/{alt_food.get('fdcId', '')}/nutrients",
                            'source': 'usda'
                        }
                        logger.info(f"Found alternative USDA result: {alt_food.get('description', 'Unknown')}")
                        return result

    except Exception as e:
        logger.error(f"USDA FDC API error: {e}")

    return None

def calculate_nutrition_from_usda_fdc(product_data: Dict[str, Any], grams: int) -> Dict[str, Any]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤"""
    factor = grams / 100.0

    return {
        'kcal': int(product_data['kcal_100g'] * factor),
        'protein_g': int(product_data['protein_100g'] * factor),
        'fat_g': int(product_data['fat_100g'] * factor),
        'carbs_g': int(product_data['carbs_100g'] * factor),
        'notes': f"USDA FDC: {product_data['name']}" + (f" ({product_data['brand']})" if product_data['brand'] else "") + f" | –°—Å—ã–ª–∫–∞: {product_data['url']}"
    }

# ========= OPEN FOOD FACTS API =========
async def search_openfoodfacts_product(query: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ Open Food Facts API"""
    try:
        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        original_query = query.strip()

        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞
        clean_query = re.sub(r'\d+\s*(?:–≥|–≥—Ä|–≥—Ä\.|g|gr|gram|grams|–≥—Ä–∞–º–º|–≥—Ä–∞–º–º–æ–≤)', '', original_query, flags=re.IGNORECASE)
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
        clean_query = re.sub(r'[^\w\s\-–∞-—è—ë]', ' ', clean_query, flags=re.UNICODE)
        clean_query = ' '.join(clean_query.split())

        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        search_queries = []
        if len(clean_query.strip()) >= 3:
            search_queries.append(clean_query.strip())
        if original_query != clean_query and len(original_query.strip()) >= 3:
            search_queries.append(original_query.strip())

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        if any(ord(c) >= 1040 for c in original_query):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            translations = {
                '–º–æ–ª–æ–∫–æ': 'milk', '—Ö–ª–µ–±': 'bread', '–º—è—Å–æ': 'meat', '–∫—É—Ä–∏—Ü–∞': 'chicken',
                '—Ä—ã–±–∞': 'fish', '—è–±–ª–æ–∫–æ': 'apple', '–±–∞–Ω–∞–Ω': 'banana', '—Ä–∏—Å': 'rice',
                '–≥—Ä–µ—á–∫–∞': 'buckwheat', '–æ–≤—Å—è–Ω–∫–∞': 'oats', '—Ç–≤–æ—Ä–æ–≥': 'cottage cheese',
                '—Å—ã—Ä': 'cheese', '—è–π—Ü–æ': 'egg', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': 'potato', '–º–æ—Ä–∫–æ–≤—å': 'carrot',
                '–∫–∞–ø—É—Å—Ç–∞': 'cabbage', '–ª—É–∫': 'onion', '–ø–æ–º–∏–¥–æ—Ä': 'tomato', '–æ–≥—É—Ä–µ—Ü': 'cucumber'
            }
            for rus_word, eng_word in translations.items():
                if rus_word in clean_query.lower():
                    eng_query = clean_query.lower().replace(rus_word, eng_word)
                    search_queries.append(eng_query)

        if not search_queries:
            return None

        headers = {
            'User-Agent': 'Healco-Bot/1.0 (https://replit.com)',
            'Accept': 'application/json'
        }

        best_result = None
        best_overall_score = 0

        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞
        for search_query in search_queries[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            url = "https://world.openfoodfacts.org/api/v2/search"
            params = {
                'q': search_query,
                'page_size': 20,
                'fields': 'product_name,brands,code,nutriments,categories',
                'sort_by': 'unique_scans_n'
            }

            def _make_request():
                import time
                time.sleep(0.3)
                response = requests.get(url, params=params, headers=headers, timeout=20)
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.warning(f"Open Food Facts API returned status {response.status_code}")
                    return None

            data = await asyncio.to_thread(_make_request)

            if not data or not data.get('products'):
                continue

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            query_words = [word.lower() for word in search_query.split() if len(word) >= 2]

            for product in data['products'][:12]:
                nutriments = product.get('nutriments', {})
                product_name = (product.get('product_name') or '').lower()
                brand = (product.get('brands') or '').lower()
                categories = (product.get('categories') or '').lower()

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                if not product_name or len(product_name) < 3:
                    continue

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                def safe_float(value, default=0):
                    if value is None:
                        return default
                    try:
                        return float(value)
                    except (ValueError, TypeError):
                        return default

                # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                energy = safe_float(nutriments.get('energy-kcal_100g'))
                proteins = safe_float(nutriments.get('proteins_100g'))
                fat = safe_float(nutriments.get('fat_100g'))
                carbs = safe_float(nutriments.get('carbohydrates_100g'))

                # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if energy <= 0 and proteins <= 0 and fat <= 0 and carbs <= 0:
                    continue

                # –°—Ç—Ä–æ–≥–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                score = 0

                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                has_direct_match = False
                exact_matches = 0

                for word in query_words:
                    # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ)
                    product_words = product_name.split()
                    for product_word in product_words:
                        if word == product_word:  # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                            exact_matches += 1
                            has_direct_match = True
                            score += 20
                            break
                        elif len(word) >= 4 and len(product_word) >= 4:
                            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤
                            if word.startswith(product_word[:4]) or product_word.startswith(word[:4]):
                                score += 8
                                has_direct_match = True

                    # –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±—Ä–µ–Ω–¥–µ (—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ)
                    if brand and word in brand.split():
                        score += 12
                        has_direct_match = True

                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
                if not has_direct_match:
                    continue

                # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                if energy > 0:
                    score += 8
                if proteins > 0:
                    score += 4
                if fat >= 0:
                    score += 2
                if carbs >= 0:
                    score += 2

                # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 50% —Å–ª–æ–≤)
                if exact_matches >= max(1, len(query_words) // 2):
                    score += 20

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ–≤—ã—à–µ–Ω –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                min_threshold = 15

                logger.debug(f"Query '{search_query}': {product_name[:50]}..., Score: {score}, Energy: {energy}, Direct match: {has_direct_match}")

                if score > best_overall_score and score >= min_threshold:
                    best_overall_score = score
                    best_result = {
                        'name': product.get('product_name', original_query) or original_query,
                        'brand': product.get('brands', '') or '',
                        'kcal_100g': int(energy) if energy > 0 else 0,
                        'protein_100g': proteins,
                        'fat_100g': fat,
                        'carbs_100g': carbs,
                        'url': f"https://world.openfoodfacts.org/product/{product.get('code', '')}"
                    }

        if best_result:
            logger.info(f"Found product: {best_result['name']} with {best_result['kcal_100g']} kcal (score: {best_overall_score})")
            return best_result

        logger.info(f"No suitable product found for any query variant")

    except Exception as e:
        logger.error(f"Open Food Facts API error: {e}")

    return None

def calculate_nutrition_from_openfoodfacts(product_data: Dict[str, Any], grams: int) -> Dict[str, Any]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤"""
    factor = grams / 100.0

    return {
        'kcal': int(product_data['kcal_100g'] * factor),
        'protein_g': int(product_data['protein_100g'] * factor),
        'fat_g': int(product_data['fat_100g'] * factor),
        'carbs_g': int(product_data['carbs_100g'] * factor),
        'notes': f"Open Food Facts: {product_data['name']}" + (f" ({product_data['brand']})" if product_data['brand'] else "") + f" | –°—Å—ã–ª–∫–∞: {product_data['url']}"
    }

# ========= –ü–ü‚Äë–ú–ï–ù–Æ 60 –î–ù–ï–ô =========
def load_pp_menu_60() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞ 60 –¥–Ω–µ–π –∏–∑ pp_menu_60.json"""
    try:
        with open(MENU_60_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Could not load pp_menu_60.json: {e}")
        return []

def get_menu_for_day(day: int, variant: str = "a") -> Optional[Dict[str, str]]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è (1-60) –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (a/b)"""
    menu_data = load_pp_menu_60()
    if not menu_data:
        return None

    # –ù–∞–π—Ç–∏ –¥–µ–Ω—å –≤ –¥–∞–Ω–Ω—ã—Ö
    day_data = next((d for d in menu_data if d.get("day") == day), None)
    if not day_data:
        return None

    variant_key = f"variant_{variant}"
    return {
        "breakfast": day_data.get("breakfast", {}).get(variant_key, ""),
        "snack_1": day_data.get("snack_1", {}).get(variant_key, ""),
        "lunch": day_data.get("lunch", {}).get(variant_key, ""),
        "snack_2": day_data.get("snack_2", {}).get(variant_key, ""),
        "dinner": day_data.get("dinner", {}).get(variant_key, "")
    }

def get_current_menu_day(st: Dict[str, Any]) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–∏–∫–ª–∏—á–Ω–æ 1-60)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω—é –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –¥–Ω—è
    menu_count = st["tmp"].get("menu_day_counter", 0)
    return (menu_count % 60) + 1

def increment_menu_day(st: Dict[str, Any]):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è –º–µ–Ω—é"""
    st["tmp"]["menu_day_counter"] = st["tmp"].get("menu_day_counter", 0) + 1

async def generate_menu_with_nutrition(profile: Dict[str, Any], menu_items: Dict[str, str], target_kcal: int, changes: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–æ–º –≥—Ä–∞–º–º–æ–≤–∫–æ–π –∏ –ö–ë–ñ–£"""
    allergies = profile.get("allergies", "–Ω–µ—Ç")
    conditions = profile.get("conditions", "–Ω–µ—Ç")
    goal = profile.get("goal", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")

    sys = (
        "–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫—É, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ö–ë–ñ–£ –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ–Ω—é. "
        "–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã # (—Ä–µ—à–µ—Ç–∫–∏) –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏. "
        "–ü—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –±–∞–∑—ã –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –±–ª—é–¥–∞. "
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ö–ë–ñ–£. "
        "–§—Ä—É–∫—Ç—ã –∏ –æ—Ä–µ—Ö–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ —à—Ç—É–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ 150–≥ (1 —à—Ç), –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ 30–≥ (6 —à—Ç)). "
        "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –æ–±—â–∏–π –∏—Ç–æ–≥: '–ò—Ç–æ–≥–æ: ~X –∫–∫–∞–ª, –ë: Y –≥, –ñ: Z –≥, –£: W –≥'"
        f"\n–ü—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª={profile.get('gender')}, –≤–æ–∑—Ä–∞—Å—Ç={profile.get('age')}, "
        f"—Ä–æ—Å—Ç={profile.get('height_cm')} —Å–º, –≤–µ—Å={profile.get('weight_kg')} –∫–≥, "
        f"—Ü–µ–ª—å={goal}, –∞–ª–ª–µ—Ä–≥–∏–∏={allergies}, –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è={conditions}."
    )

    user_prompt = (
        f"–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –∏ –ö–ë–ñ–£ –¥–ª—è –º–µ–Ω—é –Ω–∞ {target_kcal} –∫–∫–∞–ª:\n\n"
        f"–ó–ê–í–¢–†–ê–ö: {menu_items['breakfast']}\n"
        f"–ü–ï–†–ï–ö–£–° 1: {menu_items['snack_1']}\n"
        f"–û–ë–ï–î: {menu_items['lunch']}\n"
        f"–ü–ï–†–ï–ö–£–° 2: {menu_items['snack_2']}\n"
        f"–£–ñ–ò–ù: {menu_items['dinner']}\n\n"
        f"–£—á–µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è: {changes or '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏'}\n\n"
        f"–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã # (—Ä–µ—à–µ—Ç–∫–∏). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.\n"
        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º: '–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: ~X –∫–∫–∞–ª, –ë: Y –≥, –ñ: Z –≥, –£: W –≥'"
    )

    result = await chat_llm([{"role": "system", "content": sys}, {"role": "user", "content": user_prompt}])

    # –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    result = result.replace("###", "").replace("##", "").replace("#", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–π –∏—Ç–æ–≥ —Å –ë–ñ–£, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
    if not re.search(r"–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:.*?–ë:.*?–ñ:.*?–£:", result):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ë–ñ–£
        protein_g = int(target_kcal * 0.25 / 4)  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –±–µ–ª–∫–∏
        fat_g = int(target_kcal * 0.25 / 9)      # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –∂–∏—Ä—ã
        carbs_g = int(target_kcal * 0.50 / 4)    # 50% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —É–≥–ª–µ–≤–æ–¥—ã

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏—Ç–æ–≥
        if "–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:" in result:
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π –∏—Ç–æ–≥ –Ω–∞ –ø–æ–ª–Ω—ã–π
            result = re.sub(r"–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:.*?–∫–∫–∞–ª.*?(?=\n|$)",
                          f"–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: ~{target_kcal} –∫–∫–∞–ª, –ë: {protein_g} –≥, –ñ: {fat_g} –≥, –£: {carbs_g} –≥",
                          result)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∏—Ç–æ–≥
            result += f"\n\n–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: ~{target_kcal} –∫–∫–∞–ª, –ë: {protein_g} –≥, –ñ: {fat_g} –≥, –£: {carbs_g} –≥"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    if not result.endswith((" üçΩÔ∏èü•óüçé", " üçΩÔ∏è", " ü•ó", " üçé")):
        result += " üçΩÔ∏èü•óüçé"

    return sanitize_ai(result)

# ========= –ü–ü‚Äë–†–ï–¶–ï–ü–¢–´ =========
RECIPES_PATH = os.getenv("RECIPES_PATH", str(Path(__file__).with_name("recipes.json")))
MENU_60_PATH = os.getenv("MENU_60_PATH", str(Path(__file__).with_name("pp_menu_60.json")))

@dataclass
class Recipe:
    id: str
    title: str
    category: str
    kcal: int
    protein_g: int
    fat_g: int
    carbs_g: int
    steps: List[str]
    photo: Optional[str] = None
    brand: Optional[Dict[str, str]] = None
    ingredients: Optional[List[str]] = None

def _default_recipes() -> List[Dict[str, Any]]:
    try:
        with open(RECIPES_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        logger.error(f"Could not load recipes.json: {e}")
        data = {}
    out: List[Dict[str, Any]] = []

    def _norm_cat(s: str) -> str:
        s = (s or "").strip().lower()
        mapping = {"–∑–∞–≤—Ç—Ä–∞–∫–∏": "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥—ã": "–æ–±–µ–¥", "—É–∂–∏–Ω—ã": "—É–∂–∏–Ω", "–ø–µ—Ä–µ–∫—É—Å—ã": "–ø–µ—Ä–µ–∫—É—Å", "–¥–µ—Å–µ—Ä—Ç—ã": "–¥–µ—Å–µ—Ä—Ç"}
        return mapping.get(s, s or "—Ä–∞–∑–Ω–æ–µ")

    if isinstance(data, dict) and "sections" in data:
        for sec in (data.get("sections") or []):
            cat = _norm_cat(sec.get("section") or "—Ä–∞–∑–Ω–æ–µ")
            for r in (sec.get("recipes") or []):
                nutr = r.get("nutrition") or {}
                ingr_list = []
                for it in (r.get("ingredients") or []):
                    if isinstance(it, dict):
                        prod, amt = str(it.get("product", "")).strip(), str(it.get("amount", "")).strip()
                        ingr_list.append(f"{prod} ‚Äî {amt}" if prod and amt else prod)
                    elif isinstance(it, str):
                        ingr_list.append(it.strip())
                out.append(
                    {
                        "id": r.get("id") or f"rec_{len(out)+1}",
                        "title": r.get("name") or "–†–µ—Ü–µ–ø—Ç",
                        "category": cat,
                        "kcal": int(nutr.get("calories", 0)),
                        "protein_g": int(float(nutr.get("protein", 0))),
                        "fat_g": int(float(nutr.get("fat", 0))),
                        "carbs_g": int(float(nutr.get("carbs", 0))),
                        "steps": list(r.get("steps", [])),
                        "photo": r.get("photo"),
                        "brand": r.get("brand"),
                        "ingredients": ingr_list or None,
                    }
                )
    elif isinstance(data, list):
        for r in data:
            out.append(
                {
                    "id": r.get("id") or f"rec_{len(out)+1}",
                    "title": r.get("title", "–†–µ—Ü–µ–ø—Ç"),
                    "category": _norm_cat(r.get("category", "—Ä–∞–∑–Ω–æ–µ")),
                    "kcal": int(r.get("kcal", 0)),
                    "protein_g": int(r.get("protein_g", 0)),
                    "fat_g": int(r.get("fat_g", 0)),
                    "carbs_g": int(r.get("carbs_g", 0)),
                    "steps": list(r.get("steps", [])),
                    "photo": r.get("photo"),
                    "brand": r.get("brand"),
                    "ingredients": r.get("ingredients"),
                }
            )
    if not out:
        out = [
            {
                "id": "demo_oat",
                "title": "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏",
                "category": "–∑–∞–≤—Ç—Ä–∞–∫",
                "kcal": 350,
                "protein_g": 20,
                "fat_g": 9,
                "carbs_g": 50,
                "steps": ["–°–º–µ—à–∞–π —Ö–ª–æ–ø—å—è —Å –º–æ–ª–æ–∫–æ–º", "–í–∞—Ä–∏ 5‚Äì7 –º–∏–Ω", "–î–æ–±–∞–≤—å —è–≥–æ–¥—ã –∏ –º—ë–¥"],
                "ingredients": ["–û–≤—Å—è–Ω–∫–∞ ‚Äî 50 –≥", "–ú–æ–ª–æ–∫–æ ‚Äî 200 –º–ª", "–Ø–≥–æ–¥—ã ‚Äî 50 –≥"],
            }
        ]
    return out

def load_recipes() -> List[Recipe]:
    return [
        Recipe(
            id=r["id"],
            title=r["title"],
            category=r["category"],
            kcal=int(r["kcal"]),
            protein_g=int(r["protein_g"]),
            fat_g=int(r["fat_g"]),
            carbs_g=int(r["carbs_g"]),
            steps=list(r.get("steps", [])),
            photo=r.get("photo"),
            brand=r.get("brand"),
            ingredients=r.get("ingredients"),
        )
        for r in _default_recipes()
    ]

def recipe_categories(recs: List[Recipe]) -> List[str]:
    cats = sorted({r.category for r in recs})
    order = ["–∑–∞–≤—Ç—Ä–∞–∫", "–ø–µ—Ä–µ–∫—É—Å", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–¥–µ—Å–µ—Ä—Ç"]
    return sorted(cats, key=lambda x: (order.index(x) if x in order else 999, x))

def kb_recipe_cats(cats: List[str]):
    rows, row = [], []
    for i, c in enumerate(cats, 1):
        row.append(InlineKeyboardButton(c.capitalize(), callback_data=f"rcat:{c}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton("‚ú® 1 —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", callback_data="rshow:random")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rcat:back")])
    return InlineKeyboardMarkup(rows)

def kb_recipe_root(cats: List[str], has_access: bool = True):
    if has_access:
        return kb_recipe_cats(cats)
    else:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® 1 —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", callback_data="rshow:random")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rroot")]
        ])

def meal_from_hour(hour: int) -> str:
    if 6 <= hour < 11:
        return "–∑–∞–≤—Ç—Ä–∞–∫"
    elif 11 <= hour < 16:
        return "–æ–±–µ–¥"
    elif 16 <= hour < 20:
        return "—É–∂–∏–Ω"
    else:
        return "–ø–µ—Ä–µ–∫—É—Å"

def filter_recipes_by_meal(meal: str, recipes: List[Recipe]) -> List[Recipe]:
    return [r for r in recipes if r.category == meal]

def kb_recipe_list_meal(meal: str, recs: List[Recipe], page: int = 0, per: int = 6) -> InlineKeyboardMarkup:
    items = filter_recipes_by_meal(meal, recs)
    start = page * per
    chunk = items[start: start + per]
    rows = [[InlineKeyboardButton(r.title, callback_data=f"rshow:{r.id}")] for r in chunk]
    nav = []
    if start > 0:
        nav.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"rpage_meal:{meal}:{page-1}"))
    if start + per < len(items):
        nav.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"rpage_meal:{meal}:{page+1}"))
    if nav:
        rows.append(nav)
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rroot")])
    return InlineKeyboardMarkup(rows)

def kb_recipe_list(cat: str, recs: List[Recipe], page: int = 0, per: int = 6):
    items = [r for r in recs if r.category == cat]
    start = page * per
    chunk = items[start : start + per]
    rows = [[InlineKeyboardButton(r.title, callback_data=f"rshow:{r.id}")] for r in chunk]
    nav = []
    if start > 0:
        nav.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"rpage:{cat}:{page-1}"))
    if start + per < len(items):
        nav.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"rpage:{cat}:{page+1}"))
    if nav:
        rows.append(nav)
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="rroot")])
    return InlineKeyboardMarkup(rows)

def kb_recipe_actions(rid: str):
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data=f"radd:{rid}")],
         [InlineKeyboardButton("‚¨ÖÔ∏è –°–ø–∏—Å–æ–∫", callback_data="rback")]]
    )

def format_recipe_card(r: Recipe) -> str:
    lines = [
        f"{r.title} üçΩÔ∏è",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {r.category.capitalize()}",
        f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ~{r.kcal} –∫–∫–∞–ª; –ë{r.protein_g}/–ñ{r.fat_g}/–£{r.carbs_g}",
    ]
    if r.steps:
        lines.append("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å:")
        lines.extend(f"{i}) {step}" for i, step in enumerate(r.steps, 1))
    elif r.ingredients:
        lines.append("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:")
        lines.extend(f"‚Äî {ing}" for ing in r.ingredients)
    if r.brand:
        lines.append(f"\n–°–æ–≤–µ—Ç: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {r.brand.get('name')} ‚Äî {r.brand.get('note') or ''}")
    return "\n".join(lines)

async def recipes_root(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]):
    recs = load_recipes()
    cats = recipe_categories(recs)
    txt = "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ü–ü‚Äë—Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–π. –Ø —É–∫–∞–∂—É –ö–ë–ñ–£ –∏ —Å–º–æ–≥—É —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫."
    has_access = check_feature_access(st, u.id, "recipes")
    markup = kb_recipe_root(cats, has_access)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(txt, reply_markup=markup)
    else:
        await update.message.reply_text(txt, reply_markup=markup)

async def show_recipe_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, st: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    recs = load_recipes()
    category_recipes = [r for r in recs if r.category == category]

    if not category_recipes:
        await update.message.reply_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.capitalize()}' –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏"), KeyboardButton("üçΩÔ∏è –û–±–µ–¥—ã")],
                [KeyboardButton("üåô –£–∂–∏–Ω—ã"), KeyboardButton("‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
        )
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
    lines = [f"üìã {category.capitalize()}:"]
    for i, recipe in enumerate(category_recipes[:5], 1):
        lines.append(f"{i}. {recipe.title} (~{recipe.kcal} –∫–∫–∞–ª)")

    if len(category_recipes) > 5:
        lines.append(f"...–∏ –µ—â—ë {len(category_recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤")

    lines.append("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ (1-5) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

    st["tmp"]["current_category"] = category
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Recipe –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    st["tmp"]["category_recipes"] = [
        {
            "id": r.id,
            "title": r.title,
            "category": r.category,
            "kcal": r.kcal,
            "protein_g": r.protein_g,
            "fat_g": r.fat_g,
            "carbs_g": r.carbs_g,
            "steps": r.steps,
            "ingredients": r.ingredients
        } for r in category_recipes
    ]
    st["awaiting"] = "recipe_number"

    await update.message.reply_text(
        "\n".join(lines),
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏"), KeyboardButton("üçΩÔ∏è –û–±–µ–¥—ã")],
            [KeyboardButton("üåô –£–∂–∏–Ω—ã"), KeyboardButton("‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)
    )

async def show_random_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    recs = load_recipes()
    if not recs:
        await update.message.reply_text("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    import random as _r
    recipe = _r.choice(recs)
    await show_recipe_detail(update, context, recipe, st)

async def show_recipe_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, recipe: Recipe, st: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ"""
    lines = [
        f"üçΩÔ∏è {recipe.title}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {recipe.category.capitalize()}",
        f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ~{recipe.kcal} –∫–∫–∞–ª; –ë{recipe.protein_g}/–ñ{recipe.fat_g}/–£{recipe.carbs_g}",
    ]

    if recipe.ingredients:
        lines.append("\nüìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:")
        for ingredient in recipe.ingredients:
            lines.append(f"‚Ä¢ {ingredient}")

    if recipe.steps:
        lines.append("\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:")
        for i, step in enumerate(recipe.steps, 1):
            lines.append(f"{i}. {step}")

    lines.append("\n–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫? (–¥–∞/–Ω–µ—Ç)")

    st["tmp"]["current_recipe"] = {
        "title": recipe.title,
        "kcal": recipe.kcal,
        "protein_g": recipe.protein_g,
        "fat_g": recipe.fat_g,
        "carbs_g": recipe.carbs_g
    }
    st["awaiting"] = "add_recipe_to_diary"

    await update.message.reply_text(
        "\n".join(lines),
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)
    )

async def recipes_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query, u = update.callback_query, update.effective_user
    data = query.data or ""
    st = load_state(u.id)
    try:
        await query.answer()
        if data in ("rroot", "rback", "rcat:back"):
            await recipes_root(update, context, st)
            return

        if data.startswith("rcat:"):
            _, cat = data.split(":", 1)
            if not check_feature_access(st, u.id, "recipes"):
                await query.edit_message_text(
                    "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ –ü—Ä–µ–º–∏—É–º –∏ –≤—ã—à–µ. ‚≠ê",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [InlineKeyboardButton("–í –º–∞–≥–∞–∑–∏–Ω", callback_data="shop_open")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rroot")],
                        ]
                    ),
                )
                return
            await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat.capitalize()}", reply_markup=kb_recipe_list(cat, recs, page=0))
            return

        if data.startswith("rshow:"):
            _, rid = data.split(":", 1)
            import datetime
            rlist = recs
            if rid == "random":
                if get_user_access(st, u.id) == "free":
                    meal = meal_from_hour(datetime.datetime.now().hour)
                    rlist = filter_recipes_by_meal(meal, recs)
                import random as _r
                r = _r.choice(rlist) if rlist else None
            else:
                r = next((x for x in recs if x.id == rid), None)
            if not r:
                await query.edit_message_text("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if rid != "random" and not check_feature_access(st, u.id, "recipes"):
                await query.edit_message_text(
                    "–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö –ü—Ä–µ–º–∏—É–º –∏ –≤—ã—à–µ. ‚≠ê",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [InlineKeyboardButton("–í –º–∞–≥–∞–∑–∏–Ω", callback_data="shop_open")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rback")],
                        ]
                    ),
                )
                return

            if rid == "random" and get_user_access(st, u.id) == "free":
                st["tmp"]["used_random_recipe"] = True
                save_state(u.id, st)

            await query.edit_message_text(format_recipe_card(r), reply_markup=kb_recipe_actions(r.id))
            return

        if data.startswith("radd:"):
            _, rid = data.split(":", 1)
            r = next((x for x in recs if x.id == rid), None)
            if not r:
                await query.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            st["diaries"]["food"].append(
                {"ts": now_ts(), "text": f"–†–µ—Ü–µ–ø—Ç: {r.title}", "kcal": r.kcal, "p": r.protein_g, "f": r.fat_g, "c": r.carbs_g}
            )
            add_kcal_in(st, r.kcal)
            add_points(st, 2)
            save_state(u.id, st)
            await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ ‚úÖ")
            await query.edit_message_reply_markup(kb_recipe_actions(r.id))
            return

        if data == "shop_open":
            await query.edit_message_reply_markup(None)
            await shop_command(update, context)

    except Exception as e:
        logger.error(f"recipes_callbacks error: {e}")
        await query.answer("–û—à–∏–±–∫–∞")

# ========= –õ–ò–î–ï–†–ë–û–†–î =========
def leaderboard_all() -> List[Dict[str, Any]]:
    arr = []
    for k in db_keys_prefix("user:"):
        st = db_get(k, {})
        if isinstance(st, dict):
            pts = int(st.get("points", 0))
            arr.append({"user_id": k.split(":", 1)[-1], "points": pts})
    arr.sort(key=lambda x: x["points"], reverse=True)
    return arr

# ========= –ö–û–ú–ê–ù–î–´ =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    st = load_state(u.id)
    if not profile_complete(st["profile"]):
        st["awaiting"] = "onb_gender"
        save_state(u.id, st)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {u.first_name or '–¥—Ä—É–≥'}! –Ø {PROJECT_NAME} ‚Äî –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. üöÄ\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É ‚Äî –∏ —è –Ω–∞—Å—Ç—Ä–æ—é –º–µ–Ω—é –∏ –ø–ª–∞–Ω—ã –ø–æ–¥ —Ç–≤–æ—é —Ü–µ–ª—å. ",
            reply_markup=ReplyKeyboardMarkup(GENDER_KB, resize_keyboard=True),
        )
        await update.message.reply_text("–ü–æ–ª: –≤—ã–±–µ—Ä–∏ ¬´–ñ–µ–Ω—Å–∫–∏–π¬ª –∏–ª–∏ ¬´–ú—É–∂—Å–∫–æ–π¬ª. üôÇ")
        return
    st["awaiting"] = None
    st["current_role"] = None
    save_state(u.id, st)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ —É–º–µ—é:\n"
        "‚Ä¢ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ ‚Äî –º–µ–Ω—é (–±–∞–∑–æ–≤–æ–µ) –ø–æ–¥ —Ü–µ–ª—å, –ö–ë–ñ–£, –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –¢—Ä–µ–Ω–µ—Ä ‚Äî –ø–ª–∞–Ω—ã —Å –ß–°–°, –¥–Ω–µ–≤–Ω–∏–∫ –∏ –ø–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ/–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ç—Ä–∞–≤–º\n"
        "‚Ä¢ –°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å: —Å—ä–µ–¥–µ–Ω–æ/—Å–æ–∂–∂–µ–Ω–æ/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\n\n–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª üëá",
        reply_markup=role_keyboard(None),
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    st = load_state(u.id)
    help_text = (
        "/start ‚Äî –º–µ–Ω—é\n/help ‚Äî –ø–æ–º–æ—â—å\n/whoami ‚Äî –≤–∞—à ID\n/health ‚Äî 200 OK\n/version ‚Äî —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è\n/shop ‚Äî –º–∞–≥–∞–∑–∏–Ω\n\n"
        "–õ—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ ‚Äî –≤–æ–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. üí¨"
    )

    if is_developer(u.id):
        help_text += (
            "\n\nüëë –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
            "/add_admin <user_id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/remove_admin <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/list_admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        )

    await update.message.reply_text(help_text, reply_markup=role_keyboard(st.get("current_role")))

async def version_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(VERSION)

async def health_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("200 OK")

async def whoami_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    is_dev = "‚úÖ (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)" if is_developer(user.id) else "‚ùå"
    is_admin = "‚úÖ (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)" if is_admin_user(user.id) else "‚ùå"
    lines = [f"üë§ –¢–≤–æ–π ID: {user.id}", f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {is_dev}", f"–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {is_admin}"]
    if user.first_name:
        lines.append(f"–ò–º—è: {user.first_name}")
    if user.username:
        lines.append(f"–ù–∏–∫: @{user.username}")
    await update.message.reply_text("\n".join(lines))

async def add_admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_developer(user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>\n–ü—Ä–∏–º–µ—Ä: /add_admin 123456789")
            return

        target_user_id = int(context.args[0])
        if add_admin_user(target_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

async def remove_admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_developer(user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin <user_id>\n–ü—Ä–∏–º–µ—Ä: /remove_admin 123456789")
            return

        target_user_id = int(context.args[0])
        if remove_admin_user(target_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

async def list_admins_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_developer(user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    admins = get_admin_users()
    if not admins:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    lines = ["üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º:"]
    for admin_id in admins:
        lines.append(f"‚Ä¢ {admin_id}")

    await update.message.reply_text("\n".join(lines))

async def refresh_database_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    user = update.effective_user
    if not (is_developer(user.id) or is_admin_user(user.id)):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return

    await update.message.reply_text("üîÑ –°–∫–∞—á–∏–≤–∞—é JSONL —Å Google Drive‚Ä¶")

    try:
        temp_path = "./data/products.jsonl.part"
        final_path = "./data/products.jsonl"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("./data", exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await download_jsonl_from_gdrive(GDRIVE_ID, temp_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if os.path.exists(temp_path) and os.path.getsize(temp_path) > 0:
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if os.path.exists(final_path):
                os.replace(temp_path, final_path)
            else:
                os.rename(temp_path, final_path)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            products = await load_external_jsonl_database()
            product_count = len(products)

            await update.message.reply_text(
                f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {product_count}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")

    except Exception as e:
        logger.error(f"Error refreshing database: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        temp_path = "./data/products.jsonl.part"
        if os.path.exists(temp_path):
            os.unlink(temp_path)

# ========= –î–ù–ï–í–ù–ò–ö/–°–í–û–î–ö–ò =========
def _safe_list(v):
    return v if isinstance(v, list) else []

def _aggregate_food_day(food_entries: List[Dict[str, Any]], day: str) -> Optional[Dict[str, int]]:
    kcal = p = f = c = 0
    has = False
    for x in food_entries:
        if isinstance(x, dict) and isinstance(x.get("ts", ""), str) and x["ts"][:10] == day:
            has = True
            try:
                # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                kcal += float(x.get("kcal", 0)) if x.get("kcal") is not None else 0
                p += float(x.get("p", 0)) if x.get("p") is not None else 0
                f += float(x.get("f", 0)) if x.get("f") is not None else 0
                c += float(x.get("c", 0)) if x.get("c") is not None else 0
            except (ValueError, TypeError):
                pass
    return {"kcal": int(kcal), "p": int(p), "f": int(f), "c": int(c)} if has else None

def format_diary_entries_for_editing(entries: List[Dict[str, Any]], entry_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not entries:
        return f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ {entry_type}."

    lines = [f"üìã –ó–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ ({entry_type}):"]
    display_entries = entries[-10:]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π

    for i, entry in enumerate(display_entries, 1):
        ts = entry.get("ts", "")
        date_part = ts[:10] if len(ts) >= 10 else ts
        time_part = ts[11:16] if len(ts) >= 16 else ""

        if entry_type == "–ø–∏—Ç–∞–Ω–∏—è":
            text = entry.get("text", "–ó–∞–ø–∏—Å—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            # –û–±—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if len(text) > 100:
                text = text[:97] + "..."
            kcal = entry.get("kcal", 0)
            p = entry.get("p", 0)
            f = entry.get("f", 0)
            c = entry.get("c", 0)
            lines.append(f"{i}. [{date_part} {time_part}] {text} - {kcal} –∫–∫–∞–ª (–ë{p}/–ñ{f}/–£{c})")
        else:  # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            text = entry.get("text", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
            # –û–±—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if len(text) > 80:
                text = text[:77] + "..."
            workout_type = entry.get("type", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
            kcal = entry.get("kcal", 0)
            avg_hr = entry.get("avg_hr")
            hr_text = f", —Å—Ä. –ø—É–ª—å—Å {avg_hr}" if avg_hr else ""
            lines.append(f"{i}. [{date_part} {time_part}] {workout_type}: {text}{hr_text} - {kcal} –∫–∫–∞–ª")

    lines.append(f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(entries)}")
    lines.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-10), '–≤—Å–µ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞':")
    return "\n".join(lines)

async def show_diaries(update: Update, st: Dict[str, Any]):
    try:
        diaries, daily_energy = st.get("diaries", {}), st.get("daily_energy", {})
        foods, trains, metrics = _safe_list(diaries.get("food")), _safe_list(diaries.get("train")), _safe_list(diaries.get("metrics"))
        days_set = {
            ts[:10]
            for ts in [x.get("ts") for lst in (foods, trains, metrics) for x in lst if isinstance(x, dict) and isinstance(x.get("ts"), str) and len(x["ts"]) >= 10]
        }
        days_set.update(k for k in daily_energy.keys() if isinstance(k, str) and len(k) == 10)
        if not days_set:
            days_set.add(today_key())
        days = sorted(days_set, reverse=True)[:7]
        lines = ["–°–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π: üìÖ"]
        for d in days:
            agg = _aggregate_food_day(foods, d)
            day_trains = [t for t in trains if isinstance(t, dict) and isinstance(t.get("ts"), str) and t["ts"].startswith(d)]
            total_train_kcal = sum(int(t.get("kcal", 0)) for t in day_trains)
            lines.append(f"\n{d}")
            if agg and agg['kcal'] > 0:
                lines.append(f"üçè –ï–¥–∞: ~{agg['kcal']} –∫–∫–∞–ª; –ë{agg['p']}/–ñ{agg['f']}/–£{agg['c']}")
            else:
                de = daily_energy.get(d) or {}
                eaten_kcal = int(de.get('in', 0))
                if eaten_kcal > 0:
                    lines.append(f"üçè –ï–¥–∞: ~{eaten_kcal} –∫–∫–∞–ª")
                else:
                    lines.append("üçè –ï–¥–∞: –ø—É—Å—Ç–æ")
            if day_trains:
                lines.append("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                unique_trains = []
                seen_descriptions = set()
                for t in day_trains:
                    description = t.get('text', '').strip()
                    train_type = t.get('type', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
                    kcal = int(t.get('kcal', 0))

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if kcal > 0 and description not in seen_descriptions:
                        unique_trains.append(t)
                        seen_descriptions.add(description)

                if unique_trains:
                    for t in unique_trains[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –¥–µ–Ω—å
                        train_type = t.get('type', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
                        kcal = int(t.get('kcal', 0))
                        hr_info = f", —Å—Ä. –ø—É–ª—å—Å {t['avg_hr']}" if t.get('avg_hr') else ""
                        lines.append(f"‚Äî {train_type}{hr_info}, ~{kcal} –∫–∫–∞–ª")

                    if len(unique_trains) > 3:
                        lines.append(f"...–∏ –µ—â—ë {len(unique_trains)-3} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
                    lines.append(f"–í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ: ~{total_train_kcal} –∫–∫–∞–ª")
                else:
                    lines.append("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –ø—É—Å—Ç–æ")
            else:
                de = daily_energy.get(d) or {}
                burned_kcal = int(de.get('out', 0))
                if burned_kcal > 0:
                    lines.append(f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ~{burned_kcal} –∫–∫–∞–ª")
                else:
                    lines.append("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –ø—É—Å—Ç–æ")
        eat, burn = day_totals(st)
        if profile_complete(st["profile"]):
            k = calc_kbju_weight_loss(st["profile"])
            lines.append(
                f"\n–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–≤–æ–¥–∫–∞:\n‚Äî —Å—ä–µ–¥–µ–Ω–æ: ~{eat} –∫–∫–∞–ª; —Å–æ–∂–∂–µ–Ω–æ: ~{burn} –∫–∫–∞–ª\n‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –ø–æ—Ö—É–¥–µ–Ω–∏–µ: ~{k['target_kcal']} –∫–∫–∞–ª/—Å—É—Ç"
            )
            if k.get("training_plan_link") and k.get("training_kcal_weekly"):
                lines.append(
                    f"‚Äî —É—á—Ç—ë–Ω –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {k['training_plan_link']} (+{k['training_kcal_weekly']} –∫–∫–∞–ª/–Ω–µ–¥.)"
                )
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
            remaining_kcal = k['target_kcal'] - eat
            today_agg = _aggregate_food_day(foods, today_key())
            consumed_p = today_agg['p'] if today_agg and today_agg['kcal'] > 0 else 0
            consumed_f = today_agg['f'] if today_agg and today_agg['kcal'] > 0 else 0
            consumed_c = today_agg['c'] if today_agg and today_agg['kcal'] > 0 else 0

            remaining_p = max(0, k['protein_g'] - consumed_p)
            remaining_f = max(0, k['fat_g'] - consumed_f)
            remaining_c = max(0, k['carbs_g'] - consumed_c)

            lines.append(f"‚Äî –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ~{max(0, remaining_kcal)} –∫–∫–∞–ª")
            if remaining_kcal > 0: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ë–ñ–£ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –µ—Å—Ç—å
                lines.append(f"  –ë: ~{remaining_p} –≥, –ñ: ~{remaining_f} –≥, –£: ~{remaining_c} –≥")
        else:
            lines.append("\n–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–≤–æ–¥–∫–∞: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. üôÇ")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        full_text = "\n".join(lines)
        max_length = 4000  # Telegram limit is 4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å

        if len(full_text) <= max_length:
            await update.message.reply_text(
                full_text,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = []
            current_length = 0

            for line in lines:
                if current_length + len(line) + 1 > max_length:
                    if current_part:
                        parts.append("\n".join(current_part))
                        current_part = [line]
                        current_length = len(line)
                else:
                    current_part.append(line)
                    current_length += len(line) + 1

            if current_part:
                parts.append("\n".join(current_part))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await update.message.reply_text(
                        part,
                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    )
                else:
                    await update.message.reply_text(part)
    except Exception as e:
        logger.exception(f"show_diaries error: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫–∏. üôè", reply_markup=role_keyboard(st.get("current_role")))

async def show_points(update: Update, st: Dict[str, Any]):
    u = update.effective_user
    if not check_feature_access(st, u.id, "analytics"):
        await update.message.reply_text(
            f"–í–∞—à–∏ –±–∞–ª–ª—ã: {st.get('points', 0)} üèÖ\n\n"
            "–†–µ–π—Ç–∏–Ω–≥, —Ç–æ–ø-10 –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ ¬´–ú–∞–∫—Å–∏–º—É–º¬ª. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏! üöÄ",
            reply_markup=role_keyboard(st.get("current_role")),
        )
        return

    pts = int(st.get("points", 0))
    board_all = leaderboard_all()
    total = len(board_all)
    rank = None
    uid_str = str(u.id)
    for i, user_data in enumerate(board_all, 1):
        if str(user_data["user_id"]) == uid_str:
            rank = i
            break
    top = board_all[:10]
    lines = [f"–í–∞—à–∏ –±–∞–ª–ª—ã: {pts} üèÖ"]
    if rank:
        lines.append(f"–í–∞—à–µ –º–µ—Å—Ç–æ: {rank} –∏–∑ {total} üôÇ")
    else:
        lines.append(f"–í–∞—à–µ –º–µ—Å—Ç–æ: –≤–Ω–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ ({total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).")
    if top:
        lines.append("\n–¢–æ–ø‚Äë10:")
        for i, user_data in enumerate(top, 1):
            mark = " üëë" if i == 1 else " üî•" if i <= 3 else " üéâ" if i <= 10 else ""
            you_mark = " (–≤—ã)" if str(user_data["user_id"]) == uid_str else ""
            lines.append(f"{i}. –£—á–∞—Å—Ç–Ω–∏–∫ {user_data['user_id'][:5]}...: {user_data['points']}{mark}{you_mark}")
    if rank == 1:
        lines.append("\n–¢—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ! üëë –û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—Å–µ—Ä–¥–∏–µ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É. –¢—ã –ø—Ä–∏–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö! ü•á")
    elif rank and rank <= 3:
        lines.append("\n–û—Ç–ª–∏—á–Ω—ã–π —Ç–µ–º–ø, —Ç—ã –≤ —Ç—Ä–æ–π–∫–µ –ª–∏–¥–µ—Ä–æ–≤! üî• –ß—É—Ç—å-—á—É—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –∏ –≤–µ—Ä—à–∏–Ω–∞ —Å–æ–≤—Å–µ–º —Ä—è–¥–æ–º. –í–ø–µ—Ä—ë–¥! üöÄ")
    elif rank and rank <= 10:
        lines.append("\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ç–æ–ø‚Äë10! üéâ –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚Äî –∏ –ø–æ–ø–∞–¥–µ—à—å –≤ –ø—Ä–∏–∑—ã. –Ø —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–≥—É. üëè")
    await update.message.reply_text("\n".join(lines), reply_markup=role_keyboard(st.get("current_role")))

# ========= –ú–ê–ì–ê–ó–ò–ù / –ü–õ–ê–¢–ï–ñ–ò =========
async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    st = load_state(u.id)
    level = get_user_access(st, u.id)

    status_map = {"free": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "basic": "–ë–∞–∑–æ–≤—ã–π", "premium": "–ü—Ä–µ–º–∏—É–º", "maximum": "–ú–∞–∫—Å–∏–º—É–º"}

    text = (
        f"‚≠ê –ú–∞–≥–∞–∑–∏–Ω\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {status_map.get(level, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è:"
    )

    keyboard = []
    if level not in ("basic", "premium", "maximum"):
        keyboard.append([InlineKeyboardButton(f"–ë–∞–∑–æ–≤—ã–π ({PRICE_BASIC}‚≠ê) ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∏", callback_data="buy:basic")])
    if level not in ("premium", "maximum"):
        keyboard.append([InlineKeyboardButton(f"–ü—Ä–µ–º–∏—É–º ({PRICE_PREMIUM}‚≠ê) ‚Äî –î–Ω–µ–≤–Ω–∏–∫–∏, —Ä–µ—Ü–µ–ø—Ç—ã, –ö–ë–ñ–£+", callback_data="buy:premium")])
    if level != "maximum":
        keyboard.append([InlineKeyboardButton(f"–ú–∞–∫—Å–∏–º—É–º ({PRICE_MAXIMUM}‚≠ê) ‚Äî –í—Å—ë + —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="buy:maximum")])

    if not keyboard:
        text = f"‚≠ê –ú–∞–≥–∞–∑–∏–Ω\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {status_map.get(level, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üëë"

    await context.bot.send_message(chat_id=u.id, text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def send_invoice_for_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE, tier: str):
    u = update.effective_user
    prices = {"basic": PRICE_BASIC, "premium": PRICE_PREMIUM, "maximum": PRICE_MAXIMUM}
    titles = {"basic": "–¢–∞—Ä–∏—Ñ ¬´–ë–∞–∑–æ–≤—ã–π¬ª", "premium": "–¢–∞—Ä–∏—Ñ ¬´–ü—Ä–µ–º–∏—É–º¬ª", "maximum": "–¢–∞—Ä–∏—Ñ ¬´–ú–∞–∫—Å–∏–º—É–º¬ª"}
    descriptions = {
        "basic": "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–∞—Ö.",
        "premium": "–í—Å—ë –∏–∑ –ë–∞–∑–æ–≤–æ–≥–æ + —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π.",
        "maximum": "–í—Å—ë –∏–∑ –ü—Ä–µ–º–∏—É–º + –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.",
    }
    price = prices.get(tier)
    if not price:
        return
    payload = f"subscribe_{tier}_{u.id}"
    await context.bot.send_invoice(
        chat_id=u.id,
        title=titles[tier],
        description=descriptions[tier],
        payload=payload,
        provider_token=TELEGRAM_PAYMENT_PROVIDER_TOKEN,
        currency="XTR",
        prices=[LabeledPrice("–¶–µ–Ω–∞", price)],
    )

async def send_invoice_for_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE, role: str):
    u = update.effective_user
    title = "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    description = f"–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'—Ç—Ä–µ–Ω–µ—Ä–∞' if role == 'trainer' else '–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞'}."
    payload = f"motivation_{role}_{u.id}"
    await context.bot.send_invoice(
        chat_id=u.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=TELEGRAM_PAYMENT_PROVIDER_TOKEN,
        currency="XTR",
        prices=[LabeledPrice("–¶–µ–Ω–∞", PRICE_MOTIVATION)],
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload.startswith(("subscribe_", "motivation_")):
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    st = load_state(u.id)
    payment_info = update.message.successful_payment
    payload = payment_info.invoice_payload

    if payload.startswith("subscribe_"):
        _, tier, user_id = payload.split("_")
        st["access_level"] = tier
        save_state(u.id, st)
        await context.bot.send_message(chat_id=u.id, text=f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ ¬´{tier.capitalize()}¬ª. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üéâ")
    elif payload.startswith("motivation_"):
        _, role, user_id = payload.split("_")
        msg_list = load_motivations().get(role, [])
        if msg_list:
            await context.bot.send_message(chat_id=u.id, text=random.choice(msg_list))
        else:
            await context.bot.send_message(chat_id=u.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

# ========= –ú–û–¢–ò–í–ê–¶–ò–ò =========
def load_motivations() -> Dict[str, List[str]]:
    try:
        with open("motivations.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            return {"trainer": data.get("coach", []), "nutri": data.get("nutritionist", [])}
    except Exception as e:
        logger.error(f"Could not load motivations.json: {e}")
        return {"trainer": ["–î–µ—Ä–∂–∏—Å—å, —Ç—ã –º–æ–∂–µ—à—å –≤—Å—ë! üí™"], "nutri": ["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ–≥–æ–¥–Ω—è ‚Äî –∑–∞–ª–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤—Ç—Ä–∞! üçè"]}

# ========= –ö–ù–û–ü–ö–ò/–¢–ï–ö–°–¢ =========
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any], text: str) -> bool:
    u = update.effective_user
    if text == "üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        st["awaiting"] = "onb_gender"
        await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ª:", reply_markup=ReplyKeyboardMarkup(GENDER_KB, resize_keyboard=True))
        return True
    if text == "‚≠ê –ú–∞–≥–∞–∑–∏–Ω":
        await shop_command(update, context)
        return True
    if text == "ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥":
        st["current_role"] = "nutri"
        st["awaiting"] = None
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ üçè –ü–æ–º–æ–≥—É —Å –º–µ–Ω—é, –ö–ë–ñ–£ –∏ –¥–Ω–µ–≤–Ω–∏–∫–æ–º. –ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –ø–æ –¥–µ–ª—É! üôÇ",
            reply_markup=role_keyboard("nutri"),
        )
        return True
    if text == "üèãÔ∏è –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä":
        st["current_role"] = "trainer"
        st["awaiting"] = None
        await update.message.reply_text(
            "–Ø —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä üí™ –ü—Ä–æ–≥—Ä–∞–º–º–∞, —Ç–µ—Ö–Ω–∏–∫–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ç—Ä–∞–≤–º –ø–æ NASM ‚Äî –≤—Å—ë —Å–¥–µ–ª–∞–µ–º —á—ë—Ç–∫–æ! üî•",
            reply_markup=role_keyboard("trainer"),
        )
        return True
    if text == "üçè –ü–ü‚Äë—Ä–µ—Ü–µ–ø—Ç—ã":
        if has_full_access(u.id):
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
            recipe_keyboard = ReplyKeyboardMarkup([
                [KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏"), KeyboardButton("üçΩÔ∏è –û–±–µ–¥—ã")],
                [KeyboardButton("üåô –£–∂–∏–Ω—ã"), KeyboardButton("‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ü–ü-—Ä–µ—Ü–µ–ø—Ç–æ–≤:",
                reply_markup=recipe_keyboard
            )
            st["awaiting"] = "recipe_category"
            return True
        elif get_user_access(st, u.id) == "free" and st["tmp"].get("used_random_recipe"):
            await update.message.reply_text(
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º ‚Äî –≤ —Ç–∞—Ä–∏—Ñ–µ –ü—Ä–µ–º–∏—É–º –∏ –≤—ã—à–µ. ‚≠ê",
                reply_markup=role_keyboard("nutri"),
            )
            return True
        else:
            await recipes_root(update, context, st)
        return True
    if text == "üìí –ú–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏":
        await show_diaries(update, st)
        return True
    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ":
        foods = _safe_list(st["diaries"].get("food", []))
        if not foods:
            await update.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –ø—É—Å—Ç.", reply_markup=role_keyboard(st.get("current_role")))
            return True

        diary_text = format_diary_entries_for_editing(foods, "–ø–∏—Ç–∞–Ω–∏—è")
        st["awaiting"] = "edit_food_diary"
        await update.message.reply_text(
            diary_text,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return True
    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
        trains = _safe_list(st["diaries"].get("train", []))
        if not trains:
            await update.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç.", reply_markup=role_keyboard(st.get("current_role")))
            return True

        diary_text = format_diary_entries_for_editing(trains, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        st["awaiting"] = "edit_train_diary"
        await update.message.reply_text(
            diary_text,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return True
    if text == "üèÜ –ú–æ–∏ –±–∞–ª–ª—ã":
        await show_points(update, st)
        return True
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        st["current_role"] = None
        st["awaiting"] = None
        st["tmp"] = {}
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_keyboard(None))
        return True

    if st.get("current_role") == "nutri":
        if text == "‚≠ê –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—à–∫—É –æ—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞":
            if has_full_access(u.id):
                msg_list = load_motivations().get("nutri", [])
                if msg_list:
                    await update.message.reply_text(random.choice(msg_list), reply_markup=role_keyboard("nutri"))
                else:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üôè", reply_markup=role_keyboard("nutri"))
            else:
                await send_invoice_for_motivation(update, context, "nutri")
            return True
        if text == "üìè –ò–ú–¢ (BMI)":
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            bmi, cat = calc_bmi(float(st["profile"]["weight_kg"]), int(st["profile"]["height_cm"]))
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "bmi", "data": {"bmi": bmi, "cat": cat}})
            if award_once(st, "bmi"):
                add_points(st, 2)
            await update.message.reply_text(f"BMI: {bmi} ‚Äî {cat}. –ó–∞–ø–∏—Å–∞–Ω–æ. ‚úÖ", reply_markup=role_keyboard("nutri"))
            return True
        if text == "üìä –ö–ë–ñ–£":
            if not check_feature_access(st, u.id, "calories_ai"):
                await update.message.reply_text("–¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ö–ë–ñ–£ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ –ü—Ä–µ–º–∏—É–º –∏ –≤—ã—à–µ. ‚≠ê")
                return True
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            k = calc_kbju_weight_loss(st["profile"])
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "kbju", "data": k})
            if award_once(st, "kbju"):
                add_points(st, 2)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            lines = [
                f"üìä –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ö–ë–ñ–£",
                f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö USDA FDC –∏ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                f"",
                f"üë§ –í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:",
                f"‚Ä¢ –ò–ú–¢: {k['bmi']} ({k['bmi_category']})",
                f"‚Ä¢ –¶–µ–ª—å: {k['goal']}",
                f"",
                f"üî• –ú–µ—Ç–∞–±–æ–ª–∏–∑–º:",
                f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω (BMR): {k['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å",
                f"‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (TDEE): {k['tdee']} –∫–∫–∞–ª/–¥–µ–Ω—å"
            ]

            if k.get("training_plan_link") and k.get("training_kcal_weekly"):
                lines.append(
                    f"‚Ä¢ –£—á—Ç—ë–Ω –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {k['training_plan_link']} (+{k['training_kcal_weekly']} –∫–∫–∞–ª/–Ω–µ–¥.)"
                )

            if k['goal'] == "–ü–æ—Ö—É–¥–µ—Ç—å":
                lines.extend([
                    f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç: {k['deficit_pct']}% ({abs(k['deficit_kcal'])} –∫–∫–∞–ª)",
                    f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è –Ω–æ—Ä–º–∞: {k['target_kcal']} –∫–∫–∞–ª/–¥–µ–Ω—å"
                ])
            elif k['goal'] == "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
                lines.extend([
                    f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç: {abs(k['deficit_pct'])}% (+{abs(k['deficit_kcal'])} –∫–∫–∞–ª)",
                    f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è –Ω–æ—Ä–º–∞: {k['target_kcal']} –∫–∫–∞–ª/–¥–µ–Ω—å"
                ])
            else:
                lines.append(f"‚Ä¢ –ù–æ—Ä–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è: {k['target_kcal']} –∫–∫–∞–ª/–¥–µ–Ω—å")

            lines.extend([
                f"",
                f"ü•© –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:",
                f"‚Ä¢ –ë–µ–ª–∫–∏: {k['protein_g']} –≥ ({k['protein_g']*4} –∫–∫–∞–ª)",
                f"‚Ä¢ –ñ–∏—Ä—ã: {k['fat_g']} –≥ ({k['fat_g']*9} –∫–∫–∞–ª)",
                f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {k['carbs_g']} –≥ ({k['carbs_g']*4} –∫–∫–∞–ª)",
                f"",
                f"üíä –í–∞–∂–Ω—ã–µ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (USDA —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏):"
            ])

            micros = k.get('micronutrients', {})
            for nutrient, amount in micros.items():
                if nutrient != 'note':
                    nutrient_name = {
                        'iron': '–ñ–µ–ª–µ–∑–æ',
                        'calcium': '–ö–∞–ª—å—Ü–∏–π',
                        'vitamin_d': '–í–∏—Ç–∞–º–∏–Ω D',
                        'vitamin_c': '–í–∏—Ç–∞–º–∏–Ω C',
                        'magnesium': '–ú–∞–≥–Ω–∏–π',
                        'omega3': '–û–º–µ–≥–∞-3'
                    }.get(nutrient, nutrient)
                    lines.append(f"‚Ä¢ {nutrient_name}: {amount}")

            if micros.get('note'):
                lines.append(f"üí° {micros['note']}")

            lines.extend([
                f"",
                f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
            ])

            for rec in k.get('recommendations', []):
                lines.append(f"‚Ä¢ {rec}")

            lines.extend([
                f"",
                f"‚ö†Ô∏è {k['note']}"
            ])

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            full_text = "\n".join(lines)
            if len(full_text) > 4000:
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
                first_part = "\n".join(lines[:20])
                await update.message.reply_text(first_part, reply_markup=role_keyboard("nutri"))
                # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å
                second_part = "\n".join(lines[20:])
                await update.message.reply_text(second_part, reply_markup=role_keyboard("nutri"))
            else:
                await update.message.reply_text(full_text, reply_markup=role_keyboard("nutri"))
            return True
        if text == "üçè –û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫":
            st["awaiting"] = "food_diary"
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ü–û–î–ü–ò–°–¨–Æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ~–≥—Ä–∞–º–º—ã), –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–ª—é–¥–∞/–ø—Ä–æ–¥—É–∫—Ç–∞. üçΩÔ∏è\n\n"
                "üîç –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞:\n"
                "‚Ä¢ –®—Ç—Ä–∏—Ö-–∫–æ–¥ (8-14 —Ü–∏—Ñ—Ä) ‚Üí Open Food Facts\n"
                "‚Ä¢ –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ‚Üí –ò–ò-–∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–æ–º\n"
                "‚Ä¢ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ‚Üí –±–∞–∑–∞ USDA FDC\n\n"
                "–î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
                "‚Ä¢ –®—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ)\n"
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                "‚Ä¢ –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö\n"
                "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                reply_markup=role_keyboard("nutri"),
            )
            return True
        if text in ("üçΩÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é"):
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            if text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é":
                st["awaiting"] = "menu_changes"
                await update.message.reply_text("–ß—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å –≤ –º–µ–Ω—é? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–º–µ–Ω—å—à–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤–µ—á–µ—Ä–æ–º¬ª, ¬´–±–µ–∑ –ª–∞–∫—Ç–æ–∑—ã¬ª). –ò–ª–∏ ¬´–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π¬ª. ‚úçÔ∏è")
                return True

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –∏–∑ pp_menu_60.json
            current_day = get_current_menu_day(st)
            menu_items = get_menu_for_day(current_day, "a")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç A –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é

            if not menu_items:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                k = calc_kbju_weight_loss(st["profile"])
                await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")
                plan = await generate_menu_via_llm(st["profile"], k["target_kcal"], changes="")
            else:
                k = calc_kbju_weight_loss(st["profile"])
                await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")
                plan = await generate_menu_with_nutrition(st["profile"], menu_items, k["target_kcal"], changes="")
                increment_menu_day(st)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è

            st["tmp"]["last_menu"], st["tmp"]["last_menu_kcal_target"] = plan, k["target_kcal"]
            add_points(st, 5)
            st["awaiting"] = "confirm_save_menu"
            await update.message.reply_text(plan, reply_markup=yes_no_kb("save_menu"))
            await update.message.reply_text("–ó–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –≤ –¥–Ω–µ–≤–Ω–∏–∫?", reply_markup=role_keyboard("nutri"))
            return True
        if text == "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
            st["awaiting"] = "search_product"
            await update.message.reply_text(
                "üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£:\n\n"
                "üì¶ –®—Ç—Ä–∏—Ö-–∫–æ–¥ (8-14 —Ü–∏—Ñ—Ä):\n"
                "‚Üí Open Food Facts (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)\n\n"
                "üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–π–æ–≥—É—Ä—Ç—ã, –±–∞—Ç–æ–Ω—á–∏–∫–∏, –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞):\n"
                "‚Üí –ò–ò-–∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–æ–º\n\n"
                "ü•¨ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏, –º—è—Å–æ):\n"
                "‚Üí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö USDA FDC\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ '4601234567890' (—à—Ç—Ä–∏—Ö-–∫–æ–¥)\n"
                "‚Ä¢ '–î–∞–Ω–æ–Ω –π–æ–≥—É—Ä—Ç' (–±—Ä–µ–Ω–¥–æ–≤—ã–π)\n"
                "‚Ä¢ 'apple' –∏–ª–∏ '—è–±–ª–æ–∫–æ' (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π)\n"
                "‚Ä¢ '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞' (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π) üéØ"
            )
            return True
        if text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì":
            st["awaiting"] = "ask_nutri"
            await update.message.reply_text("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø–∏—Ç–∞–Ω–∏—é. üí¨")
            return True

    if st.get("current_role") == "trainer":
        if text == "‚≠ê –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—à–∫—É –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞":
            if has_full_access(u.id):
                msg_list = load_motivations().get("trainer", [])
                if msg_list:
                    await update.message.reply_text(random.choice(msg_list), reply_markup=role_keyboard("trainer"))
                else:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üôè", reply_markup=role_keyboard("trainer"))
            else:
                await send_invoice_for_motivation(update, context, "trainer")
            return True
        if text == "üìà –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã":
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            age, hrrest = int(st["profile"]["age"]), get_last_hrrest(st)
            z = pulse_zones(age, hrrest)
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "zones", "data": {"hrrest": hrrest, "zones": z}})
            if award_once(st, "zones"):
                add_points(st, 2)
            txt = (
                "–í–∞—à–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ß–°–° ‚ù§Ô∏è (—É–¥/–º–∏–Ω):\n"
                f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {z['recovery'][0]}‚Äì{z['recovery'][1]}\n–ê—ç—Ä–æ–±–Ω–∞—è –±–∞–∑–∞: {z['aerobic'][0]}‚Äì{z['aerobic'][1]}\n"
                f"–¢–µ–º–ø–æ–≤–∞—è: {z['tempo'][0]}‚Äì{z['tempo'][1]}\nVO2max: {z['vo2'][0]}‚Äì{z['vo2'][1]}\n–ê–Ω–∞—ç—Ä–æ–±–Ω–∞—è: {z['anaer'][0]}‚Äì{z['anaer'][1]}"
            )
            await update.message.reply_text(txt, reply_markup=role_keyboard("trainer"))
            st["awaiting"] = "zones_hrrest"
            await update.message.reply_text("–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—à–ª<ctrl63>–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ –≤ –ø–æ–∫–æ–µ (—á–∏—Å–ª–æ).")
            return True
        if text == "ü´Å –ú–ü–ö (VO2max)":
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            age, hrrest = int(st["profile"]["age"]), get_last_hrrest(st)
            hrmax = 208 - 0.7 * age
            vo2_est = 15.3 * (hrmax / hrrest)
            cat = vo2_category(st["profile"].get("gender", "–ú—É–∂—Å–∫–æ–π"), vo2_est)
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "vo2", "data": {"vo2": round(vo2_est, 1), "cat": cat, "from": "estimate", "hrrest": hrrest}})
            if award_once(st, "vo2"):
                add_points(st, 2)

            explanation = (
                "ü´Å –ú–ü–ö (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ö–∏—Å–ª–æ—Ä–æ–¥–∞) ‚Äî —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞—ç—Ä–æ–±–Ω–æ–π –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏. "
                "–û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤ –∫–∏—Å–ª–æ—Ä–æ–¥–∞ –≤–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç—å –∑–∞ –º–∏–Ω—É—Ç—É –Ω–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º –≤–µ—Å–∞ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ.\n\n"
                f"üìä –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ VO2max: {vo2_est:.1f} –º–ª/–∫–≥/–º–∏–Ω ‚Äî {cat}\n"
                f"üìà –†–∞—Å—á—ë—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ: HRmax/HRrest (HRrest={hrrest})\n\n"
                "üí° –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ –º–ª/–∫–≥/–º–∏–Ω, –∏ —è –æ–±–Ω–æ–≤–ª—é –¥–∞–Ω–Ω—ã–µ. üß™"
            )

            await update.message.reply_text(explanation, reply_markup=role_keyboard("trainer"))
            st["awaiting"] = "vo2_value"
            return True
        if text == "üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            st["awaiting"] = "workout_days"
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ 3 –∏–ª–∏ 7.", reply_markup=ReplyKeyboardMarkup([["3", "7"]], resize_keyboard=True))
            return True
        if text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω":
            if not profile_complete(st["profile"]):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. üôÇ")
                return True
            st["awaiting"] = "workout_changes"
            await update.message.reply_text("–ß—Ç–æ –º–µ–Ω—è—Ç—å –≤ –ø–ª–∞–Ω–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª—å—à–µ –∫–∞—Ä–¥–∏–æ¬ª, ¬´–±–µ–∑ –ø—Ä—ã–∂–∫–æ–≤¬ª). –ò–ª–∏ ¬´–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π¬ª. ‚úçÔ∏è")
            return True
        if text == "‚ûï –í–Ω–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
            st["awaiting"] = "add_workout"
            await update.message.reply_text(
                "–û–ø–∏—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –≤–∏–¥, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω, —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å).\n–ü—Ä–∏–º–µ—Ä: ¬´–ë–µ–≥ 35 –º–∏–Ω, –ø—É–ª—å—Å 152¬ª. üèÉ‚Äç‚ôÇÔ∏è"
            )
            return True
        if text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì":
            st["awaiting"] = "ask_trainer"
            await update.message.reply_text("–°–ø—Ä–æ—Å–∏ –ø—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–∏–∫—É, –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫—É —Ç—Ä–∞–≤–º ‚Äî —è –∑–¥–µ—Å—å. üí¨", reply_markup=role_keyboard("trainer"))
            return True
    return False

async def handle_text_or_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    st = load_state(u.id)
    msg, text = update.message, (update.message.text or "").strip()
    try:
        if await handle_onboarding(update, context, st):
            return
        if text and await handle_buttons(update, context, st, text):
            save_state(u.id, st)
            return
        awaiting = st.get("awaiting")

        # --- –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ---
        if awaiting == "food_diary":
            food_count = len(st["diaries"].get("food", []))
            train_count = len(st["diaries"].get("train", []))
            if get_user_access(st, u.id) == "free" and (food_count + train_count) >= FREE_DIARY_LIMIT:
                await update.message.reply_text(
                    f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ {FREE_DIARY_LIMIT} –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. "
                    "–î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ ¬´–ë–∞–∑–æ–≤—ã–π¬ª –∏–ª–∏ –≤—ã—à–µ. ‚≠ê",
                    reply_markup=role_keyboard(st.get("current_role")),
                )
                st["awaiting"] = None
                return

            caption, is_photo, src_text, reply = (msg.caption or "").strip(), bool(msg.photo), "", ""
            if is_photo and not caption and not text:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ü–û–î–ü–ò–°–¨ –∫ —Ñ–æ—Ç–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ~–≥—Ä–∞–º–º—ã). üì∏")
                return
            entry, src_text, reply = {"ts": now_ts()}, "", ""
            if is_photo:
                entry["photo"] = msg.photo[-1].file_id
                if caption:
                    entry["text"], src_text = caption, caption
                add_points(st, 3)
                reply = "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. +3 –±–∞–ª–ª–∞. ‚úÖ\n"
            elif text:
                entry["text"], src_text = text, text
                add_points(st, 2)
                reply = "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. +2 –±–∞–ª–ª–∞. ‚úÖ\n"

            est = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Open Food Facts
            if src_text and HAS_OPENFOOD:
                barcode_match = re.search(r'\b\d{8,14}\b', src_text)
                if barcode_match:
                    barcode = barcode_match.group()
                    logger.info(f"Detected barcode in diary: {barcode}")
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        grams_match = re.search(r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|g|grams?)\b', src_text, re.I)
                        user_grams = float(grams_match.group(1).replace(',', '.')) if grams_match else 100
                        logger.info(f"User grams for barcode: {user_grams}")
                        
                        barcode_result = await off_by_barcode(barcode, grams=user_grams)
                        logger.info(f"Barcode search result: {barcode_result}")
                        
                        if barcode_result and (barcode_result.get('kcal_100g') or barcode_result.get('kcal_portion')):
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ai_meal_json
                            kcal_portion = barcode_result.get('kcal_portion')
                            kcal_100g = barcode_result.get('kcal_100g', 0)
                            
                            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º–∏
                            if kcal_portion is None and kcal_100g and user_grams:
                                factor = user_grams / 100.0
                                kcal_portion = kcal_100g * factor
                                protein_portion = (barcode_result.get('protein_100g', 0) or 0) * factor
                                fat_portion = (barcode_result.get('fat_100g', 0) or 0) * factor
                                carbs_portion = (barcode_result.get('carbs_100g', 0) or 0) * factor
                            else:
                                protein_portion = barcode_result.get('protein_portion', 0) or 0
                                fat_portion = barcode_result.get('fat_portion', 0) or 0
                                carbs_portion = barcode_result.get('carbs_portion', 0) or 0
                            
                            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 100–≥
                            if not kcal_portion and kcal_100g:
                                kcal_portion = kcal_100g
                                protein_portion = barcode_result.get('protein_100g', 0) or 0
                                fat_portion = barcode_result.get('fat_100g', 0) or 0
                                carbs_portion = barcode_result.get('carbs_100g', 0) or 0
                            
                            est = {
                                'kcal': int(kcal_portion or 0),
                                'protein_g': round(protein_portion, 1),
                                'fat_g': round(fat_portion, 1),
                                'carbs_g': round(carbs_portion, 1),
                                'notes': f"üì¶ Open Food Facts (—à—Ç—Ä–∏—Ö-–∫–æ–¥): {barcode_result.get('name', '–ü—Ä–æ–¥—É–∫—Ç')} ({user_grams}–≥)",
                                'source_data': {
                                    'grams': user_grams,
                                    'kcal_100g': kcal_100g,
                                    'protein_100g': barcode_result.get('protein_100g', 0),
                                    'fat_100g': barcode_result.get('fat_100g', 0),
                                    'carbs_100g': barcode_result.get('carbs_100g', 0)
                                }
                            }
                            logger.info(f"Successfully found product by barcode: {barcode_result.get('name', 'Unknown')}, final est: {est}")
                        else:
                            logger.warning(f"Barcode result missing nutrition data: {barcode_result}")
                    except Exception as e:
                        logger.warning(f"Barcode search failed: {e}")
                        import traceback
                        logger.warning(f"Barcode search traceback: {traceback.format_exc()}")

            # –ï—Å–ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            if not est:
                logger.info(f"Barcode search failed, trying general search for: {src_text}")
                est = await ai_meal_json(st["profile"], src_text) if src_text else None
                logger.info(f"General search result: {est}")

            if est and est.get("kcal"):
                kcal = int(est["kcal"])
                protein = round(est.get("protein_g", 0), 1)
                fat = round(est.get("fat_g", 0), 1)
                carbs = round(est.get("carbs_g", 0), 1)

                entry.update(
                    {
                        "kcal": kcal,
                        "p": protein,
                        "f": fat,
                        "c": carbs,
                    }
                )
                add_kcal_in(st, kcal)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞–º–º–æ–≤–∫–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                source_note = est.get('notes', '–∞–Ω–∞–ª–∏–∑')
                source_data = est.get('source_data', {})
                grams = source_data.get('grams', 100)

                # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—ã–ª–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ
                if grams != 100:
                    reply += f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –¥–ª—è {grams}–≥: {kcal} –∫–∫–∞–ª (–ë{protein:.1f}/–ñ{fat:.1f}/–£{carbs:.1f}). üçΩÔ∏è"
                else:
                    reply += f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –¥–ª—è 100–≥: {kcal} –∫–∫–∞–ª (–ë{protein:.1f}/–ñ{fat:.1f}/–£{carbs:.1f}). üçΩÔ∏è"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
                if "USDA FDC" in source_note:
                    reply += "\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫: –±–∞–∑–∞ USDA FDC"
                elif "Open Food Facts" in source_note:
                    reply += "\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫: Open Food Facts"
                elif "–£–º–Ω—ã–π –ø–æ–∏—Å–∫" in source_note:
                    reply += "\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫: —É–º–Ω—ã–π –ø–æ–∏—Å–∫"
                elif "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" in source_note:
                    reply += "\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            else:
                reply += "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. üôÇ"

            st["diaries"]["food"].append(entry)
            st["awaiting"] = None
            eat, burn = day_totals(st)
            if profile_complete(st["profile"]):
                k = calc_kbju_weight_loss(st["profile"])
                reply += f"\n–°–µ–≥–æ–¥–Ω—è: —Å—ä–µ–¥–µ–Ω–æ ~{eat} –∫–∫–∞–ª; —Å–æ–∂–∂–µ–Ω–æ ~{burn} –∫–∫–∞–ª. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ~{k['target_kcal']} –∫–∫–∞–ª. üìä"
                if k.get("training_plan_link") and k.get("training_kcal_weekly"):
                    reply += (
                        f"\n–£—á—Ç—ë–Ω –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {k['training_plan_link']} (+{k['training_kcal_weekly']} –∫–∫–∞–ª/–Ω–µ–¥.)"
                    )
            else:
                reply += f"\n–°–µ–≥–æ–¥–Ω—è: —Å—ä–µ–¥–µ–Ω–æ ~{eat} –∫–∫–∞–ª; —Å–æ–∂–∂–µ–Ω–æ ~{burn} –∫–∫–∞–ª. üìä"
            await update.message.reply_text(reply, reply_markup=role_keyboard(st.get("current_role")))

        # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—é ---
        elif awaiting == "confirm_save_menu":
            if text.lower() in ("–¥–∞", "yes"):
                last_menu = st["tmp"].get("last_menu", "")
                kcal_match = re.search(r"–ò—Ç–æ–≥–æ(?:\s+–∑–∞\s+–¥–µ–Ω—å)?:\s*~?(\d+)\s*–∫–∫–∞–ª", last_menu)
                kcal = int(kcal_match.group(1)) if kcal_match else int(st["tmp"].get("last_menu_kcal_target", 0))

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                protein = fat = carbs = 0
                bju_patterns = [
                    r"–ë[:\s]*(\d+)[:\s]*–≥.*?–ñ[:\s]*(\d+)[:\s]*–≥.*?–£[:\s]*(\d+)[:\s]*–≥",
                    r"–ë(\d+)/–ñ(\d+)/–£(\d+)",
                    r"–ë(\d+)\s*/\s*–ñ(\d+)\s*/\s*–£(\d+)",
                    r"–±–µ–ª–∫–∏?\s*[:\-]?\s*(\d+).*?–∂–∏—Ä—ã?\s*[:\-]?\s*(\d+).*?—É–≥–ª–µ–≤–æ–¥—ã?\s*[:\-]?\s*(\d+)",
                ]

                for pattern in bju_patterns:
                    bju_match = re.search(pattern, last_menu, re.IGNORECASE)
                    if bju_match:
                        protein = int(bju_match.group(1))
                        fat = int(bju_match.group(2))
                        carbs = int(bju_match.group(3))
                        break

                if kcal > 0:
                    add_kcal_in(st, kcal)
                    st["diaries"]["food"].append({
                        "ts": now_ts(),
                        "text": f"–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å: {last_menu}",
                        "kcal": kcal,
                        "p": protein,
                        "f": fat,
                        "c": carbs
                    })
                    add_points(st, 2)
                    await update.message.reply_text(f"–î–æ–±–∞–≤–∏–ª –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é (~{kcal} –∫–∫–∞–ª, –ë{protein}/–ñ{fat}/–£{carbs}) –≤ –¥–Ω–µ–≤–Ω–∏–∫. +2 –±–∞–ª–ª–∞. ‚úÖ", reply_markup=role_keyboard(st.get("current_role")))
                else:
                    await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –∏—Ç–æ–≥–æ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Ç—Ä–∞–ø–µ–∑—ã –≤—Ä—É—á–Ω—É—é. üôÇ", reply_markup=role_keyboard(st.get("current_role")))
            else:
                await update.message.reply_text("–û–∫, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é. üëç", reply_markup=role_keyboard(st.get("current_role")))
            st["awaiting"] = None
            st["tmp"].pop("last_menu", None)
            st["tmp"].pop("last_menu_kcal_target", None)

        # --- –í–Ω–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ---
        elif awaiting == "add_workout":
            food_count = len(st["diaries"].get("food", []))
            train_count = len(st["diaries"].get("train", []))
            if get_user_access(st, u.id) == "free" and (food_count + train_count) >= FREE_DIARY_LIMIT:
                await update.message.reply_text(
                    f"–õ–∏–º–∏—Ç –≤ {FREE_DIARY_LIMIT} –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –Ω—É–∂–µ–Ω —Ç–∞—Ä–∏—Ñ ¬´–ë–∞–∑–æ–≤—ã–π¬ª. ‚≠ê",
                    reply_markup=role_keyboard(st.get("current_role")),
                )
                st["awaiting"] = None
                return

            desc = text
            mins = 45
            hrm = None
            try:
                mins_match = re.search(r"(\d{1,3})\s*(?:–º–∏–Ω|m)", desc, re.I)
                mins = int(mins_match.group(1)) if mins_match else 45
                hr_match = re.search(r"(\d{2,3})\s*(?:—É–¥|—á—Å—Å|–ø—É–ª—å—Å)", desc, re.I)
                hrm = int(hr_match.group(1)) if hr_match else None
            except:
                pass
            kcal = estimate_kcal_workout(st["profile"], desc, mins, hrm)
            t = desc.lower()
            t_type = next(
                (name for kw, name in [
                    ("–±–µ–≥", "–±–µ–≥"), ("—Ö–æ–¥—å", "—Ö–æ–¥—å–±–∞"), ("–π–æ–≥–∞", "–π–æ–≥–∞"),
                    ("—Å–∏–ª–æ–≤", "—Å–∏–ª–æ–≤–∞—è"), ("–≥–∞–Ω—Ç–µ–ª", "—Å–∏–ª–æ–≤–∞—è"), ("—à—Ç–∞–Ω–≥", "—Å–∏–ª–æ–≤–∞—è"),
                    ("–≤–µ–ª", "–≤–µ–ª–æ"), ("bike", "–≤–µ–ª–æ"), ("–ø–ª–∞–≤", "–ø–ª–∞–≤–∞–Ω–∏–µ"),
                    ("–∏–Ω—Ç–µ—Ä–≤–∞–ª", "–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"), ("hiit", "HIIT")
                ] if kw in t),
                "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
            )
            st["diaries"]["train"].append({"ts": now_ts(), "text": desc or "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "type": t_type, "avg_hr": hrm, "kcal": kcal})
            add_kcal_out(st, kcal)
            add_points(st, 3)
            eat, burn = day_totals(st)
            k = calc_kbju_weight_loss(st["profile"]) if profile_complete(st["profile"]) else None
            msg = f"–ó–∞–ø–∏—Å–∞–ª: {t_type}{', –ø—É–ª—å—Å '+str(hrm) if hrm else ''}, ~{kcal} –∫–∫–∞–ª. +3 –±–∞–ª–ª–∞. ‚úÖ\n–°–µ–≥–æ–¥–Ω—è: —Å—ä–µ–¥–µ–Ω–æ ~{eat} –∫–∫–∞–ª; —Å–æ–∂–∂–µ–Ω–æ ~{burn} –∫–∫–∞–ª."
            if k:
                msg += f" –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ~{k['target_kcal']} –∫–∫–∞–ª/—Å—É—Ç. üìä"
            await update.message.reply_text(msg, reply_markup=role_keyboard("trainer"))
            st["awaiting"] = None

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ ---
        elif awaiting == "workout_days":
            if text not in ("3", "7"):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 3 –∏–ª–∏ 7.", reply_markup=ReplyKeyboardMarkup([["3", "7"]], resize_keyboard=True))
                return
            st["tmp"]["workout_days"] = int(text)
            st["awaiting"] = "workout_location"
            await update.message.reply_text("–ì–¥–µ –±—É–¥–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardMarkup(LOCATION_KB, resize_keyboard=True))
        elif awaiting == "workout_location":
            if text not in ("–î–æ–º", "–ó–∞–ª", "–£–ª–∏—Ü–∞"):
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –î–æ–º | –ó–∞–ª | –£–ª–∏—Ü–∞ üôÇ", reply_markup=ReplyKeyboardMarkup(LOCATION_KB, resize_keyboard=True))
                return
            st["tmp"]["workout_place"] = text
            if text == "–ó–∞–ª":
                await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")
                plan = await generate_workout_via_llm(st["profile"], "–ó–∞–ª", "—Å—Ä–µ–¥–Ω—è—è –æ—Å–Ω–∞—â—ë–Ω–Ω–æ—Å—Ç—å –∑–∞–ª–∞", "", days=st["tmp"].get("workout_days"))
                st["tmp"]["last_workout"] = plan
                add_points(st, 5)
                st["awaiting"] = None
                msg = await update.message.reply_text(plan, reply_markup=yes_no_kb("save_workout"))
                st["tmp"]["last_workout_link"] = getattr(msg, "link", "")
                await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω? üôÇ", reply_markup=role_keyboard("trainer"))
            else:
                st["awaiting"] = "workout_inventory"
                await update.message.reply_text("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—Å—Ç—å? (—ç—Å–ø–∞–Ω–¥–µ—Ä, –≥–∞–Ω—Ç–µ–ª–∏‚Ä¶) –ò–ª–∏ ¬´–Ω–µ—Ç¬ª. ‚úçÔ∏è", reply_markup=ReplyKeyboardRemove())
        elif awaiting == "workout_inventory":
            inv = text or "–Ω–µ—Ç"
            st["tmp"]["last_inventory"] = inv
            place = st["tmp"].get("workout_place", "–î–æ–º")
            await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")
            plan = await generate_workout_via_llm(st["profile"], place, inv, "", days=st["tmp"].get("workout_days"))
            st["tmp"]["last_workout"] = plan
            add_points(st, 5)
            st["awaiting"] = None
            msg = await update.message.reply_text(plan, reply_markup=yes_no_kb("save_workout"))
            st["tmp"]["last_workout_link"] = getattr(msg, "link", "")
            await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω? üôÇ", reply_markup=role_keyboard("trainer"))
        elif awaiting == "menu_changes":
            changes = "" if text.lower() == "–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" else text
            st["profile"]["preferences"]["menu_notes"] = changes or st["profile"]["preferences"].get("menu_notes", "")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç B –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—é
            current_day = get_current_menu_day(st)
            menu_items = get_menu_for_day(current_day, "b")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç B –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—é

            k = calc_kbju_weight_loss(st["profile"])
            await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")

            if not menu_items:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                plan = await generate_menu_via_llm(st["profile"], k["target_kcal"], changes)
            else:
                plan = await generate_menu_with_nutrition(st["profile"], menu_items, k["target_kcal"], changes)

            st["tmp"]["last_menu"], st["tmp"]["last_menu_kcal_target"] = plan, k["target_kcal"]
            add_points(st, 5)
            st["awaiting"] = "confirm_save_menu"
            await update.message.reply_text(plan, reply_markup=yes_no_kb("save_menu"))
            await update.message.reply_text("–ó–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –≤ –¥–Ω–µ–≤–Ω–∏–∫?", reply_markup=role_keyboard("nutri"))
        elif awaiting == "workout_changes":
            changes = "" if text.lower() == "–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" else text
            st["profile"]["preferences"]["workout_notes"] = changes or st["profile"]["preferences"].get("workout_notes", "")
            place = st["tmp"].get("workout_place", "–î–æ–º")
            inventory = st["tmp"].get("last_inventory", "–Ω–µ—Ç")
            await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")
            plan = await generate_workout_via_llm(st["profile"], place, inventory, changes, days=st["tmp"].get("workout_days"))
            st["tmp"]["last_workout"] = plan
            add_points(st, 5)
            st["awaiting"] = None
            msg = await update.message.reply_text(plan, reply_markup=yes_no_kb("save_workout"))
            st["tmp"]["last_workout_link"] = getattr(msg, "link", "")
            await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω? üôÇ", reply_markup=role_keyboard("trainer"))

        # --- –ó–æ–Ω—ã / VO2 ---
        elif awaiting == "zones_hrrest":
            try:
                hrrest = int(text)
                assert 35 <= hrrest <= 110
                z = pulse_zones(int(st["profile"]["age"]), hrrest)
                st["diaries"]["metrics"].append({"ts": now_ts(), "type": "zones", "data": {"hrrest": hrrest, "zones": z}})
                txt = (
                    "–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ß–°–° ‚ù§Ô∏è (—É–¥/–º–∏–Ω):\n"
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {z['recovery'][0]}‚Äì{z['recovery'][1]}\n–ê—ç—Ä–æ–±–Ω–∞—è –±–∞–∑–∞: {z['aerobic'][0]}‚Äì{z['aerobic'][1]}\n"
                    f"–¢–µ–º–ø–æ–≤–∞—è: {z['tempo'][0]}‚Äì{z['tempo'][1]}\nVO2max: {z['vo2'][0]}‚Äì{z['vo2'][1]}\n–ê–Ω–∞—ç—Ä–æ–±–Ω–∞—è: {z['anaer'][0]}‚Äì{z['anaer'][1]}"
                )
                await update.message.reply_text(txt, reply_markup=role_keyboard("trainer"))
                st["awaiting"] = None
            except Exception:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É–ª—å—Å –≤ –ø–æ–∫–æ–µ (—á–∏—Å–ª–æ –æ—Ç 35 –¥–æ 110). üôÇ")
        elif awaiting == "vo2_value":
            try:
                vo2 = float(text.replace(",", "."))
                cat = vo2_category(st["profile"].get("gender", "–ú—É–∂—Å–∫–æ–π"), vo2)
                st["diaries"]["metrics"].append({"ts": now_ts(), "type": "vo2", "data": {"vo2": vo2, "cat": cat}})
                if award_once(st, "vo2_manual"):
                    add_points(st, 2)
                await update.message.reply_text(f"VO2max: {vo2:.1f} ‚Äî {cat}. –ó–∞–ø–∏—Å–∞–Ω–æ. ‚úÖ", reply_markup=role_keyboard("trainer"))
                st["awaiting"] = None
            except Exception:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 42. üôÇ")

        # --- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ ---
        elif awaiting == "recipe_category":
            if text == "üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏":
                await show_recipe_category(update, context, "–∑–∞–≤—Ç—Ä–∞–∫", st)
                return
            elif text == "üçΩÔ∏è –û–±–µ–¥—ã":
                await show_recipe_category(update, context, "–æ–±–µ–¥", st)
                return
            elif text == "üåô –£–∂–∏–Ω—ã":
                await show_recipe_category(update, context, "—É–∂–∏–Ω", st)
                return
            elif text == "‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç":
                await show_random_recipe(update, context, st)
                return
            elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                st["current_role"] = None
                st["awaiting"] = None
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_keyboard(None))
                return
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
                return

        # --- –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ ---
        elif awaiting == "recipe_number":
            if text in ("üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏", "üçΩÔ∏è –û–±–µ–¥—ã", "üåô –£–∂–∏–Ω—ã", "‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                st["awaiting"] = "recipe_category"
                await handle_text_or_photo(update, context)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                return
            elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                st["current_role"] = None
                st["awaiting"] = None
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_keyboard(None))
                return

            try:
                recipe_num = int(text)
                category_recipes = st["tmp"].get("category_recipes", [])
                if 1 <= recipe_num <= min(5, len(category_recipes)):
                    recipe_dict = category_recipes[recipe_num - 1]
                    # –°–æ–∑–¥–∞–µ–º Recipe –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    recipe = Recipe(
                        id=recipe_dict["id"],
                        title=recipe_dict["title"],
                        category=recipe_dict["category"],
                        kcal=recipe_dict["kcal"],
                        protein_g=recipe_dict["protein_g"],
                        fat_g=recipe_dict["fat_g"],
                        carbs_g=recipe_dict["carbs_g"],
                        steps=recipe_dict["steps"],
                        ingredients=recipe_dict.get("ingredients")
                    )
                    await show_recipe_detail(update, context, recipe, st)
                else:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 5 –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return

        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ ---
        elif awaiting == "add_recipe_to_diary":
            if text.lower() == "–¥–∞":
                current_recipe = st["tmp"].get("current_recipe")
                if current_recipe:
                    st["diaries"]["food"].append({
                        "ts": now_ts(),
                        "text": f"–†–µ—Ü–µ–ø—Ç: {current_recipe['title']}",
                        "kcal": current_recipe["kcal"],
                        "p": current_recipe["protein_g"],
                        "f": current_recipe["fat_g"],
                        "c": current_recipe["carbs_g"]
                    })
                    add_kcal_in(st, current_recipe["kcal"])
                    add_points(st, 2)
                    await update.message.reply_text(
                        "–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫! +2 –±–∞–ª–ª–∞ ‚úÖ",
                        reply_markup=ReplyKeyboardMarkup([
                            [KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏"), KeyboardButton("üçΩÔ∏è –û–±–µ–¥—ã")],
                            [KeyboardButton("üåô –£–∂–∏–Ω—ã"), KeyboardButton("‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
                            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                        ], resize_keyboard=True)
                    )
                st["awaiting"] = "recipe_category"
            elif text.lower() == "–Ω–µ—Ç":
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏"), KeyboardButton("üçΩÔ∏è –û–±–µ–¥—ã")],
                        [KeyboardButton("üåô –£–∂–∏–Ω—ã"), KeyboardButton("‚ú® –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
                        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                    ], resize_keyboard=True)
                )
                st["awaiting"] = "recipe_category"
            elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                st["current_role"] = None
                st["awaiting"] = None
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_keyboard(None))
            else:
                await update.message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
            return

        # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è ---
        elif awaiting == "edit_food_diary":
            if text.lower() == "–æ—Ç–º–µ–Ω–∞":
                st["awaiting"] = None
                await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=role_keyboard(st.get("current_role")))
                return

            if text.lower() == "–≤—Å–µ":
                foods = st["diaries"].get("food", [])
                if foods:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —É–¥–∞–ª—è–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    total_kcal = sum(entry.get("kcal", 0) for entry in foods)
                    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
                    st["diaries"]["food"] = []
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
                    day = ensure_day(st)
                    day["in"] = max(0, day["in"] - total_kcal)

                    await update.message.reply_text(
                        f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è ({len(foods)} –∑–∞–ø–∏—Å–µ–π, -{total_kcal} –∫–∫–∞–ª)",
                        reply_markup=role_keyboard(st.get("current_role"))
                    )
                else:
                    await update.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è —É–∂–µ –ø—É—Å—Ç.", reply_markup=role_keyboard(st.get("current_role")))
                st["awaiting"] = None
                return

            try:
                entry_num = int(text)
                foods = st["diaries"].get("food", [])
                display_count = min(10, len(foods))

                if 1 <= entry_num <= display_count:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π
                    actual_index = len(foods) - display_count + entry_num - 1
                    removed_entry = foods.pop(actual_index)

                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
                    removed_kcal = removed_entry.get("kcal", 0)
                    day = ensure_day(st)
                    day["in"] = max(0, day["in"] - removed_kcal)

                    entry_text = removed_entry.get('text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    if len(entry_text) > 50:
                        entry_text = entry_text[:47] + "..."

                    await update.message.reply_text(
                        f"–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {entry_text} (-{removed_kcal} –∫–∫–∞–ª)",
                        reply_markup=role_keyboard(st.get("current_role"))
                    )
                    st["awaiting"] = None
                else:
                    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {display_count}, '–≤—Å–µ' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, '–≤—Å–µ' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
            return

        # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ---
        elif awaiting == "edit_train_diary":
            if text.lower() == "–æ—Ç–º–µ–Ω–∞":
                st["awaiting"] = None
                await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=role_keyboard(st.get("current_role")))
                return

            if text.lower() == "–≤—Å–µ":
                trains = st["diaries"].get("train", [])
                if trains:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —É–¥–∞–ª—è–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    total_kcal = sum(entry.get("kcal", 0) for entry in trains)
                    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
                    st["diaries"]["train"] = []
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
                    day = ensure_day(st)
                    day["out"] = max(0, day["out"] - total_kcal)

                    await update.message.reply_text(
                        f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ({len(trains)} –∑–∞–ø–∏—Å–µ–π, -{total_kcal} –∫–∫–∞–ª)",
                        reply_markup=role_keyboard(st.get("current_role"))
                    )
                else:
                    await update.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É–∂–µ –ø—É—Å—Ç.", reply_markup=role_keyboard(st.get("current_role")))
                st["awaiting"] = None
                return

            try:
                entry_num = int(text)
                trains = st["diaries"].get("train", [])
                display_count = min(10, len(trains))

                if 1 <= entry_num <= display_count:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π
                    actual_index = len(trains) - display_count + entry_num - 1
                    removed_entry = trains.pop(actual_index)

                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
                    removed_kcal = removed_entry.get("kcal", 0)
                    day = ensure_day(st)
                    day["out"] = max(0, day["out"] - removed_kcal)

                    entry_text = removed_entry.get('text', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
                    if len(entry_text) > 50:
                        entry_text = entry_text[:47] + "..."

                    await update.message.reply_text(
                        f"–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {entry_text} (-{removed_kcal} –∫–∫–∞–ª)",
                        reply_markup=role_keyboard(st.get("current_role"))
                    )
                    st["awaiting"] = None
                else:
                    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {display_count}, '–≤—Å–µ' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, '–≤—Å–µ' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
            return

        # --- –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
        elif awaiting == "search_product":
            if not text:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
                return

            await update.message.reply_text("üîç –ò—â—É –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –ù–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: USDA (–Ω–∞—Ç—É—Ä–∞–ª–∫–∞) ‚Üí Google CSE/JSON-LD ‚Üí Vision (–±—Ä–µ–Ω–¥)
            search_result = await search_product_on_internet(text)
            if search_result:
                # ---------- helpers ----------
                def _parse_amounts(s: str):
                    grams = ml = None
                    def _f(x): return float(x.replace(',', '.'))
                    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(–∫–≥|kg)\b', s, flags=re.I):
                        grams = (grams or 0) + _f(m.group(1)) * 1000
                    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|g|grams?)\b', s, flags=re.I):
                        grams = (grams or 0) + _f(m.group(1))
                    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(?:–ª|l|–ª–∏—Ç—Ä(?:–∞|–æ–≤)?)\b', s, flags=re.I):
                        ml = (ml or 0) + _f(m.group(1)) * 1000
                    for m in re.finditer(r'(\d+(?:[.,]\d+)?)\s*(?:–º–ª|ml|milliliter[s]?)\b', s, flags=re.I):
                        ml = (ml or 0) + _f(m.group(1))
                    return grams, ml
                def _fmt(x, digits=1, unit=" –≥"):
                    return (f"{x:.{digits}f}{unit}" if x is not None else "‚Äî –≥")
                def _fmt_kcal(x):
                    return (f"{x:.0f} –∫–∫–∞–ª" if x is not None else "‚Äî –∫–∫–∞–ª")
                def _scale_portion(res: dict, q_text: str):
                    # –µ—Å–ª–∏ –∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ—Ä—Ü–∏—é ‚Äî –≤—ã–¥—ë—Ä–Ω–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    g = res.get("portion_g"); m = res.get("portion_ml")
                    if g is None and m is None:
                        gg, mm = _parse_amounts(q_text)
                        if gg: res["portion_g"] = g = gg
                        if mm: res["portion_ml"] = m = mm
                    # –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ü–∏—é
                    if g and res.get("kcal_100g") is not None:
                        k = g / 100.0
                        res["kcal_portion"]    = res["kcal_100g"]    * k
                        res["protein_portion"] = (res.get("protein_100g") or 0) * k if res.get("protein_100g") is not None else None
                        res["fat_portion"]     = (res.get("fat_100g")     or 0) * k if res.get("fat_100g")     is not None else None
                        res["carbs_portion"]   = (res.get("carbs_100g")   or 0) * k if res.get("carbs_100g")   is not None else None
                    elif m and res.get("kcal_100ml") is not None:
                        k = m / 100.0
                        res["kcal_portion"]    = res["kcal_100ml"]    * k
                        res["protein_portion"] = (res.get("protein_100ml") or 0) * k if res.get("protein_100ml") is not None else None
                        res["fat_portion"]     = (res.get("fat_100ml")     or 0) * k if res.get("fat_100ml")     is not None else None
                        res["carbs_portion"]   = (res.get("carbs_100ml")   or 0) * k if res.get("carbs_100ml")   is not None else None
                    return res
                # –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É –∏ –¥–æ—Å—á–∏—Ç–∞—Ç—å ¬´–Ω–∞ –ø–æ—Ä—Ü–∏—é¬ª
                search_result = _scale_portion(dict(search_result), text)

                source_map = {
                    'google_cse_jsonld': 'üîé Google (JSON-LD)',
                    'google_cse_regex':  'üîé Google (—Å—Ç—Ä–∞–Ω–∏—Ü–∞)',
                    'vision_ocr':        'üñºÔ∏è Google Vision OCR',
                    'usda':              'üåø USDA FDC'
                }
                source = source_map.get(search_result.get('source'), 'üîé –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω')

                lines = [
                    f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:",
                    f"üì¶ {search_result.get('name') or '‚Äî'}",
                ]

                if search_result.get('brand'):
                    lines.append(f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {search_result['brand']}")

                # –ë–ª–æ–∫ ¬´–ü–æ—Ä—Ü–∏—è¬ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≥—Ä–∞–º–º—ã/–º–ª
                if search_result.get("portion_g") or search_result.get("portion_ml"):
                    portion_line = f"‚öñÔ∏è –ü–æ—Ä—Ü–∏—è: {int(search_result.get('portion_g') or 0)} –≥" if search_result.get("portion_g") \
                                   else f"‚öñÔ∏è –ü–æ—Ä—Ü–∏—è: {int(search_result.get('portion_ml') or 0)} –º–ª"
                    lines.extend([
                        "",
                        portion_line,
                        "üìä –ù–∞ –ø–æ—Ä—Ü–∏—é:",
                        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {_fmt_kcal(search_result.get('kcal_portion'))}",
                        f"ü•© –ë–µ–ª–∫–∏: {_fmt(search_result.get('protein_portion'))}",
                        f"ü•ë –ñ–∏—Ä—ã: {_fmt(search_result.get('fat_portion'))}",
                        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {_fmt(search_result.get('carbs_portion'))}",
                    ])

                # –ë–ª–æ–∫ ¬´–Ω–∞ 100 –≥ / 100 –º–ª¬ª (—á—Ç–æ –µ—Å—Ç—å)
                if any(search_result.get(k) is not None for k in ("kcal_100g","protein_100g","fat_100g","carbs_100g")):
                    lines.extend([
                        "",
                        "üìä –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥:",
                        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {_fmt_kcal(search_result.get('kcal_100g'))}",
                        f"ü•© –ë–µ–ª–∫–∏: {_fmt(search_result.get('protein_100g'))}",
                        f"ü•ë –ñ–∏—Ä—ã: {_fmt(search_result.get('fat_100g'))}",
                        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {_fmt(search_result.get('carbs_100g'))}",
                    ])
                elif any(search_result.get(k) is not None for k in ("kcal_100ml","protein_100ml","fat_100ml","carbs_100ml")):
                    lines.extend([
                        "",
                        "üìä –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100 –º–ª:",
                        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {_fmt_kcal(search_result.get('kcal_100ml'))}",
                        f"ü•© –ë–µ–ª–∫–∏: {_fmt(search_result.get('protein_100ml'))}",
                        f"ü•ë –ñ–∏—Ä—ã: {_fmt(search_result.get('fat_100ml'))}",
                        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {_fmt(search_result.get('carbs_100ml'))}",
                    ])

                lines.extend(["", f"üí° –ò—Å—Ç–æ—á–Ω–∏–∫: {source}"])

                await update.message.reply_text("\n".join(lines), reply_markup=role_keyboard("nutri"))
            else:
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                    "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
                    reply_markup=role_keyboard("nutri")
                )
            st["awaiting"] = None

        # --- –î–∏–∞–ª–æ–≥ —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏ ---
        elif awaiting in ("ask_nutri", "ask_trainer") or st.get("current_role") in ("nutri", "trainer") and text:
            if not text:
                return
            role = "nutri" if awaiting == "ask_nutri" else "trainer" if awaiting == "ask_trainer" else st.get("current_role")
            await update.message.reply_text("–î—É–º–∞—é‚Ä¶ ü§î")
            ans = await chat_llm([{"role": "system", "content": persona_system(role, st["profile"])}, {"role": "user", "content": text}])
            await update.message.reply_text(ans, reply_markup=role_keyboard(role))
            st["awaiting"] = None
        elif text:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ. üôÇ", reply_markup=role_keyboard(st.get("current_role")))
    except Exception as e:
        logger.exception(f"An error occurred in handler: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /start. üôè")
    finally:
        save_state(u.id, st)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query, u = update.callback_query, update.effective_user
    data = query.data or ""
    st = load_state(u.id)
    try:
        await query.answer()
        if data.startswith("buy:"):
            tier = data.split(":", 1)[1]
            await send_invoice_for_subscription(update, context, tier)
            await query.edit_message_reply_markup(None)
            return

        if data.startswith("save_menu:"):
            answer = data.split(":", 1)[1]
            if answer == "yes":
                last_menu = st["tmp"].get("last_menu", "")
                kcal_match = re.search(r"–ò—Ç–æ–≥–æ(?:\s+–∑–∞\s+–¥–µ–Ω—å)?:\s*~?(\d+)\s*–∫–∫–∞–ª", last_menu)
                kcal = int(kcal_match.group(1)) if kcal_match else int(st["tmp"].get("last_menu_kcal_target", 0))

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                protein = fat = carbs = 0
                bju_patterns = [
                    r"–ë[:\s]*(\d+)[:\s]*–≥.*?–ñ[:\s]*(\d+)[:\s]*–≥.*?–£[:\s]*(\d+)[:\s]*–≥",
                    r"–ë(\d+)/–ñ(\d+)/–£(\d+)",
                    r"–ë(\d+)\s*/\s*–ñ(\d+)\s*/\s*–£(\d+)",
                    r"–±–µ–ª–∫–∏?\s*[:\-]?\s*(\d+).*?–∂–∏—Ä—ã?\s*[:\-]?\s*(\d+).*?—É–≥–ª–µ–≤–æ–¥—ã?\s*[:\-]?\s*(\d+)",
                ]

                for pattern in bju_patterns:
                    bju_match = re.search(pattern, last_menu, re.IGNORECASE)
                    if bju_match:
                        protein = int(bju_match.group(1))
                        fat = int(bju_match.group(2))
                        carbs = int(bju_match.group(3))
                        break

                if kcal > 0:
                    add_kcal_in(st, kcal)
                    st["diaries"]["food"].append({
                        "ts": now_ts(),
                        "text": f"–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å: {last_menu}",
                        "kcal": kcal,
                        "p": protein,
                        "f": fat,
                        "c": carbs
                    })
                    add_points(st, 2)
                    await query.edit_message_text(query.message.text + f"\n\n–ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –≤ –¥–Ω–µ–≤–Ω–∏–∫: +{kcal} –∫–∫–∞–ª (–ë{protein}/–ñ{fat}/–£{carbs})")
                else:
                    await query.edit_message_text(query.message.text + "\n\n–ù–µ –Ω–∞—à—ë–ª –∏—Ç–æ–≥–æ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Ç—Ä–∞–ø–µ–∑—ã –≤—Ä—É—á–Ω—É—é.")
            else:
                await query.edit_message_text(query.message.text + "\n\nüëç –û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é –ø–ª–∞–Ω.")
            st["tmp"].pop("last_menu", None)
            st["tmp"].pop("last_menu_kcal_target", None)
        elif data.startswith("save_workout:"):
            answer = data.split(":", 1)[1]
            if answer == "yes":
                last_workout = st["tmp"].get("last_workout", "")
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –ø–ª–∞–Ω—É
                weekly_kcal = get_weekly_training_kcal(last_workout)
                if weekly_kcal <= 0:
                    kcal_match = re.search(r"–ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:\s*~?(\d+)\s*–∫–∫–∞–ª", last_workout)
                    weekly_kcal = int(kcal_match.group(1)) if kcal_match else 1500
                daily_kcal = weekly_kcal // 7  # –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–µ–ª–∏–º –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

                st["diaries"]["train"].append({
                    "ts": now_ts(),
                    "text": f"–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω (–Ω–µ–¥–µ–ª—è)",
                    "type": "–ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                    "kcal": daily_kcal
                })
                st["profile"]["workout_plan"] = last_workout
                st["profile"]["workout_plan_link"] = st["tmp"].get("last_workout_link", "")
                st["profile"]["workout_weekly_kcal"] = weekly_kcal
                add_points(st, 2)
                await query.edit_message_text(query.message.text + "\n\n‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ (+2 –±–∞–ª–ª–∞).")
            else:
                await query.edit_message_text(query.message.text + "\n\nüëç –û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é –ø–ª–∞–Ω.")
            st["tmp"].pop("last_workout", None)
            st["tmp"].pop("last_workout_link", None)
    except Exception as e:
        logger.exception(f"Callback error: {e}")
        await query.answer("–û—à–∏–±–∫–∞.")
    finally:
        save_state(u.id, st)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception(f"Update {update} caused error {context.error}")

# =========================
# LLM client factory
# =========================

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LLM_PROVIDER=gemini –¥–ª—è Gemini API.
LLM_PROVIDER = os.getenv("LLM_PROVIDER", "openai").strip().lower()  # "openai" | "gemini"
GEMINI_API_KEY = get_secret("GEMINI_API_KEY", "")
GEMINI_BASE_URL = os.getenv(
    "GEMINI_BASE_URL",
    "https://generativelanguage.googleapis.com/v1beta/openai/"
).strip()
MODEL_JSON = os.getenv("MODEL_JSON", "gemini-1.5-flash")

def _make_chat_client() -> OpenAI:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç:
    - –ø—Ä–∏ LLM_PROVIDER=openai: –æ–±—ã—á–Ω—ã–π OpenAI
    - –ø—Ä–∏ LLM_PROVIDER=gemini: —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç Gemini (AI Studio)
    """
    if LLM_PROVIDER == "gemini":
        api_key = GEMINI_API_KEY
        if not api_key:
            raise RuntimeError("GEMINI_API_KEY –ø—É—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –¥–ª—è Gemini API.")
        
        return OpenAI(
            api_key=api_key,
            base_url=GEMINI_BASE_URL,
            timeout=30.0
        )
    else:  # openai
        api_key = OPENAI_API_KEY
        if not api_key:
            raise RuntimeError("OPENAI_API_KEY –ø—É—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –¥–ª—è OpenAI API.")
        
        return OpenAI(
            api_key=api_key,
            timeout=30.0
        )

def _safe_json_parse(content: str) -> dict | None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π markdown –±–ª–æ–∫–æ–≤"""
    if not content:
        return None
    
    # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ ```json ... ```
    content = re.sub(r'^```(?:json)?\s*\n?|```\s*$', '', content.strip(), flags=re.MULTILINE)
    content = content.strip()
    
    try:
        return json.loads(content)
    except json.JSONDecodeError as e:
        logger.warning(f"JSON parse error: {e}, content: {content[:200]}")
        return None

# ========= –ü–û–ò–°–ö –ü–†–û–î–£–ö–¢–û–í –ò –ê–ù–ê–õ–ò–ó –ü–ò–¢–ê–¢–ï–õ–¨–ù–û–°–¢–ò =========
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞
client = None
try:
    if OPENAI_API_KEY or GEMINI_API_KEY:
        client = _make_chat_client()
        logger.info(f"LLM client initialized: provider={LLM_PROVIDER}, available=‚úÖ")
    else:
        logger.warning("No API keys found for LLM providers")
except Exception as e:
    logger.warning(f"Failed to initialize LLM client: {e}")
    client = None

def is_branded_product(query: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –±—Ä–µ–Ω–¥–æ–≤—ã–º"""
    branded_keywords = {
        'bombbar', '–¥–∞–Ω–æ–Ω', 'danone', 'activia', 'nestle', 'milka', 'snickers', 
        'mars', 'protein', 'pancake', 'bar', '–±–∞—Ç–æ–Ω—á–∏–∫', '–π–æ–≥—É—Ä—Ç', '—Ç–≤–æ—Ä–æ–∂–æ–∫',
        '–Ω–∞–ø–∏—Ç–æ–∫', '–∫–æ–∫—Ç–µ–π–ª—å', 'shake'
    }
    
    query_lower = query.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if any(keyword in query_lower for keyword in branded_keywords):
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
    if re.search(r'\b\d{8,14}\b', query):
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (—á–∞—Å—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –±—Ä–µ–Ω–¥–æ–≤)
    if re.search(r'[a-zA-Z]', query) and len(query.split()) <= 4:
        return True
    
    return False

async def chat_llm(messages: List[Dict[str, str]], model: str = None, temperature: float = 0.7, json_mode: bool = False) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM API (OpenAI –∏–ª–∏ Gemini)"""
    if not client:
        logger.warning("LLM client is not initialized")
        return "–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if not model:
        if LLM_PROVIDER == "gemini":
            model = MODEL_JSON if json_mode else "gemini-1.5-flash"
        else:
            model = MODEL_NAME
    
    try:
        def _call_llm():
            call_params = {
                "model": model,
                "messages": messages,
                "temperature": temperature
            }
            
            # –î–ª—è JSON-—Ä–µ–∂–∏–º–∞
            if json_mode:
                call_params["response_format"] = {"type": "json_object"}
            
            return client.chat.completions.create(**call_params)
        
        response = await asyncio.to_thread(_call_llm)
        content = response.choices[0].message.content
        
        if not content:
            logger.warning("Empty response from LLM")
            return "–ò–ò –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
        
        logger.info(f"LLM response received from {LLM_PROVIDER}, model: {model}")
        return content
        
    except Exception as e:
        logger.error(f"LLM API error ({LLM_PROVIDER}): {e}")
        return f"–û—à–∏–±–∫–∞ –ò–ò ({LLM_PROVIDER}): –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."

def normalize_result(search_result: Dict[str, Any]) -> Dict[str, Any]:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç kJ->kcal, –ø–∞—Ä—Å–∏—Ç '733 –∫–∫–∞–ª/100–≥' –∏ —Ç.–¥."""
    result = search_result.copy()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–æ—Ä–∏–π - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º kJ –∏ –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏
    kcal_keys = ['kcal_100g', 'energy-kcal_100g', 'energy_kcal_100g', 'kcal_serv']
    for key in kcal_keys:
        if key in result:
            kcal_val = result[key]
            if isinstance(kcal_val, str):
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "733 –∫–∫–∞–ª/100 –≥"
                kcal_match = re.search(r'(\d+(?:\.\d+)?)', str(kcal_val))
                if kcal_match:
                    kcal_val = float(kcal_match.group(1))
                else:
                    continue
            
            if isinstance(kcal_val, (int, float)):
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ > 500 –∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è kcal, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ kJ
                if kcal_val > 500 and 'kj' in str(result.get(key, '')).lower():
                    result[key] = kcal_val / 4.184  # kJ -> kcal
                elif kcal_val > 1000:  # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è kJ
                    result[key] = kcal_val / 4.184
                else:
                    result[key] = kcal_val
    
    return result

# –µ—Å–ª–∏ JSON-LD –¥–∞–ª —á–∏—Å–ª–∞ ¬´–Ω–∞ –ø–æ—Ä—Ü–∏—é¬ª, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –≤ ¬´–Ω–∞ 100 –≥¬ª
def _fix_portion_leak(res: dict) -> dict:
    r = dict(res)
    s = r.get("serving_g") or r.get("portion_g")
    if not s or s <= 0: 
        return r
    def maybe_fix(kind: str):
        serv = r.get(f"{kind}_serv") or r.get(f"{kind}_portion")
        m100 = r.get(f"{kind}_100g")
        if serv is None: 
            return
        exp = serv * 100.0 / s
        # –µ—Å–ª–∏ ¬´–Ω–∞ 100 –≥¬ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ò–õ–ò —è–≤–Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º ‚Äî –ø–µ—Ä–µ–ø–∏—à–µ–º
        if (m100 is None) or (abs(exp - m100) / max(1.0, exp) > 0.5):
            r[f"{kind}_100g"] = exp
    for k in ("kcal","protein","fat","carbs"):
        maybe_fix(k)
    return r

# –∂–µ—Å—Ç–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—é –¥–ª—è —à–æ–∫–æ–ª–∞–¥–∞/–±–∞—Ç–æ–Ω—á–∏–∫–æ–≤ –∏ –ø—Ä.
def _hard_plausible(res: dict, cat: str | None) -> bool:
    if not cat: 
        return True
    # —à–æ–∫–æ–ª–∞–¥ —Å –∂–∏—Ä–æ–º < 10 –≥/100 –≥ ‚Äî –ø–æ—á—Ç–∏ —Ç–æ—á–Ω–æ –º—É—Å–æ—Ä
    if cat == "chocolate" and (res.get("fat_100g") is not None) and (res["fat_100g"] < 10):
        return False
    return _plausible(res, cat)

def _plausible_branded(d):
    """–ú—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    return (d.get("kcal_100g") or d.get("kcal_100ml")) and (
        d.get("protein_100g") or d.get("fat_100g") or d.get("carbs_100g") or
        d.get("protein_100ml") or d.get("fat_100ml") or d.get("carbs_100ml")
    )

async def _gpt_extract_nutrition(text: str) -> Optional[dict]:
    """Fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º –ö–ë–ñ–£ —á–µ—Ä–µ–∑ LLM"""
    if not client:
        return None
    try:
        prompt = f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–¢–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∞:
{text[:5000]}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
  "kcal_serv": —á–∏—Å–ª–æ –∏–ª–∏ null,
  "protein_serv": —á–∏—Å–ª–æ –∏–ª–∏ null, 
  "fat_serv": —á–∏—Å–ª–æ –∏–ª–∏ null,
  "carb_serv": —á–∏—Å–ª–æ –∏–ª–∏ null,
  "serving_g": 100
}}

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –≤–µ—Ä–Ω–∏: {{"serving_g": 100}}"""
        
        content = await chat_llm([
            {"role": "system", "content": "–¢—ã –∏–∑–≤–ª–µ–∫–∞–µ—à—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."},
            {"role": "user", "content": prompt}
        ], temperature=0, json_mode=True)
        
        # –ü–∞—Ä—Å–∏–º JSON —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        parsed = _safe_json_parse(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        if parsed and any(parsed.get(k) for k in ["kcal_serv", "protein_serv", "fat_serv", "carb_serv"]):
            logger.info(f"LLM extracted nutrition: {parsed}")
            return parsed
        
        logger.info("LLM returned empty or invalid nutrition data")
        return None
        
    except Exception as e:
        logger.warning(f"LLM nutrition extractor failed: {e}")
        return None

async def search_product_on_internet(user_text: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ LLM"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LLM
        info = await call_llm_normalizer(user_text)
        if not info:
            info = _heuristic_normalize(user_text)
        
        grams = info.get("portion_grams")
        mills = info.get("portion_ml")
        
        # –ë—Ä–µ–Ω–¥–æ–≤—ã–π –ø–æ–∏—Å–∫
        if info.get("query_type") == "brand":
            r = await search_branded_product_via_google(user_text)
            if r: 
                r['source'] = 'google_cse_jsonld'  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
                return r
        
        # –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ USDA
        if info.get("query_type") == "natural" and info.get("usda_queries"):
            for query in info["usda_queries"]:
                r = await search_usda_fdc_product(query, info.get("base_en"))
                if r:
                    r['source'] = 'usda'
                    return r
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å ‚Äî USDA –ø–æ —Å—ã—Ä–æ–º—É —Ç–µ–∫—Å—Ç—É (–Ω–∞—Ç—É—Ä–∞–ª–∫–∞)
        r = await search_usda_fdc_product(user_text)
        if r:
            r['source'] = 'usda'
        return r
        
    except Exception as e:
        logger.error(f"search_product_on_internet error: {e}")
        return None

async def ai_meal_json(profile: Dict[str, Any], user_text: str) -> Optional[Dict[str, Any]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ö–ë–ñ–£ –Ω–∞ 100–≥ –∏ –Ω–∞ –ø–æ—Ä—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info(f"=== AI MEAL SEARCH START ===")
        logger.info(f"Query: '{user_text}'")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò
        normalized = await call_llm_normalizer(user_text)
        logger.info(f"Normalized query: {normalized}")
        
        route_info = route_query_with_ai(normalized, user_text)
        logger.info(f"Route info: {route_info}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä–∞–º–º—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def extract_portion_grams(text: str) -> Optional[float]:
            m = re.search(r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|g|grams?)\b', text, re.I)
            return float(m.group(1).replace(',', '.')) if m else None
        
        user_grams = extract_portion_grams(user_text)
        logger.info(f"User grams: {user_grams}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä—à—Ä—É—Ç–∞
        result = None
        
        if route_info["path"] == "brand":
            # –ë—Ä–µ–Ω–¥–æ–≤—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google CSE
            logger.info("=== BRANDED SEARCH ===")
            for query in route_info["queries"]:
                logger.info(f"Trying branded query: '{query}'")
                result = await search_branded_product_via_google(query)
                if result:
                    logger.info(f"Found branded result: {result.get('name', 'Unknown')}")
                    break
            
            # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Google –ø–æ–∏—Å–∫ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            if not result:
                logger.info("No branded result found, trying Google search fallback")
                result = await search_google_for_product(user_text)
                if result:
                    logger.info(f"Found via Google search fallback: {result.get('name', 'Unknown')}")
                    result['source'] = 'smart_search'
        
        elif route_info["path"] == "usda":
            # –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ USDA FDC
            logger.info("=== USDA SEARCH ===")
            for query in route_info["queries"]:
                logger.info(f"Trying USDA query: '{query}'")
                result = await search_usda_fdc_product(query, route_info.get("base_en"))
                if result:
                    logger.info(f"Found USDA result: {result.get('name', 'Unknown')}")
                    break
        
        # Fallback –ø–æ–∏—Å–∫–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if not result:
            logger.info("=== FALLBACK SEARCHES ===")
            
            # 1. FatSecret API (–µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ –±—Ä–µ–Ω–¥–æ–≤–æ–º –ø–æ–∏—Å–∫–µ)
            if FATSECRET_KEY and FATSECRET_SECRET:
                logger.info("Trying FatSecret API as fallback...")
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥
                    barcode_match = re.search(r'\b\d{8,14}\b', user_text)
                    if barcode_match:
                        barcode = barcode_match.group()
                        logger.info(f"Searching FatSecret by barcode: {barcode}")
                        fid = await _fs_find_by_barcode(barcode)
                        if fid:
                            food = await _fs_get_food(fid)
                            if food:
                                result = _fs_norm(food, user_grams, None)
                                if result and result.get('kcal_100g'):
                                    result['source'] = 'üß© FatSecret'
                                    logger.info(f"Found FatSecret result by barcode: {result.get('name', 'Unknown')}")
                    
                    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –µ—Å–ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    if not result:
                        clean_query = re.sub(r'\d+\s*(?:–≥|–≥—Ä|g|grams?)', '', user_text, flags=re.IGNORECASE).strip()
                        if clean_query:
                            logger.info(f"Searching FatSecret by name: {clean_query}")
                            food = await _fs_search_best(clean_query)
                            if food:
                                result = _fs_norm(food, user_grams, None)
                                if result and result.get('kcal_100g'):
                                    result['source'] = 'üß© FatSecret'
                                    logger.info(f"Found FatSecret result by name: {result.get('name', 'Unknown')}")
                                    
                except Exception as e:
                    logger.warning(f"FatSecret fallback search failed: {e}")
            
            # 2. –¢–∏–ø–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            if not result:
                logger.info("Trying typical nutrition data...")
                result = get_typical_nutrition(user_text)
                if result:
                    logger.info(f"Found typical data: {result.get('name', 'Unknown')}")
            
            # 2. –í–Ω–µ—à–Ω—è—è JSONL –±–∞–∑–∞
            if not result:
                logger.info("Trying external JSONL database...")
                try:
                    products = await load_external_jsonl_database()
                    logger.info(f"Loaded {len(products)} products from external database")
                    if products:
                        result = await search_external_jsonl_product(user_text, products)
                        if result:
                            logger.info(f"Found in external JSONL: {result.get('name', 'Unknown')}")
                    else:
                        logger.info("No products in external database")
                except Exception as e:
                    logger.warning(f"External JSONL search failed: {e}")
            
            # 3. Open Food Facts (–Ω–æ–≤—ã–π –º–æ–¥—É–ª—å)
            if not result and HAS_OPENFOOD:
                logger.info("Trying Open Food Facts (new module)...")
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–º—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                    grams_match = re.search(r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|g|grams?)\b', user_text, re.I)
                    user_grams_off = float(grams_match.group(1).replace(',', '.')) if grams_match else None
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã
                    barcode_match = re.search(r'\b\d{8,14}\b', user_text)
                    if barcode_match:
                        barcode = barcode_match.group()
                        logger.info(f"Detected barcode: {barcode}")
                        result = await off_by_barcode(barcode, grams=user_grams_off)
                        if result:
                            logger.info(f"Found by barcode in Open Food Facts: {result.get('name', 'Unknown')}")
                    
                    # –ï—Å–ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    if not result:
                        clean_query_off = re.sub(r'\d+\s*(?:–≥|–≥—Ä|g|grams?|–º–ª|ml)', '', user_text, flags=re.IGNORECASE).strip()
                        if clean_query_off:
                            result = await off_search_by_name(clean_query_off, grams=user_grams_off)
                            if result:
                                logger.info(f"Found by name in Open Food Facts: {result.get('name', 'Unknown')}")
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                    if not result:
                        logger.info("Trying legacy Open Food Facts...")
                        result = await search_openfoodfacts_product(user_text)
                        if result:
                            logger.info(f"Found in legacy Open Food Facts: {result.get('name', 'Unknown')}")
                        else:
                            logger.info("No results from Open Food Facts")
                except Exception as e:
                    logger.warning(f"Open Food Facts search failed: {e}")
            elif not result:
                logger.info("Trying legacy Open Food Facts...")
                try:
                    result = await search_openfoodfacts_product(user_text)
                    if result:
                        logger.info(f"Found in legacy Open Food Facts: {result.get('name', 'Unknown')}")
                    else:
                        logger.info("No results from legacy Open Food Facts")
                except Exception as e:
                    logger.warning(f"Legacy Open Food Facts search failed: {e}")
            
            # 4. Google –ø–æ–∏—Å–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
            if not result:
                logger.info("Trying Google search fallback...")
                try:
                    result = await search_google_for_product(user_text)
                    if result:
                        logger.info(f"Found via Google search: {result.get('name', 'Unknown')}")
                    else:
                        logger.info("No results from Google search")
                except Exception as e:
                    logger.warning(f"Google search failed: {e}")
        
        if not result:
            logger.info("=== NO RESULTS FOUND ===")
            return None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–π (—Ñ–∏–∫—Å–∏—Ä—É–µ–º kJ –∏ ¬´733 –∫–∫–∞–ª/100 –≥¬ª)
        result = normalize_result(result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_map = {
            'google_cse_jsonld': 'üîé Google (JSON-LD)',
            'google_cse_regex':  'üîé Google (—Å—Ç—Ä–∞–Ω–∏—Ü–∞)',
            'vision_ocr':        'üñºÔ∏è Google Vision OCR',
            'usda':              'üåø USDA FDC',
            'external_database': 'üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'openfoodfacts':     'üì¶ Open Food Facts',
            'smart_search':      'üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫',
            'fatsecret':         'üß© FatSecret',
            'üß© FatSecret':      'üß© FatSecret'
        }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–æ—Ä—Ü–∏—é
        if user_grams and user_grams != 100:
            logger.info(f"Calculating nutrition for {user_grams}g portion")
            factor = user_grams / 100.0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è notes
            source_key = result.get('source', '')
            source_url = result.get('url', '')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            source_display = source_map.get(source_key, 'üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
            
            # Fallback –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ URL –µ—Å–ª–∏ source –Ω–µ –∑–∞–¥–∞–Ω
            if not source_key:
                if 'usda' in source_url or 'fdc.nal.usda.gov' in source_url:
                    source_display = 'üåø USDA FDC'
                elif 'openfoodfacts' in source_url:
                    source_display = 'üì¶ Open Food Facts'
                elif source_url == 'external_database':
                    source_display = 'üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
                else:
                    source_display = 'üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫'
            
            notes = f"{source_display}: {result.get('name', '–ü—Ä–æ–¥—É–∫—Ç')} ({user_grams}–≥)"
            
            return {
                'kcal': int(result.get('kcal_100g', 0) * factor),
                'protein_g': round(result.get('protein_100g', 0) * factor, 1),
                'fat_g': round(result.get('fat_100g', 0) * factor, 1),
                'carbs_g': round(result.get('carbs_100g', 0) * factor, 1),
                'notes': notes,
                'source_data': {
                    'grams': user_grams,
                    'kcal_100g': result.get('kcal_100g', 0),
                    'protein_100g': result.get('protein_100g', 0),
                    'fat_100g': result.get('fat_100g', 0),
                    'carbs_100g': result.get('carbs_100g', 0)
                }
            }
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 100–≥
            source_key = result.get('source', '')
            source_url = result.get('url', '')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            source_display = source_map.get(source_key, 'üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
            
            # Fallback –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ URL –µ—Å–ª–∏ source –Ω–µ –∑–∞–¥–∞–Ω
            if not source_key:
                if 'usda' in source_url or 'fdc.nal.usda.gov' in source_url:
                    source_display = 'üåø USDA FDC'
                elif 'openfoodfacts' in source_url:
                    source_display = 'üì¶ Open Food Facts'
                elif source_url == 'external_database':
                    source_display = 'üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
                else:
                    source_display = 'üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫'
            
            notes = f"{source_display}: {result.get('name', '–ü—Ä–æ–¥—É–∫—Ç')} (100–≥)"
            
            return {
                'kcal': int(result.get('kcal_100g', 0)),
                'protein_g': round(result.get('protein_100g', 0), 1),
                'fat_g': round(result.get('fat_100g', 0), 1),
                'carbs_g': round(result.get('carbs_100g', 0), 1),
                'notes': notes,
                'source_data': {
                    'grams': 100,
                    'kcal_100g': result.get('kcal_100g', 0),
                    'protein_100g': result.get('protein_100g', 0),
                    'fat_100g': result.get('fat_100g', 0),
                    'carbs_100g': result.get('carbs_100g', 0)
                }
            }
        
    except Exception as e:
        logger.error(f"ai_meal_json error: {e}")
        return None

def get_last_hrrest(st: Dict[str, Any], default: int = 60) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –ø—É–ª—å—Å –ø–æ–∫–æ—è –∏–∑ –º–µ—Ç—Ä–∏–∫"""
    metrics = st.get("diaries", {}).get("metrics", [])
    for m in reversed(metrics):
        if isinstance(m, dict) and m.get("type") == "zones":
            data = m.get("data", {})
            hrrest = data.get("hrrest")
            if hrrest and isinstance(hrrest, int) and 35 <= hrrest <= 110:
                return hrrest
    return default

def estimate_kcal_workout(profile: Dict[str, Any], desc: str, mins: int, hrm: Optional[int] = None) -> int:
    """–û—Ü–µ–Ω–∫–∞ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    if not profile_complete(profile):
        return mins * 8  # –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    
    weight_kg = float(profile["weight_kg"])
    desc_lower = desc.lower()
    
    # –ë–∞–∑–æ–≤—ã–µ MET –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    met_values = {
        "–±–µ–≥": 10.0, "running": 10.0, "run": 10.0,
        "—Ö–æ–¥—å–±–∞": 3.5, "walking": 3.5, "walk": 3.5,
        "–≤–µ–ª–æ—Å–∏–ø–µ–¥": 8.0, "cycling": 8.0, "bike": 8.0, "–≤–µ–ª–æ": 8.0,
        "–ø–ª–∞–≤–∞–Ω–∏–µ": 8.0, "swimming": 8.0, "swim": 8.0,
        "—Å–∏–ª–æ–≤–∞—è": 6.0, "strength": 6.0, "weight": 6.0, "–≥–∞–Ω—Ç–µ–ª–∏": 6.0, "—à—Ç–∞–Ω–≥–∞": 6.0,
        "–π–æ–≥–∞": 3.0, "yoga": 3.0,
        "hiit": 12.0, "–∏–Ω—Ç–µ—Ä–≤–∞–ª": 12.0, "—Ç–∞–±–∞—Ç–∞": 12.0,
        "–∫—Ä–æ—Å—Å—Ñ–∏—Ç": 10.0, "crossfit": 10.0,
        "—Ç–µ–Ω–Ω–∏—Å": 8.0, "tennis": 8.0,
        "—Ñ—É—Ç–±–æ–ª": 9.0, "football": 9.0, "soccer": 9.0
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ MET
    met = 6.0  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for keyword, met_value in met_values.items():
        if keyword in desc_lower:
            met = met_value
            break
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É–ª—å—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if hrm:
        if hrm > 160:
            met *= 1.3  # –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        elif hrm > 140:
            met *= 1.1  # —É–º–µ—Ä–µ–Ω–Ω–æ-–≤—ã—Å–æ–∫–∞—è
        elif hrm < 120:
            met *= 0.8  # –Ω–∏–∑–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    
    # –§–æ—Ä–º—É–ª–∞: –ö–∞–ª–æ—Ä–∏–∏ = MET √ó –≤–µ—Å_–∫–≥ √ó –≤—Ä–µ–º—è_—á–∞—Å—ã
    hours = mins / 60.0
    kcal = met * weight_kg * hours
    
    return max(10, int(kcal))  # –º–∏–Ω–∏–º—É–º 10 –∫–∫–∞–ª

async def generate_menu_via_llm(profile: Dict[str, Any], target_kcal: int, changes: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ LLM"""
    if not client:
        return "–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é."
    
    allergies = profile.get("allergies", "–Ω–µ—Ç")
    conditions = profile.get("conditions", "–Ω–µ—Ç")
    goal = profile.get("goal", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")
    preferences = changes or profile.get("preferences", {}).get("menu_notes", "")
    
    system_prompt = (
        "–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–Ω—é —Å —Ç–æ—á–Ω—ã–º–∏ –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏ –∏ –ö–ë–ñ–£. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ–Ω—é. "
        "–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã # (—Ä–µ—à–µ—Ç–∫–∏) –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏. "
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏ –∏ –ö–ë–ñ–£. "
        "–§—Ä—É–∫—Ç—ã –∏ –æ—Ä–µ—Ö–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ —à—Ç—É–∫–∞—Ö —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ 150–≥ (1 —à—Ç), –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ 30–≥ (6 —à—Ç)). "
        "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏—Ç–æ–≥: '–ò—Ç–æ–≥–æ: ~X –∫–∫–∞–ª, –ë: Y –≥, –ñ: Z –≥, –£: W –≥'"
        "–í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –¥–Ω—è - –æ–±—â–∏–π –∏—Ç–æ–≥: '–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: ~X –∫–∫–∞–ª, –ë: Y –≥, –ñ: Z –≥, –£: W –≥'"
    )
    
    user_prompt = (
        f"–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ {target_kcal} –∫–∫–∞–ª –¥–ª—è:\n"
        f"–ü–æ–ª: {profile.get('gender')}, –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age')}, "
        f"–†–æ—Å—Ç: {profile.get('height_cm')} —Å–º, –í–µ—Å: {profile.get('weight_kg')} –∫–≥\n"
        f"–¶–µ–ª—å: {goal}\n"
        f"–ê–ª–ª–µ—Ä–≥–∏–∏: {allergies}\n"
        f"–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {conditions}\n"
        f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {preferences or '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–¥–æ—Ä–æ–≤–æ–µ –º–µ–Ω—é'}\n\n"
        f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: –∑–∞–≤—Ç—Ä–∞–∫, –ø–µ—Ä–µ–∫—É—Å 1, –æ–±–µ–¥, –ø–µ—Ä–µ–∫—É—Å 2, —É–∂–∏–Ω.\n"
        f"–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã # (—Ä–µ—à–µ—Ç–∫–∏). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.\n"
        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–≤–µ—Ç: '–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: ~{target_kcal} –∫–∫–∞–ª, –ë: X –≥, –ñ: Y –≥, –£: Z –≥'"
    )
    
    try:
        result = await chat_llm([
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ])
        
        # –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        result = result.replace("###", "").replace("##", "").replace("#", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å
        if not re.search(r"–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:.*?–∫–∫–∞–ª", result):
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ë–ñ–£
            protein_g = int(target_kcal * 0.25 / 4)  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –±–µ–ª–∫–∏
            fat_g = int(target_kcal * 0.25 / 9)      # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –∂–∏—Ä—ã  
            carbs_g = int(target_kcal * 0.50 / 4)    # 50% –æ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —É–≥–ª–µ–≤–æ–¥—ã
            
            result += f"\n\n–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: ~{target_kcal} –∫–∫–∞–ª, –ë: {protein_g} –≥, –ñ: {fat_g} –≥, –£: {carbs_g} –≥"
        
        return sanitize_ai(result)
        
    except Exception as e:
        logger.error(f"Menu generation error: {e}")
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {e}"

def validate_exercises(plan: str, allowed: List[Dict[str, str]]) -> str:
    allowed_map = {e["name"].lower(): e["name"] for e in allowed}
    pattern = re.compile(r"(?m)^\s*(?:\d+\.?|[-‚Ä¢])?\s*([–ê-–ØA-Za-z—ë–Å][–ê-–Ø–∞-—èA-Za-z—ë–Å\s]{2,})")
    lines = plan.splitlines()
    for idx, line in enumerate(lines):
        match = pattern.match(line)
        if not match:
            continue
        name = match.group(1).strip()
        low = name.lower()
        if low not in allowed_map:
            close = difflib.get_close_matches(low, allowed_map.keys(), n=1, cutoff=0.6)
            if close:
                repl = allowed_map[close[0]]
                lines[idx] = line.replace(name, repl, 1)
    return "\n".join(lines)

async def generate_workout_via_llm(profile: Dict[str, Any], location: str, inventory: str, changes: str = "", days: int = 3) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ LLM"""
    if not client:
        return "–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤."
    
    goal = profile.get("goal", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")
    injuries = profile.get("injuries", "–Ω–µ—Ç")
    conditions = profile.get("conditions", "–Ω–µ—Ç")
    preferences = changes or profile.get("preferences", {}).get("workout_notes", "")

    exercises = await fetch_exercises(goal, inventory, injuries)
    exercise_prompt = ""
    if exercises:
        exercise_prompt = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n" + "\n".join(
            f"- {e['name']} (–º—ã—à—Ü–∞: {e['muscle']}, —É—Ä–æ–≤–µ–Ω—å: {e['level']})" for e in exercises
        ) + "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
    
    system_prompt = (
        "–í—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º NASM. "
        "–°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–ª–∞–Ω–∞. "
        "–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã # (—Ä–µ—à–µ—Ç–∫–∏) –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. "
        "–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—ã, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞. "
        "–í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é."
    )
    
    user_prompt = (
        f"–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ {days} –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è:\n"
        f"–ü–æ–ª: {profile.get('gender')}, –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age')}\n"
        f"–¶–µ–ª—å: {goal}\n"
        f"–ú–µ—Å—Ç–æ: {location}\n"
        f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory}\n"
        f"–¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {injuries}\n"
        f"–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {conditions}\n"
        f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {preferences or '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'}\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—ã√ó–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞.\n"
        f"–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã # (—Ä–µ—à–µ—Ç–∫–∏).\n"
        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–≤–µ—Ä—à–∏—Ç–µ: '–ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: ~X –∫–∫–∞–ª'"
        + ("\n" + exercise_prompt if exercise_prompt else "")
    )
    
    try:
        result = await chat_llm([
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ])
        
        # –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏
        result = result.replace("###", "").replace("##", "").replace("#", "")

        if exercises:
            result = validate_exercises(result, exercises)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏—Ç–æ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
        if not re.search(r"–ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:.*?–∫–∫–∞–ª", result):
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é
            estimated_weekly_kcal = days * 400  # –ø—Ä–∏–º–µ—Ä–Ω–æ 400 –∫–∫–∞–ª –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            result += f"\n\n–ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: ~{estimated_weekly_kcal} –∫–∫–∞–ª"
        
        return sanitize_ai(result)
        
    except Exception as e:
        logger.error(f"Workout generation error: {e}")
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"

def persona_system(role: str, profile: Dict[str, Any]) -> str:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
    if role == "nutri":
        train_link = profile.get("workout_plan_link")
        train_kcal = profile.get("workout_weekly_kcal")
        train_info = (
            f" –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω: {train_link}, —Ä–∞—Å—Ö–æ–¥ {train_kcal} –∫–∫–∞–ª/–Ω–µ–¥–µ–ª—é." if train_link and train_kcal else ""
        )
        return (
            f"–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã 15+ –ª–µ—Ç. "
            f"–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. "
            f"–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.{train_info} "
            f"–ö–ª–∏–µ–Ω—Ç: {profile.get('gender', '')}, {profile.get('age', '')} –ª–µ—Ç, "
            f"—Ü–µ–ª—å: {profile.get('goal', '')}, –∞–ª–ª–µ—Ä–≥–∏–∏: {profile.get('allergies', '–Ω–µ—Ç')}, "
            f"–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {profile.get('conditions', '–Ω–µ—Ç')}. "
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏."
        )
    elif role == "trainer":
        return (
            f"–í—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä NASM —Å –æ–ø—ã—Ç–æ–º 15+ –ª–µ—Ç. "
            f"–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. "
            f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ —Ç—Ä–∞–≤–º. "
            f"–ö–ª–∏–µ–Ω—Ç: {profile.get('gender', '')}, {profile.get('age', '')} –ª–µ—Ç, "
            f"—Ü–µ–ª—å: {profile.get('goal', '')}, —Ç—Ä–∞–≤–º—ã: {profile.get('injuries', '–Ω–µ—Ç')}, "
            f"–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {profile.get('conditions', '–Ω–µ—Ç')}. "
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—É—á–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏."
        )
    return "–í—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Ñ–∏—Ç–Ω–µ—Å—É."

# ========= –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê =========
def _jsonld(html: str) -> Optional[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON-LD –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ HTML"""
    try:
        import json
        import re
        
        # –ò—â–µ–º JSON-LD —Å–∫—Ä–∏–ø—Ç—ã
        scripts = re.findall(r'<script[^>]*type=["\']application/ld\+json["\'][^>]*>(.*?)</script>', html, re.DOTALL | re.IGNORECASE)
        
        for script in scripts:
            try:
                data = json.loads(script.strip())
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if isinstance(data, dict):
                    nutrition = data.get('nutrition') or data.get('nutritionValue')
                    if nutrition:
                        return _extract_nutrition_from_jsonld(nutrition)
            except json.JSONDecodeError:
                continue
        
        return None
    except Exception:
        return None

def _extract_nutrition_from_jsonld(nutrition_data) -> Optional[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    try:
        result = {}
        
        if isinstance(nutrition_data, dict):
            # –ü—Ä—è–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if 'calories' in nutrition_data:
                result['kcal_serv'] = float(nutrition_data['calories'])
            if 'protein' in nutrition_data:
                result['protein_serv'] = float(nutrition_data['protein'])
            if 'fat' in nutrition_data:
                result['fat_serv'] = float(nutrition_data['fat'])
            if 'carbohydrate' in nutrition_data or 'carbs' in nutrition_data:
                result['carb_serv'] = float(nutrition_data.get('carbohydrate') or nutrition_data.get('carbs'))
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ—Ä—Ü–∏—é 100–≥ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–∞—á–µ
        result['serving_g'] = 100
        
        return result if result else None
    except Exception:
        return None

def _regex_nutrition(html: str) -> Optional[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        text = html.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        kcal_patterns = [
            r'(\d{1,4})\s*(?:–∫–∫–∞–ª|kcal|calories?)\s*(?:/100\s*–≥|–Ω–∞\s*100\s*–≥|per\s*100\s*g)?',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})\s*(?:–∫–∫–∞–ª)?',
            r'—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è\s+—Ü–µ–Ω–Ω–æ—Å—Ç—å[:\s]*(\d{1,4})\s*(?:–∫–∫–∞–ª)?',
            r'energy[:\s]*(\d{1,4})\s*(?:kcal)?',
            r'–ø–∏—â–µ–≤–∞—è\s+—Ü–µ–Ω–Ω–æ—Å—Ç—å[:\s\-]*(\d{1,4})\s*(?:–∫–∫–∞–ª)?',
            r'(\d{1,4})\s*–∫–∞–ª(?:–æ—Ä–∏–π)?',
            r'—ç–Ω–µ—Ä–≥–∏—è[:\s]*(\d{1,4})'
        ]
        
        protein_patterns = [
            r'(?:–±–µ–ª–∫[–∏–∞–æ]|protein|–ø—Ä–æ—Ç–µ–∏–Ω)[:\s\-]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?\s*(?:–±–µ–ª–∫|protein)',
            r'–±[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'–±–µ–ª–æ–∫[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)'
        ]
        
        fat_patterns = [
            r'(?:–∂–∏—Ä[—ã–∞–æ]|fat|–ª–∏–ø–∏–¥)[:\s\-]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?\s*(?:–∂–∏—Ä|fat)',
            r'–∂[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'–ª–∏–ø–∏–¥—ã[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)'
        ]
        
        carb_patterns = [
            r'(?:—É–≥–ª–µ–≤–æ–¥[—ã–∞–æ]|carb(?:ohydrate)?s?|—Å–∞—Ö–∞—Ä)[:\s\-]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?',
            r'(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥?\s*(?:—É–≥–ª–µ–≤–æ–¥|carb)',
            r'—É[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)\s*–≥',
            r'—É–≥–ª–µ–≤–æ–¥—ã[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)'
        ]
        
        # –ò—â–µ–º –∫–∞–ª–æ—Ä–∏–∏
        kcal = None
        for pattern in kcal_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                try:
                    potential_kcal = float(match)
                    if 10 <= potential_kcal <= 900:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                        kcal = potential_kcal
                        break
                except (ValueError, TypeError):
                    continue
            if kcal:
                break
        
        if not kcal:
            logger.info("No calories found in regex extraction")
            return None
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        def extract_macro(patterns):
            for pattern in patterns:
                matches = re.findall(pattern, text)
                for match in matches:
                    try:
                        val = float(str(match).replace(',', '.'))
                        if 0 <= val <= 100:
                            return val
                    except (ValueError, TypeError):
                        continue
            return None
        
        protein = extract_macro(protein_patterns)
        fat = extract_macro(fat_patterns)  
        carbs = extract_macro(carb_patterns)
        
        result = {
            'kcal_serv': kcal,
            'serving_g': 100
        }
        
        if protein is not None:
            result['protein_serv'] = protein
        if fat is not None:
            result['fat_serv'] = fat
        if carbs is not None:
            result['carb_serv'] = carbs
        
        logger.info(f"Regex extraction result: kcal={kcal}, protein={protein}, fat={fat}, carbs={carbs}")
        return result
        
    except Exception as e:
        logger.warning(f"Regex nutrition parsing error: {e}")
        return None

async def _vision_ocr_text(image_url: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Google Vision API"""
    if not VISION_KEY:
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        def _fetch_image():
            response = requests.get(image_url, timeout=15)
            return response if response.status_code == 200 else None
        
        response = await asyncio.to_thread(_fetch_image)
        if not response:
            return None
        
        import base64
        image_content = base64.b64encode(response.content).decode('utf-8')
        
        # –ó–∞–ø—Ä–æ—Å –∫ Vision API
        vision_url = f"https://vision.googleapis.com/v1/images:annotate?key={VISION_KEY}"
        
        payload = {
            "requests": [{
                "image": {"content": image_content},
                "features": [{"type": "TEXT_DETECTION"}]
            }]
        }
        
        def _make_vision_request():
            return requests.post(vision_url, json=payload, timeout=20)
        
        ocr_response = await asyncio.to_thread(_make_vision_request)
        if ocr_response.status_code == 200:
            result = ocr_response.json()
            annotations = result.get('responses', [{}])[0].get('textAnnotations', [])
            if annotations:
                return annotations[0].get('description', '')
        
        return None
    except Exception as e:
        logger.warning(f"Vision OCR failed: {e}")
        return None

def _parse_ocr(text: str) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        text_lower = text.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è OCR —Ç–µ–∫—Å—Ç–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º–∏)
        kcal_match = re.search(r'(\d{1,4})\s*(?:–∫–∫–∞–ª|kcal|cal|calories?)', text_lower)
        protein_match = re.search(r'(?:–±–µ–ª–∫|protein|–ø—Ä–æ—Ç–µ–∏–Ω)[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)', text_lower)
        fat_match = re.search(r'(?:–∂–∏—Ä|fat|–ª–∏–ø–∏–¥)[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)', text_lower)
        carb_match = re.search(r'(?:—É–≥–ª–µ–≤–æ–¥|carb|—Å–∞—Ö–∞—Ä)[:\s]*(\d{1,3}(?:[.,]\d{1,2})?)', text_lower)
        
        if kcal_match:
            result = {
                'kcal_serv': float(kcal_match.group(1)),
                'serving_g': 100
            }
            
            if protein_match:
                result['protein_serv'] = float(protein_match.group(1).replace(',', '.'))
            if fat_match:
                result['fat_serv'] = float(fat_match.group(1).replace(',', '.'))
            if carb_match:
                result['carb_serv'] = float(carb_match.group(1).replace(',', '.'))
            
            return result
        
        return None
    except Exception:
        return None

def _extract_from_ocr_text(text: str) -> Optional[Dict[str, Any]]:
    """Alias –¥–ª—è _parse_ocr –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return _parse_ocr(text)

# ========= –ê–ù–ö–ï–¢–ê =========
async def handle_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]) -> bool:
    u, text, step = update.effective_user, (update.message.text or "").strip(), st.get("awaiting")
    if not step or not step.startswith("onb_"):
        return False
    if step == "onb_gender":
        if text not in ("–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π"):
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ¬´–ñ–µ–Ω—Å–∫–∏–π¬ª –∏–ª–∏ ¬´–ú—É–∂—Å–∫–æ–π¬ª.", reply_markup=ReplyKeyboardMarkup(GENDER_KB, resize_keyboard=True))
            return True
        st["profile"]["gender"] = text
        st["awaiting"] = "onb_age"
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç): 10‚Äì100", reply_markup=ReplyKeyboardRemove())
    elif step == "onb_age":
        try:
            age = int(text)
            assert 10 <= age <= 100
            st["profile"]["age"] = age
            st["awaiting"] = "onb_height"
            await update.message.reply_text("–†–æ—Å—Ç (—Å–º): 100‚Äì250")
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 10‚Äì100.")
    elif step == "onb_height":
        try:
            h = int(text)
            assert 100 <= h <= 250
            st["profile"]["height_cm"] = h
            st["awaiting"] = "onb_weight"
            await update.message.reply_text("–í–µ—Å (–∫–≥): 30‚Äì300")
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 100‚Äì250.")
    elif step == "onb_weight":
        try:
            w = float(text.replace(",", "."))
            assert 30 <= w <= 300
            st["profile"]["weight_kg"] = round(w, 1)
            st["awaiting"] = "onb_activity"
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", reply_markup=ReplyKeyboardMarkup(ACTIVITY_KB, resize_keyboard=True))
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 30‚Äì300 (–Ω–∞–ø—Ä–∏–º–µ—Ä 72.5).")
    elif step == "onb_activity":
        if text not in ("–ù–∏–∑–∫–∞—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "–í—ã—Å–æ–∫–∞—è"):
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –ù–∏–∑–∫–∞—è | –£–º–µ—Ä–µ–Ω–Ω–∞—è | –í—ã—Å–æ–∫–∞—è", reply_markup=ReplyKeyboardMarkup(ACTIVITY_KB, resize_keyboard=True))
            return True
        st["profile"]["activity"] = text
        st["awaiting"] = "onb_goal"
        await update.message.reply_text("–¶–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(GOAL_KB, resize_keyboard=True))
    elif step == "onb_goal":
        if text not in ("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"):
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É | –ü–æ—Ö—É–¥–µ—Ç—å | –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", reply_markup=ReplyKeyboardMarkup(GOAL_KB, resize_keyboard=True))
            return True
        st["profile"]["goal"] = text
        st["awaiting"] = "onb_allergies"
        await update.message.reply_text("–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.", reply_markup=ReplyKeyboardRemove())
    elif step == "onb_allergies":
        st["profile"]["allergies"] = text
        st["awaiting"] = "onb_conditions"
        await update.message.reply_text("–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? (–∏–ª–∏ ¬´–Ω–µ—Ç¬ª).")
    elif step == "onb_conditions":
        st["profile"]["conditions"] = text
        st["awaiting"] = "onb_injuries"
        await update.message.reply_text("–¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è? (–∏–ª–∏ ¬´–Ω–µ—Ç¬ª).")
    elif step == "onb_injuries":
        st["profile"]["injuries"] = text
        st["awaiting"] = None
        add_points(st, 25)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        profile = st["profile"]
        k = calc_kbju_weight_loss(profile)

        summary_lines = [
            "‚úÖ –ê–ù–ö–ï–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê! +25 –±–∞–ª–ª–æ–≤!",
            "",
            "üìã –í–ê–®–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï:",
            f"üë§ {profile['gender']}, {profile['age']} –ª–µ—Ç",
            f"üìè –†–æ—Å—Ç: {profile['height_cm']} —Å–º, –í–µ—Å: {profile['weight_kg']} –∫–≥",
            f"üìä –ò–ú–¢: {k['bmi']} ({k['bmi_category']})",
            f"üéØ –¶–µ–ª—å: {profile['goal']}",
            f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile['activity']}",
            "",
            "üî• –í–ê–®–ò –ù–û–†–ú–´ –ü–ò–¢–ê–ù–ò–Ø:",
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {k['target_kcal']} –∫–∫–∞–ª/–¥–µ–Ω—å",
            f"‚Ä¢ –ë–µ–ª–∫–∏: {k['protein_g']} –≥/–¥–µ–Ω—å",
            f"‚Ä¢ –ñ–∏—Ä—ã: {k['fat_g']} –≥/–¥–µ–Ω—å",
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {k['carbs_g']} –≥/–¥–µ–Ω—å",
        ]

        if k.get("training_plan_link") and k.get("training_kcal_weekly"):
            summary_lines.append(
                f"üèãÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {k['training_plan_link']} (—É—á—Ç–µ–Ω–æ {k['training_kcal_weekly']} –∫–∫–∞–ª/–Ω–µ–¥.)"
            )

        summary_lines.extend([
            "",
            "üí° –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:",
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
        if profile['goal'] == "–ü–æ—Ö—É–¥–µ—Ç—å":
            summary_lines.extend([
                "1. üçΩÔ∏è –ü–∏—Ç–∞–π—Ç–µ—Å—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –Ω–æ—Ä–º—ã",
                "2. ü•© –£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ–ª—é –±–µ–ª–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à—Ü",
                "3. üí™ –î–æ–±–∞–≤—å—Ç–µ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
                "4. üì± –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è",
                "5. ‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è"
            ])
        elif profile['goal'] == "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
            summary_lines.extend([
                "1. üçΩÔ∏è –ü–∏—Ç–∞–π—Ç–µ—Å—å —Å –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π",
                "2. ü•© –£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –º–Ω–æ–≥–æ –±–µ–ª–∫–∞ (–∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞)",
                "3. üí™ –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
                "4. üí§ –°–ø–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 7-8 —á–∞—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                "5. üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ"
            ])
        else:  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å
            summary_lines.extend([
                "1. üçΩÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                "2. üèÉ –°–æ—á–µ—Ç–∞–π—Ç–µ –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                "3. üìä –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤–µ—Å –∏ —Å–æ—Å—Ç–∞–≤ —Ç–µ–ª–∞",
                "4. ü•ó –í–∫–ª—é—á–∞–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ä–∞—Ü–∏–æ–Ω",
                "5. üíß –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã (30-35 –º–ª/–∫–≥ –≤–µ—Å–∞)"
            ])

        if profile['allergies'] and profile['allergies'].lower() != "–Ω–µ—Ç":
            summary_lines.append(f"‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏: {profile['allergies']}")

        if profile['conditions'] and profile['conditions'].lower() != "–Ω–µ—Ç":
            summary_lines.append(f"‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {profile['conditions']}")

        if profile['injuries'] and profile['injuries'].lower() != "–Ω–µ—Ç":
            summary_lines.append(f"‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {profile['injuries']}")

        summary_lines.extend([
            "",
            "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –±–æ—Ç–∞:",
            "‚Ä¢ ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ - –º–µ–Ω—é –∏ –ö–ë–ñ–£",
            "‚Ä¢ üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä - –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
            "‚Ä¢ üìí –î–Ω–µ–≤–Ω–∏–∫–∏ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        ])

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ
        full_summary = "\n".join(summary_lines)
        if len(full_summary) > 4000:
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            first_part = "\n".join(summary_lines[:15])
            await update.message.reply_text(first_part)

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            second_part = "\n".join(summary_lines[15:])
            await update.message.reply_text(second_part, reply_markup=role_keyboard(None))
        else:
            await update.message.reply_text(full_summary, reply_markup=role_keyboard(None))

    save_state(u.id, st)
    return True

# ========= KEEP‚ÄëALIVE HTTP –°–ï–†–í–ï–† =========
def start_keepalive_server():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π keep_alive –º–æ–¥—É–ª—å
    try:
        import keep_alive
        keep_alive.start()
        logger.info("Keep‚Äëalive server started")
    except Exception as e:
        logger.warning(f"Keep‚Äëalive server –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")

# ========= –ó–ê–ü–£–°–ö =========
def main():
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
        return
    if not TELEGRAM_PAYMENT_PROVIDER_TOKEN:
        print("–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_PAYMENT_PROVIDER_TOKEN. –ü–ª–∞—Ç—ë–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    # –∑–∞–ø—É—Å—Ç–∏–º keep‚Äëalive —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫)
    try:
        import threading
        threading.Thread(target=start_keepalive_server, daemon=True).start()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å keep-alive: {e}")

    app = Application.builder().token(BOT_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("whoami", whoami_cmd))
    app.add_handler(CommandHandler("health", health_cmd))
    app.add_handler(CommandHandler("version", version_cmd))
    app.add_handler(CommandHandler("shop", shop_command))
    app.add_handler(CommandHandler("add_admin", add_admin_cmd))
    app.add_handler(CommandHandler("remove_admin", remove_admin_cmd))
    app.add_handler(CommandHandler("list_admins", list_admins_cmd))


    app.add_handler(
        CallbackQueryHandler(
            recipes_callbacks, pattern=r"^(rroot|rcat:|rpage:|rshow:|radd:|rback|shop_open)"
        )
    )
    app.add_handler(CallbackQueryHandler(on_callback, pattern=r"^(save_menu|save_workout|buy):"))

    # –ø–ª–∞—Ç–µ–∂–∏
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    # –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_text_or_photo))
    app.add_error_handler(error_handler)

    print(f"{PROJECT_NAME} –∑–∞–ø—É—â–µ–Ω. {VERSION}")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()